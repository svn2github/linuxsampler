
#line 3 "lex.yy.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 31
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

int yylex_init (yyscan_t* scanner);

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart (FILE *input_file ,yyscan_t yyscanner );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void yy_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void yy_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void yypop_buffer_state (yyscan_t yyscanner );

static void yyensure_buffer_stack (yyscan_t yyscanner );
static void yy_load_buffer_state (yyscan_t yyscanner );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *yyalloc (yy_size_t ,yyscan_t yyscanner );
void *yyrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void yyfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

typedef yyconst struct yy_trans_info *yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 57
#define YY_END_OF_BUFFER 58
struct yy_trans_info
	{
	flex_int16_t yy_verify;
	flex_int16_t yy_nxt;
	};
static yyconst struct yy_trans_info yy_transition[3516] =
    {
 {   0,   0 }, {   0,3260 }, {   0,   0 }, {   0,3258 }, {   1,1032 },
 {   2,1032 }, {   3,1032 }, {   4,1032 }, {   5,1032 }, {   6,1032 },
 {   7,1032 }, {   8,1032 }, {   9,1032 }, {  10,1034 }, {  11,1032 },
 {  12,1032 }, {  13,1036 }, {  14,1032 }, {  15,1032 }, {  16,1032 },
 {  17,1032 }, {  18,1032 }, {  19,1032 }, {  20,1032 }, {  21,1032 },
 {  22,1032 }, {  23,1032 }, {  24,1032 }, {  25,1032 }, {  26,1032 },
 {  27,1032 }, {  28,1032 }, {  29,1032 }, {  30,1032 }, {  31,1032 },
 {  32,1038 }, {  33,1032 }, {  34,1032 }, {  35,1040 }, {  36,1032 },
 {  37,1032 }, {  38,1032 }, {  39,1042 }, {  40,1032 }, {  41,1032 },
 {  42,1032 }, {  43,1044 }, {  44,1032 }, {  45,1044 }, {  46,1032 },

 {  47,1032 }, {  48,1056 }, {  49,1068 }, {  50,1068 }, {  51,1068 },
 {  52,1068 }, {  53,1068 }, {  54,1068 }, {  55,1068 }, {  56,1068 },
 {  57,1068 }, {  58,1032 }, {  59,1032 }, {  60,1032 }, {  61,1046 },
 {  62,1032 }, {  63,1032 }, {  64,1032 }, {  65,1058 }, {  66,1060 },
 {  67,1064 }, {  68,1066 }, {  69,1070 }, {  70,1032 }, {  71,1072 },
 {  72,1032 }, {  73,1074 }, {  74,1032 }, {  75,1032 }, {  76,1077 },
 {  77,1080 }, {  78,1082 }, {  79,1032 }, {  80,1085 }, {  81,1087 },
 {  82,1089 }, {  83,1091 }, {  84,1032 }, {  85,1128 }, {  86,1130 },
 {  87,1032 }, {  88,1032 }, {  89,1032 }, {  90,1032 }, {  91,1032 },
 {  92,1032 }, {  93,1032 }, {  94,1032 }, {  95,1032 }, {  96,1032 },

 {  97,1032 }, {  98,1032 }, {  99,1032 }, { 100,1032 }, { 101,1032 },
 { 102,1032 }, { 103,1032 }, { 104,1032 }, { 105,1032 }, { 106,1032 },
 { 107,1032 }, { 108,1032 }, { 109,1032 }, { 110,1032 }, { 111,1032 },
 { 112,1032 }, { 113,1032 }, { 114,1032 }, { 115,1032 }, { 116,1032 },
 { 117,1032 }, { 118,1032 }, { 119,1032 }, { 120,1032 }, { 121,1032 },
 { 122,1032 }, { 123,1032 }, { 124,1032 }, { 125,1032 }, { 126,1032 },
 { 127,1032 }, { 128,1032 }, { 129,1032 }, { 130,1032 }, { 131,1032 },
 { 132,1032 }, { 133,1032 }, { 134,1032 }, { 135,1032 }, { 136,1032 },
 { 137,1032 }, { 138,1032 }, { 139,1032 }, { 140,1032 }, { 141,1032 },
 { 142,1032 }, { 143,1032 }, { 144,1032 }, { 145,1032 }, { 146,1032 },

 { 147,1032 }, { 148,1032 }, { 149,1032 }, { 150,1032 }, { 151,1032 },
 { 152,1032 }, { 153,1032 }, { 154,1032 }, { 155,1032 }, { 156,1032 },
 { 157,1032 }, { 158,1032 }, { 159,1032 }, { 160,1032 }, { 161,1032 },
 { 162,1032 }, { 163,1032 }, { 164,1032 }, { 165,1032 }, { 166,1032 },
 { 167,1032 }, { 168,1032 }, { 169,1032 }, { 170,1032 }, { 171,1032 },
 { 172,1032 }, { 173,1032 }, { 174,1032 }, { 175,1032 }, { 176,1032 },
 { 177,1032 }, { 178,1032 }, { 179,1032 }, { 180,1032 }, { 181,1032 },
 { 182,1032 }, { 183,1032 }, { 184,1032 }, { 185,1032 }, { 186,1032 },
 { 187,1032 }, { 188,1032 }, { 189,1032 }, { 190,1032 }, { 191,1032 },
 { 192,1032 }, { 193,1032 }, { 194,1032 }, { 195,1032 }, { 196,1032 },

 { 197,1032 }, { 198,1032 }, { 199,1032 }, { 200,1032 }, { 201,1032 },
 { 202,1032 }, { 203,1032 }, { 204,1032 }, { 205,1032 }, { 206,1032 },
 { 207,1032 }, { 208,1032 }, { 209,1032 }, { 210,1032 }, { 211,1032 },
 { 212,1032 }, { 213,1032 }, { 214,1032 }, { 215,1032 }, { 216,1032 },
 { 217,1032 }, { 218,1032 }, { 219,1032 }, { 220,1032 }, { 221,1032 },
 { 222,1032 }, { 223,1032 }, { 224,1032 }, { 225,1032 }, { 226,1032 },
 { 227,1032 }, { 228,1032 }, { 229,1032 }, { 230,1032 }, { 231,1032 },
 { 232,1032 }, { 233,1032 }, { 234,1032 }, { 235,1032 }, { 236,1032 },
 { 237,1032 }, { 238,1032 }, { 239,1032 }, { 240,1032 }, { 241,1032 },
 { 242,1032 }, { 243,1032 }, { 244,1032 }, { 245,1032 }, { 246,1032 },

 { 247,1032 }, { 248,1032 }, { 249,1032 }, { 250,1032 }, { 251,1032 },
 { 252,1032 }, { 253,1032 }, { 254,1032 }, { 255,1032 }, { 256,1032 },
 {   0,   0 }, {   0,3000 }, {   1, 774 }, {   2, 774 }, {   3, 774 },
 {   4, 774 }, {   5, 774 }, {   6, 774 }, {   7, 774 }, {   8, 774 },
 {   9, 774 }, {  10, 776 }, {  11, 774 }, {  12, 774 }, {  13, 778 },
 {  14, 774 }, {  15, 774 }, {  16, 774 }, {  17, 774 }, {  18, 774 },
 {  19, 774 }, {  20, 774 }, {  21, 774 }, {  22, 774 }, {  23, 774 },
 {  24, 774 }, {  25, 774 }, {  26, 774 }, {  27, 774 }, {  28, 774 },
 {  29, 774 }, {  30, 774 }, {  31, 774 }, {  32, 780 }, {  33, 774 },
 {  34, 774 }, {  35, 782 }, {  36, 774 }, {  37, 774 }, {  38, 774 },

 {  39, 784 }, {  40, 774 }, {  41, 774 }, {  42, 774 }, {  43, 786 },
 {  44, 774 }, {  45, 786 }, {  46, 774 }, {  47, 774 }, {  48, 798 },
 {  49, 810 }, {  50, 810 }, {  51, 810 }, {  52, 810 }, {  53, 810 },
 {  54, 810 }, {  55, 810 }, {  56, 810 }, {  57, 810 }, {  58, 774 },
 {  59, 774 }, {  60, 774 }, {  61, 788 }, {  62, 774 }, {  63, 774 },
 {  64, 774 }, {  65, 800 }, {  66, 802 }, {  67, 806 }, {  68, 808 },
 {  69, 812 }, {  70, 774 }, {  71, 814 }, {  72, 774 }, {  73, 816 },
 {  74, 774 }, {  75, 774 }, {  76, 819 }, {  77, 822 }, {  78, 824 },
 {  79, 774 }, {  80, 827 }, {  81, 829 }, {  82, 831 }, {  83, 833 },
 {  84, 774 }, {  85, 870 }, {  86, 872 }, {  87, 774 }, {  88, 774 },

 {  89, 774 }, {  90, 774 }, {  91, 774 }, {  92, 774 }, {  93, 774 },
 {  94, 774 }, {  95, 774 }, {  96, 774 }, {  97, 774 }, {  98, 774 },
 {  99, 774 }, { 100, 774 }, { 101, 774 }, { 102, 774 }, { 103, 774 },
 { 104, 774 }, { 105, 774 }, { 106, 774 }, { 107, 774 }, { 108, 774 },
 { 109, 774 }, { 110, 774 }, { 111, 774 }, { 112, 774 }, { 113, 774 },
 { 114, 774 }, { 115, 774 }, { 116, 774 }, { 117, 774 }, { 118, 774 },
 { 119, 774 }, { 120, 774 }, { 121, 774 }, { 122, 774 }, { 123, 774 },
 { 124, 774 }, { 125, 774 }, { 126, 774 }, { 127, 774 }, { 128, 774 },
 { 129, 774 }, { 130, 774 }, { 131, 774 }, { 132, 774 }, { 133, 774 },
 { 134, 774 }, { 135, 774 }, { 136, 774 }, { 137, 774 }, { 138, 774 },

 { 139, 774 }, { 140, 774 }, { 141, 774 }, { 142, 774 }, { 143, 774 },
 { 144, 774 }, { 145, 774 }, { 146, 774 }, { 147, 774 }, { 148, 774 },
 { 149, 774 }, { 150, 774 }, { 151, 774 }, { 152, 774 }, { 153, 774 },
 { 154, 774 }, { 155, 774 }, { 156, 774 }, { 157, 774 }, { 158, 774 },
 { 159, 774 }, { 160, 774 }, { 161, 774 }, { 162, 774 }, { 163, 774 },
 { 164, 774 }, { 165, 774 }, { 166, 774 }, { 167, 774 }, { 168, 774 },
 { 169, 774 }, { 170, 774 }, { 171, 774 }, { 172, 774 }, { 173, 774 },
 { 174, 774 }, { 175, 774 }, { 176, 774 }, { 177, 774 }, { 178, 774 },
 { 179, 774 }, { 180, 774 }, { 181, 774 }, { 182, 774 }, { 183, 774 },
 { 184, 774 }, { 185, 774 }, { 186, 774 }, { 187, 774 }, { 188, 774 },

 { 189, 774 }, { 190, 774 }, { 191, 774 }, { 192, 774 }, { 193, 774 },
 { 194, 774 }, { 195, 774 }, { 196, 774 }, { 197, 774 }, { 198, 774 },
 { 199, 774 }, { 200, 774 }, { 201, 774 }, { 202, 774 }, { 203, 774 },
 { 204, 774 }, { 205, 774 }, { 206, 774 }, { 207, 774 }, { 208, 774 },
 { 209, 774 }, { 210, 774 }, { 211, 774 }, { 212, 774 }, { 213, 774 },
 { 214, 774 }, { 215, 774 }, { 216, 774 }, { 217, 774 }, { 218, 774 },
 { 219, 774 }, { 220, 774 }, { 221, 774 }, { 222, 774 }, { 223, 774 },
 { 224, 774 }, { 225, 774 }, { 226, 774 }, { 227, 774 }, { 228, 774 },
 { 229, 774 }, { 230, 774 }, { 231, 774 }, { 232, 774 }, { 233, 774 },
 { 234, 774 }, { 235, 774 }, { 236, 774 }, { 237, 774 }, { 238, 774 },

 { 239, 774 }, { 240, 774 }, { 241, 774 }, { 242, 774 }, { 243, 774 },
 { 244, 774 }, { 245, 774 }, { 246, 774 }, { 247, 774 }, { 248, 774 },
 { 249, 774 }, { 250, 774 }, { 251, 774 }, { 252, 774 }, { 253, 774 },
 { 254, 774 }, { 255, 774 }, { 256, 774 }, {   0,   0 }, {   0,2742 },
 {   1, 695 }, {   2, 695 }, {   3, 695 }, {   4, 695 }, {   5, 695 },
 {   6, 695 }, {   7, 695 }, {   8, 695 }, {   9, 695 }, {  10, 695 },
 {  11, 695 }, {  12, 695 }, {  13, 695 }, {  14, 695 }, {  15, 695 },
 {  16, 695 }, {  17, 695 }, {  18, 695 }, {  19, 695 }, {  20, 695 },
 {  21, 695 }, {  22, 695 }, {  23, 695 }, {  24, 695 }, {  25, 695 },
 {  26, 695 }, {  27, 695 }, {  28, 695 }, {  29, 695 }, {  30, 695 },

 {  31, 695 }, {  32, 695 }, {  33, 695 }, {  34, 695 }, {  35, 695 },
 {  36, 695 }, {  37, 695 }, {  38, 695 }, {  39, 616 }, {  40, 695 },
 {  41, 695 }, {  42, 695 }, {  43, 695 }, {  44, 695 }, {  45, 695 },
 {  46, 695 }, {  47, 695 }, {  48, 695 }, {  49, 695 }, {  50, 695 },
 {  51, 695 }, {  52, 695 }, {  53, 695 }, {  54, 695 }, {  55, 695 },
 {  56, 695 }, {  57, 695 }, {  58, 695 }, {  59, 695 }, {  60, 695 },
 {  61, 695 }, {  62, 695 }, {  63, 695 }, {  64, 695 }, {  65, 695 },
 {  66, 695 }, {  67, 695 }, {  68, 695 }, {  69, 695 }, {  70, 695 },
 {  71, 695 }, {  72, 695 }, {  73, 695 }, {  74, 695 }, {  75, 695 },
 {  76, 695 }, {  77, 695 }, {  78, 695 }, {  79, 695 }, {  80, 695 },

 {  81, 695 }, {  82, 695 }, {  83, 695 }, {  84, 695 }, {  85, 695 },
 {  86, 695 }, {  87, 695 }, {  88, 695 }, {  89, 695 }, {  90, 695 },
 {  91, 695 }, {  92, 953 }, {  93, 695 }, {  94, 695 }, {  95, 695 },
 {  96, 695 }, {  97, 695 }, {  98, 695 }, {  99, 695 }, { 100, 695 },
 { 101, 695 }, { 102, 695 }, { 103, 695 }, { 104, 695 }, { 105, 695 },
 { 106, 695 }, { 107, 695 }, { 108, 695 }, { 109, 695 }, { 110, 695 },
 { 111, 695 }, { 112, 695 }, { 113, 695 }, { 114, 695 }, { 115, 695 },
 { 116, 695 }, { 117, 695 }, { 118, 695 }, { 119, 695 }, { 120, 695 },
 { 121, 695 }, { 122, 695 }, { 123, 695 }, { 124, 695 }, { 125, 695 },
 { 126, 695 }, { 127, 695 }, { 128, 695 }, { 129, 695 }, { 130, 695 },

 { 131, 695 }, { 132, 695 }, { 133, 695 }, { 134, 695 }, { 135, 695 },
 { 136, 695 }, { 137, 695 }, { 138, 695 }, { 139, 695 }, { 140, 695 },
 { 141, 695 }, { 142, 695 }, { 143, 695 }, { 144, 695 }, { 145, 695 },
 { 146, 695 }, { 147, 695 }, { 148, 695 }, { 149, 695 }, { 150, 695 },
 { 151, 695 }, { 152, 695 }, { 153, 695 }, { 154, 695 }, { 155, 695 },
 { 156, 695 }, { 157, 695 }, { 158, 695 }, { 159, 695 }, { 160, 695 },
 { 161, 695 }, { 162, 695 }, { 163, 695 }, { 164, 695 }, { 165, 695 },
 { 166, 695 }, { 167, 695 }, { 168, 695 }, { 169, 695 }, { 170, 695 },
 { 171, 695 }, { 172, 695 }, { 173, 695 }, { 174, 695 }, { 175, 695 },
 { 176, 695 }, { 177, 695 }, { 178, 695 }, { 179, 695 }, { 180, 695 },

 { 181, 695 }, { 182, 695 }, { 183, 695 }, { 184, 695 }, { 185, 695 },
 { 186, 695 }, { 187, 695 }, { 188, 695 }, { 189, 695 }, { 190, 695 },
 { 191, 695 }, { 192, 695 }, { 193, 695 }, { 194, 695 }, { 195, 695 },
 { 196, 695 }, { 197, 695 }, { 198, 695 }, { 199, 695 }, { 200, 695 },
 { 201, 695 }, { 202, 695 }, { 203, 695 }, { 204, 695 }, { 205, 695 },
 { 206, 695 }, { 207, 695 }, { 208, 695 }, { 209, 695 }, { 210, 695 },
 { 211, 695 }, { 212, 695 }, { 213, 695 }, { 214, 695 }, { 215, 695 },
 { 216, 695 }, { 217, 695 }, { 218, 695 }, { 219, 695 }, { 220, 695 },
 { 221, 695 }, { 222, 695 }, { 223, 695 }, { 224, 695 }, { 225, 695 },
 { 226, 695 }, { 227, 695 }, { 228, 695 }, { 229, 695 }, { 230, 695 },

 { 231, 695 }, { 232, 695 }, { 233, 695 }, { 234, 695 }, { 235, 695 },
 { 236, 695 }, { 237, 695 }, { 238, 695 }, { 239, 695 }, { 240, 695 },
 { 241, 695 }, { 242, 695 }, { 243, 695 }, { 244, 695 }, { 245, 695 },
 { 246, 695 }, { 247, 695 }, { 248, 695 }, { 249, 695 }, { 250, 695 },
 { 251, 695 }, { 252, 695 }, { 253, 695 }, { 254, 695 }, { 255, 695 },
 { 256, 695 }, {   0,   0 }, {   0,2484 }, {   1, 437 }, {   2, 437 },
 {   3, 437 }, {   4, 437 }, {   5, 437 }, {   6, 437 }, {   7, 437 },
 {   8, 437 }, {   9, 437 }, {  10, 437 }, {  11, 437 }, {  12, 437 },
 {  13, 437 }, {  14, 437 }, {  15, 437 }, {  16, 437 }, {  17, 437 },
 {  18, 437 }, {  19, 437 }, {  20, 437 }, {  21, 437 }, {  22, 437 },

 {  23, 437 }, {  24, 437 }, {  25, 437 }, {  26, 437 }, {  27, 437 },
 {  28, 437 }, {  29, 437 }, {  30, 437 }, {  31, 437 }, {  32, 437 },
 {  33, 437 }, {  34, 437 }, {  35, 437 }, {  36, 437 }, {  37, 437 },
 {  38, 437 }, {  39, 358 }, {  40, 437 }, {  41, 437 }, {  42, 437 },
 {  43, 437 }, {  44, 437 }, {  45, 437 }, {  46, 437 }, {  47, 437 },
 {  48, 437 }, {  49, 437 }, {  50, 437 }, {  51, 437 }, {  52, 437 },
 {  53, 437 }, {  54, 437 }, {  55, 437 }, {  56, 437 }, {  57, 437 },
 {  58, 437 }, {  59, 437 }, {  60, 437 }, {  61, 437 }, {  62, 437 },
 {  63, 437 }, {  64, 437 }, {  65, 437 }, {  66, 437 }, {  67, 437 },
 {  68, 437 }, {  69, 437 }, {  70, 437 }, {  71, 437 }, {  72, 437 },

 {  73, 437 }, {  74, 437 }, {  75, 437 }, {  76, 437 }, {  77, 437 },
 {  78, 437 }, {  79, 437 }, {  80, 437 }, {  81, 437 }, {  82, 437 },
 {  83, 437 }, {  84, 437 }, {  85, 437 }, {  86, 437 }, {  87, 437 },
 {  88, 437 }, {  89, 437 }, {  90, 437 }, {  91, 437 }, {  92, 695 },
 {  93, 437 }, {  94, 437 }, {  95, 437 }, {  96, 437 }, {  97, 437 },
 {  98, 437 }, {  99, 437 }, { 100, 437 }, { 101, 437 }, { 102, 437 },
 { 103, 437 }, { 104, 437 }, { 105, 437 }, { 106, 437 }, { 107, 437 },
 { 108, 437 }, { 109, 437 }, { 110, 437 }, { 111, 437 }, { 112, 437 },
 { 113, 437 }, { 114, 437 }, { 115, 437 }, { 116, 437 }, { 117, 437 },
 { 118, 437 }, { 119, 437 }, { 120, 437 }, { 121, 437 }, { 122, 437 },

 { 123, 437 }, { 124, 437 }, { 125, 437 }, { 126, 437 }, { 127, 437 },
 { 128, 437 }, { 129, 437 }, { 130, 437 }, { 131, 437 }, { 132, 437 },
 { 133, 437 }, { 134, 437 }, { 135, 437 }, { 136, 437 }, { 137, 437 },
 { 138, 437 }, { 139, 437 }, { 140, 437 }, { 141, 437 }, { 142, 437 },
 { 143, 437 }, { 144, 437 }, { 145, 437 }, { 146, 437 }, { 147, 437 },
 { 148, 437 }, { 149, 437 }, { 150, 437 }, { 151, 437 }, { 152, 437 },
 { 153, 437 }, { 154, 437 }, { 155, 437 }, { 156, 437 }, { 157, 437 },
 { 158, 437 }, { 159, 437 }, { 160, 437 }, { 161, 437 }, { 162, 437 },
 { 163, 437 }, { 164, 437 }, { 165, 437 }, { 166, 437 }, { 167, 437 },
 { 168, 437 }, { 169, 437 }, { 170, 437 }, { 171, 437 }, { 172, 437 },

 { 173, 437 }, { 174, 437 }, { 175, 437 }, { 176, 437 }, { 177, 437 },
 { 178, 437 }, { 179, 437 }, { 180, 437 }, { 181, 437 }, { 182, 437 },
 { 183, 437 }, { 184, 437 }, { 185, 437 }, { 186, 437 }, { 187, 437 },
 { 188, 437 }, { 189, 437 }, { 190, 437 }, { 191, 437 }, { 192, 437 },
 { 193, 437 }, { 194, 437 }, { 195, 437 }, { 196, 437 }, { 197, 437 },
 { 198, 437 }, { 199, 437 }, { 200, 437 }, { 201, 437 }, { 202, 437 },
 { 203, 437 }, { 204, 437 }, { 205, 437 }, { 206, 437 }, { 207, 437 },
 { 208, 437 }, { 209, 437 }, { 210, 437 }, { 211, 437 }, { 212, 437 },
 { 213, 437 }, { 214, 437 }, { 215, 437 }, { 216, 437 }, { 217, 437 },
 { 218, 437 }, { 219, 437 }, { 220, 437 }, { 221, 437 }, { 222, 437 },

 { 223, 437 }, { 224, 437 }, { 225, 437 }, { 226, 437 }, { 227, 437 },
 { 228, 437 }, { 229, 437 }, { 230, 437 }, { 231, 437 }, { 232, 437 },
 { 233, 437 }, { 234, 437 }, { 235, 437 }, { 236, 437 }, { 237, 437 },
 { 238, 437 }, { 239, 437 }, { 240, 437 }, { 241, 437 }, { 242, 437 },
 { 243, 437 }, { 244, 437 }, { 245, 437 }, { 246, 437 }, { 247, 437 },
 { 248, 437 }, { 249, 437 }, { 250, 437 }, { 251, 437 }, { 252, 437 },
 { 253, 437 }, { 254, 437 }, { 255, 437 }, { 256, 437 }, {   0,  56 },
 {   0,2226 }, {   0,   2 }, {   0,2224 }, {   0,   3 }, {   0,2222 },
 {   0,   1 }, {   0,2220 }, {   0,   4 }, {   0,2218 }, {   0,  46 },
 {   0,2216 }, {   0,  56 }, {   0,2214 }, {   0,   5 }, {   0,2212 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,  45 }, {   0,2202 },
 {   0,  56 }, {   0,2200 }, {   0,  56 }, {   0,2198 }, {   0,   0 },
 {   0,   0 }, {   0,  56 }, {   0,2194 }, {   0,  56 }, {   0,2192 },
 {   0,  45 }, {   0,2190 }, {   0,  56 }, {   0,2188 }, {   0,  56 },
 {   0,2186 }, {   0,  56 }, {   0,2184 }, {   0,   0 }, {   0,  56 },
 {   0,2181 }, {   0,   0 }, {   0,  56 }, {   0,2178 }, {   0,  56 },
 {   0,2176 }, {   0,   0 }, {   0,  56 }, {   0,2173 }, {   0,  56 },
 {   0,2171 }, {   0,  56 }, {   0,2169 }, {   0,  56 }, {   0,2167 },
 {  48, 683 }, {  49, 683 }, {  50, 683 }, {  51, 683 }, {  52, 683 },

 {  53, 683 }, {  54, 683 }, {  55, 683 }, {  56, 683 }, {  57, 683 },
 {  46, 681 }, {   0,   0 }, {  48, 671 }, {  49, 671 }, {  50, 671 },
 {  51, 671 }, {  52, 671 }, {  53, 671 }, {  54, 671 }, {  55, 671 },
 {  56, 671 }, {  57, 671 }, {  46, 669 }, {   0,   0 }, {  48, 681 },
 {  49, 681 }, {  50, 681 }, {  51, 681 }, {  52, 681 }, {  53, 681 },
 {  54, 681 }, {  55, 681 }, {  56, 681 }, {  57, 681 }, {  68,  76 },
 {   0,  56 }, {   0,2130 }, {   0,  56 }, {   0,2128 }, {   0,  55 },
 {   0,2126 }, {   0,   0 }, {   0,2124 }, {  69, 681 }, {  72, 679 },
 {   0,   0 }, {   0,   0 }, {   0,2119 }, {   0,   0 }, {  69, 681 },
 {   0,   0 }, {  85,  81 }, {  86, 127 }, {  85, 679 }, {  82, 681 },

 {   0,   0 }, {  78, 681 }, {  89, 681 }, {  73, 681 }, {   0,   0 },
 {  78, 682 }, {  73, 684 }, {  69, 684 }, {   0,   0 }, {  79, 685 },
 {   0,   0 }, {  69, 722 }, {   0,   0 }, {  69, 722 }, {  79, 684 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  85, 685 }, {   0,   0 }, {   0,   0 }, {  84, 725 }, {  85, 727 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,2073 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  68, 725 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  78, 692 },
 {  68, 734 }, {   0,   0 }, {  79, 699 }, {   0,  47 }, {   0,2047 },
 {   1, 696 }, {   2, 696 }, {   3, 696 }, {   4, 696 }, {   5, 696 },
 {   6, 696 }, {   7, 696 }, {   8, 696 }, {   9, 696 }, {  10, 696 },
 {  11, 696 }, {  12, 696 }, {  13, 696 }, {  14, 696 }, {  15, 696 },
 {  16, 696 }, {  17, 696 }, {  18, 696 }, {  19, 696 }, {  20, 696 },
 {  21, 696 }, {  22, 696 }, {  23, 696 }, {  24, 696 }, {  25, 696 },
 {  26, 696 }, {  27, 696 }, {  28, 696 }, {  29, 696 }, {  30, 696 },
 {  31, 696 }, {  32, 696 }, {  33, 696 }, {  34, 696 }, {  35, 696 },

 {  36, 696 }, {  37, 696 }, {  38, 696 }, {  65, 982 }, {  40, 696 },
 {  41, 696 }, {  42, 696 }, {  43, 696 }, {  44, 696 }, {  45, 696 },
 {  46, 696 }, {  47, 696 }, {  48, 696 }, {  49, 696 }, {  50, 696 },
 {  51, 696 }, {  52, 696 }, {  53, 696 }, {  54, 696 }, {  55, 696 },
 {  56, 696 }, {  57, 696 }, {  58, 696 }, {  59, 696 }, {  60, 696 },
 {  61, 696 }, {  62, 696 }, {  63, 696 }, {  64, 696 }, {  65, 696 },
 {  66, 696 }, {  67, 696 }, {  68, 696 }, {  69, 696 }, {  70, 696 },
 {  71, 696 }, {  72, 696 }, {  73, 696 }, {  74, 696 }, {  75, 696 },
 {  76, 696 }, {  77, 696 }, {  78, 696 }, {  79, 696 }, {  80, 696 },
 {  81, 696 }, {  82, 696 }, {  83, 696 }, {  84, 696 }, {  85, 696 },

 {  86, 696 }, {  87, 696 }, {  88, 696 }, {  89, 696 }, {  90, 696 },
 {  91, 696 }, {   0,   0 }, {  93, 696 }, {  94, 696 }, {  95, 696 },
 {  96, 696 }, {  97, 696 }, {  98, 696 }, {  99, 696 }, { 100, 696 },
 { 101, 696 }, { 102, 696 }, { 103, 696 }, { 104, 696 }, { 105, 696 },
 { 106, 696 }, { 107, 696 }, { 108, 696 }, { 109, 696 }, { 110, 696 },
 { 111, 696 }, { 112, 696 }, { 113, 696 }, { 114, 696 }, { 115, 696 },
 { 116, 696 }, { 117, 696 }, { 118, 696 }, { 119, 696 }, { 120, 696 },
 { 121, 696 }, { 122, 696 }, { 123, 696 }, { 124, 696 }, { 125, 696 },
 { 126, 696 }, { 127, 696 }, { 128, 696 }, { 129, 696 }, { 130, 696 },
 { 131, 696 }, { 132, 696 }, { 133, 696 }, { 134, 696 }, { 135, 696 },

 { 136, 696 }, { 137, 696 }, { 138, 696 }, { 139, 696 }, { 140, 696 },
 { 141, 696 }, { 142, 696 }, { 143, 696 }, { 144, 696 }, { 145, 696 },
 { 146, 696 }, { 147, 696 }, { 148, 696 }, { 149, 696 }, { 150, 696 },
 { 151, 696 }, { 152, 696 }, { 153, 696 }, { 154, 696 }, { 155, 696 },
 { 156, 696 }, { 157, 696 }, { 158, 696 }, { 159, 696 }, { 160, 696 },
 { 161, 696 }, { 162, 696 }, { 163, 696 }, { 164, 696 }, { 165, 696 },
 { 166, 696 }, { 167, 696 }, { 168, 696 }, { 169, 696 }, { 170, 696 },
 { 171, 696 }, { 172, 696 }, { 173, 696 }, { 174, 696 }, { 175, 696 },
 { 176, 696 }, { 177, 696 }, { 178, 696 }, { 179, 696 }, { 180, 696 },
 { 181, 696 }, { 182, 696 }, { 183, 696 }, { 184, 696 }, { 185, 696 },

 { 186, 696 }, { 187, 696 }, { 188, 696 }, { 189, 696 }, { 190, 696 },
 { 191, 696 }, { 192, 696 }, { 193, 696 }, { 194, 696 }, { 195, 696 },
 { 196, 696 }, { 197, 696 }, { 198, 696 }, { 199, 696 }, { 200, 696 },
 { 201, 696 }, { 202, 696 }, { 203, 696 }, { 204, 696 }, { 205, 696 },
 { 206, 696 }, { 207, 696 }, { 208, 696 }, { 209, 696 }, { 210, 696 },
 { 211, 696 }, { 212, 696 }, { 213, 696 }, { 214, 696 }, { 215, 696 },
 { 216, 696 }, { 217, 696 }, { 218, 696 }, { 219, 696 }, { 220, 696 },
 { 221, 696 }, { 222, 696 }, { 223, 696 }, { 224, 696 }, { 225, 696 },
 { 226, 696 }, { 227, 696 }, { 228, 696 }, { 229, 696 }, { 230, 696 },
 { 231, 696 }, { 232, 696 }, { 233, 696 }, { 234, 696 }, { 235, 696 },

 { 236, 696 }, { 237, 696 }, { 238, 696 }, { 239, 696 }, { 240, 696 },
 { 241, 696 }, { 242, 696 }, { 243, 696 }, { 244, 696 }, { 245, 696 },
 { 246, 696 }, { 247, 696 }, { 248, 696 }, { 249, 696 }, { 250, 696 },
 { 251, 696 }, { 252, 696 }, { 253, 696 }, { 254, 696 }, { 255, 696 },
 { 256, 696 }, {   0,  57 }, {   0,1789 }, {   1, 365 }, {   2, 365 },
 {   3, 365 }, {   4, 365 }, {   5, 365 }, {   6, 365 }, {   7, 365 },
 {   8, 365 }, {   9, 365 }, {  10, 365 }, {  11, 365 }, {  12, 365 },
 {  13, 365 }, {  14, 365 }, {  15, 365 }, {  16, 365 }, {  17, 365 },
 {  18, 365 }, {  19, 365 }, {  20, 365 }, {  21, 365 }, {  22, 365 },
 {  23, 365 }, {  24, 365 }, {  25, 365 }, {  26, 365 }, {  27, 365 },

 {  28, 365 }, {  29, 365 }, {  30, 365 }, {  31, 365 }, {  32, 365 },
 {  33, 365 }, {  34, 367 }, {  35, 365 }, {  36, 365 }, {  37, 365 },
 {  38, 365 }, {  39, 374 }, {  40, 365 }, {  41, 365 }, {  42, 365 },
 {  43, 365 }, {  44, 365 }, {  45, 365 }, {  46, 365 }, {  47, 365 },
 {  48, 365 }, {  49, 365 }, {  50, 365 }, {  51, 365 }, {  52, 365 },
 {  53, 365 }, {  54, 365 }, {  55, 365 }, {  56, 365 }, {  57, 365 },
 {  58, 365 }, {  59, 365 }, {  60, 365 }, {  61, 365 }, {  62, 365 },
 {  63, 365 }, {  64, 365 }, {  65, 365 }, {  66, 365 }, {  67, 365 },
 {  68, 365 }, {  69, 365 }, {  70, 365 }, {  71, 365 }, {  72, 365 },
 {  73, 365 }, {  74, 365 }, {  75, 365 }, {  76, 365 }, {  77, 365 },

 {  78, 365 }, {  79, 365 }, {  80, 365 }, {  81, 365 }, {  82, 365 },
 {  83, 365 }, {  84, 365 }, {  85, 365 }, {  86, 365 }, {  87, 365 },
 {  88, 365 }, {  89, 365 }, {  90, 365 }, {  91, 365 }, {  92, 380 },
 {  93, 365 }, {  94, 365 }, {  95, 365 }, {  96, 365 }, {  97, 365 },
 {  98, 365 }, {  99, 365 }, { 100, 365 }, { 101, 365 }, { 102, 365 },
 { 103, 365 }, { 104, 365 }, { 105, 365 }, { 106, 365 }, { 107, 365 },
 { 108, 365 }, { 109, 365 }, { 110, 384 }, { 111, 365 }, { 112, 365 },
 { 113, 365 }, { 114, 386 }, { 115, 365 }, { 116, 388 }, { 117, 365 },
 { 118, 365 }, { 119, 365 }, { 120, 365 }, { 121, 365 }, { 122, 365 },
 { 123, 365 }, { 124, 365 }, { 125, 365 }, { 126, 365 }, { 127, 365 },

 { 128, 365 }, { 129, 365 }, { 130, 365 }, { 131, 365 }, { 132, 365 },
 { 133, 365 }, { 134, 365 }, { 135, 365 }, { 136, 365 }, { 137, 365 },
 { 138, 365 }, { 139, 365 }, { 140, 365 }, { 141, 365 }, { 142, 365 },
 { 143, 365 }, { 144, 365 }, { 145, 365 }, { 146, 365 }, { 147, 365 },
 { 148, 365 }, { 149, 365 }, { 150, 365 }, { 151, 365 }, { 152, 365 },
 { 153, 365 }, { 154, 365 }, { 155, 365 }, { 156, 365 }, { 157, 365 },
 { 158, 365 }, { 159, 365 }, { 160, 365 }, { 161, 365 }, { 162, 365 },
 { 163, 365 }, { 164, 365 }, { 165, 365 }, { 166, 365 }, { 167, 365 },
 { 168, 365 }, { 169, 365 }, { 170, 365 }, { 171, 365 }, { 172, 365 },
 { 173, 365 }, { 174, 365 }, { 175, 365 }, { 176, 365 }, { 177, 365 },

 { 178, 365 }, { 179, 365 }, { 180, 365 }, { 181, 365 }, { 182, 365 },
 { 183, 365 }, { 184, 365 }, { 185, 365 }, { 186, 365 }, { 187, 365 },
 { 188, 365 }, { 189, 365 }, { 190, 365 }, { 191, 365 }, { 192, 365 },
 { 193, 365 }, { 194, 365 }, { 195, 365 }, { 196, 365 }, { 197, 365 },
 { 198, 365 }, { 199, 365 }, { 200, 365 }, { 201, 365 }, { 202, 365 },
 { 203, 365 }, { 204, 365 }, { 205, 365 }, { 206, 365 }, { 207, 365 },
 { 208, 365 }, { 209, 365 }, { 210, 365 }, { 211, 365 }, { 212, 365 },
 { 213, 365 }, { 214, 365 }, { 215, 365 }, { 216, 365 }, { 217, 365 },
 { 218, 365 }, { 219, 365 }, { 220, 365 }, { 221, 365 }, { 222, 365 },
 { 223, 365 }, { 224, 365 }, { 225, 365 }, { 226, 365 }, { 227, 365 },

 { 228, 365 }, { 229, 365 }, { 230, 365 }, { 231, 365 }, { 232, 365 },
 { 233, 365 }, { 234, 365 }, { 235, 365 }, { 236, 365 }, { 237, 365 },
 { 238, 365 }, { 239, 365 }, { 240, 365 }, { 241, 365 }, { 242, 365 },
 { 243, 365 }, { 244, 365 }, { 245, 365 }, { 246, 365 }, { 247, 365 },
 { 248, 365 }, { 249, 365 }, { 250, 365 }, { 251, 365 }, { 252, 365 },
 { 253, 365 }, { 254, 365 }, { 255, 365 }, { 256, 365 }, {   0,   0 },
 {   0,1531 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,1521 }, {   0,   0 }, {   0,1519 }, {   0,   0 }, {   0,1517 },
 {   0,   0 }, {   0,1515 }, {   0,   0 }, {   0,1513 }, {   0,   0 },

 {   0,1511 }, {   0,  45 }, {   0,1509 }, {   0,   0 }, {   0,1507 },
 {   0,   0 }, {   0,1505 }, {   0,   0 }, {   0,   0 }, {   0,1502 },
 {   0,   0 }, {   0,1500 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,1496 }, {   0,   0 }, {   0,1494 }, {   0,   0 }, {   0,1492 },
 {   0,   0 }, {   0,   0 }, {   0,1489 }, {   0,   0 }, {   0,   0 },
 {   0,1486 }, {  46,  10 }, {   0,   0 }, {  48,   0 }, {  49,   0 },
 {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 },
 {  55,   0 }, {  56,   0 }, {  57,   0 }, {  48, 428 }, {  49, 428 },
 {  50, 428 }, {  51, 428 }, {  52, 428 }, {  53, 428 }, {  54, 428 },
 {  55, 428 }, {  56, 428 }, {  57, 428 }, {  46, -12 }, {   0,   0 },

 {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 },
 {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 },
 {   0,   0 }, {  65, 431 }, {  70, 430 }, {   0,   0 }, {   0,1447 },
 {   0,   0 }, {   0,1445 }, {  69, 432 }, {   0,   0 }, {   0,1442 },
 {   0,   0 }, {   0,1440 }, {   0,   0 }, {   0,1438 }, {   0,   0 },
 {  71, 430 }, {   0,   0 }, {   0,   0 }, {  84, 431 }, {  70, 429 },
 {  65, 429 }, {   0,   0 }, {   0,1429 }, {  83, 432 }, {   0,   0 },
 {  68, 429 }, {   0,  54 }, {   0,1424 }, {   0,  52 }, {   0,1422 },
 {  84, 430 }, {   0,   0 }, {  83, 431 }, {   0,   0 }, {  83, 431 },
 {   0,  53 }, {   0,1415 }, {  78, 431 }, {  73, 431 }, {   0,   0 },

 {  83, 431 }, {   0,  51 }, {   0,1409 }, {  84, 433 }, {  82, 432 },
 {   0,  48 }, {   0,1405 }, {   0,  49 }, {   0,1403 }, {   0,  50 },
 {   0,1401 }, {   0,   7 }, {   0,1399 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,1385 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  66, 406 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  77, 394 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  83, 396 }, {   0,   0 }, {   0,   0 },

 {  84, 396 }, {  82, 395 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  73, 399 }, {  83, 406 }, {   0,   0 }, {  76, 401 }, {   0,  47 },
 {   0,1351 }, {   1,   0 }, {   2,   0 }, {   3,   0 }, {   4,   0 },
 {   5,   0 }, {   6,   0 }, {   7,   0 }, {   8,   0 }, {   9,   0 },
 {  10,   0 }, {  11,   0 }, {  12,   0 }, {  13,   0 }, {  14,   0 },
 {  15,   0 }, {  16,   0 }, {  17,   0 }, {  18,   0 }, {  19,   0 },
 {  20,   0 }, {  21,   0 }, {  22,   0 }, {  23,   0 }, {  24,   0 },
 {  25,   0 }, {  26,   0 }, {  27,   0 }, {  28,   0 }, {  29,   0 },
 {  30,   0 }, {  31,   0 }, {  32,   0 }, {  33,   0 }, {  34,   0 },
 {  35,   0 }, {  36,   0 }, {  37,   0 }, {  38,   0 }, {  73, 360 },

 {  40,   0 }, {  41,   0 }, {  42,   0 }, {  43,   0 }, {  44,   0 },
 {  45,   0 }, {  46,   0 }, {  47,   0 }, {  48,   0 }, {  49,   0 },
 {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 },
 {  55,   0 }, {  56,   0 }, {  57,   0 }, {  58,   0 }, {  59,   0 },
 {  60,   0 }, {  61,   0 }, {  62,   0 }, {  63,   0 }, {  64,   0 },
 {  65,   0 }, {  66,   0 }, {  67,   0 }, {  68,   0 }, {  69,   0 },
 {  70,   0 }, {  71,   0 }, {  72,   0 }, {  73,   0 }, {  74,   0 },
 {  75,   0 }, {  76,   0 }, {  77,   0 }, {  78,   0 }, {  79,   0 },
 {  80,   0 }, {  81,   0 }, {  82,   0 }, {  83,   0 }, {  84,   0 },
 {  85,   0 }, {  86,   0 }, {  87,   0 }, {  88,   0 }, {  89,   0 },

 {  90,   0 }, {  91,   0 }, {   0,   0 }, {  93,   0 }, {  94,   0 },
 {  95,   0 }, {  96,   0 }, {  97,   0 }, {  98,   0 }, {  99,   0 },
 { 100,   0 }, { 101,   0 }, { 102,   0 }, { 103,   0 }, { 104,   0 },
 { 105,   0 }, { 106,   0 }, { 107,   0 }, { 108,   0 }, { 109,   0 },
 { 110,   0 }, { 111,   0 }, { 112,   0 }, { 113,   0 }, { 114,   0 },
 { 115,   0 }, { 116,   0 }, { 117,   0 }, { 118,   0 }, { 119,   0 },
 { 120,   0 }, { 121,   0 }, { 122,   0 }, { 123,   0 }, { 124,   0 },
 { 125,   0 }, { 126,   0 }, { 127,   0 }, { 128,   0 }, { 129,   0 },
 { 130,   0 }, { 131,   0 }, { 132,   0 }, { 133,   0 }, { 134,   0 },
 { 135,   0 }, { 136,   0 }, { 137,   0 }, { 138,   0 }, { 139,   0 },

 { 140,   0 }, { 141,   0 }, { 142,   0 }, { 143,   0 }, { 144,   0 },
 { 145,   0 }, { 146,   0 }, { 147,   0 }, { 148,   0 }, { 149,   0 },
 { 150,   0 }, { 151,   0 }, { 152,   0 }, { 153,   0 }, { 154,   0 },
 { 155,   0 }, { 156,   0 }, { 157,   0 }, { 158,   0 }, { 159,   0 },
 { 160,   0 }, { 161,   0 }, { 162,   0 }, { 163,   0 }, { 164,   0 },
 { 165,   0 }, { 166,   0 }, { 167,   0 }, { 168,   0 }, { 169,   0 },
 { 170,   0 }, { 171,   0 }, { 172,   0 }, { 173,   0 }, { 174,   0 },
 { 175,   0 }, { 176,   0 }, { 177,   0 }, { 178,   0 }, { 179,   0 },
 { 180,   0 }, { 181,   0 }, { 182,   0 }, { 183,   0 }, { 184,   0 },
 { 185,   0 }, { 186,   0 }, { 187,   0 }, { 188,   0 }, { 189,   0 },

 { 190,   0 }, { 191,   0 }, { 192,   0 }, { 193,   0 }, { 194,   0 },
 { 195,   0 }, { 196,   0 }, { 197,   0 }, { 198,   0 }, { 199,   0 },
 { 200,   0 }, { 201,   0 }, { 202,   0 }, { 203,   0 }, { 204,   0 },
 { 205,   0 }, { 206,   0 }, { 207,   0 }, { 208,   0 }, { 209,   0 },
 { 210,   0 }, { 211,   0 }, { 212,   0 }, { 213,   0 }, { 214,   0 },
 { 215,   0 }, { 216,   0 }, { 217,   0 }, { 218,   0 }, { 219,   0 },
 { 220,   0 }, { 221,   0 }, { 222,   0 }, { 223,   0 }, { 224,   0 },
 { 225,   0 }, { 226,   0 }, { 227,   0 }, { 228,   0 }, { 229,   0 },
 { 230,   0 }, { 231,   0 }, { 232,   0 }, { 233,   0 }, { 234,   0 },
 { 235,   0 }, { 236,   0 }, { 237,   0 }, { 238,   0 }, { 239,   0 },

 { 240,   0 }, { 241,   0 }, { 242,   0 }, { 243,   0 }, { 244,   0 },
 { 245,   0 }, { 246,   0 }, { 247,   0 }, { 248,   0 }, { 249,   0 },
 { 250,   0 }, { 251,   0 }, { 252,   0 }, { 253,   0 }, { 254,   0 },
 { 255,   0 }, { 256,   0 }, {   0,   6 }, {   0,1093 }, {   0,   0 },
 {   0,1091 }, {   0,   0 }, {   0,1089 }, {   0,   0 }, {   0,   0 },
 {   0,1086 }, {   0,   0 }, {   0,1084 }, {   0,   0 }, {   0,   0 },
 {   0,1081 }, {   0,   0 }, {   0,1079 }, {   0,   0 }, {   0,1077 },
 {   0,   8 }, {   0,1075 }, {   0,   0 }, {   0,1073 }, {   0,   0 },
 {   0,1071 }, {   0,   0 }, {   0,1069 }, {   0,   0 }, {   0,1067 },
 {   0,   0 }, {   0,1065 }, {   0,   0 }, {   0,1063 }, {   0,   0 },

 {   0,1061 }, {   0,   0 }, {   0,1059 }, {   0,   0 }, {   0,1057 },
 {   0,   0 }, {   0,1055 }, {   0,   0 }, {   0,1053 }, {   0,   0 },
 {   0,1051 }, {   0,  15 }, {   0,1049 }, {   0,   0 }, {   0,1047 },
 {   0,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 },
 {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 },
 {  57,   0 }, {   0,   0 }, {   0,1034 }, {   0,   0 }, {   0,1032 },
 {   0,   0 }, {   0,1030 }, {   0,   0 }, {   0,1028 }, {   0,   0 },
 {   0,   0 }, {   0,1025 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,1021 }, {   0,   0 }, {  70,  76 }, {  73,  70 }, {  69,  75 },
 {  65,  74 }, {   0,   0 }, {   0,   0 }, {   0,1013 }, {   0,   0 },

 {   0,1011 }, {   0,   0 }, {   0,1009 }, {   0,   0 }, {   0,1007 },
 {  78,  75 }, {   0,   0 }, {  73,  77 }, {   0,   0 }, {   0,1002 },
 {   0,   0 }, {   0,1000 }, {  68,  87 }, {   0,  23 }, {   0, 997 },
 {  67,  91 }, {  84,  77 }, {  79,  76 }, {   0,   0 }, {  73,  89 },
 {   0,   0 }, {  67,  93 }, {   0,   0 }, {   0, 988 }, {  84,  83 },
 {  73,  92 }, {  84,  86 }, {   0,  11 }, {   0, 983 }, {  69,  95 },
 {   0,  12 }, {   0, 980 }, {   0,   0 }, {  69,  93 }, {   0,   0 },
 {   0, 976 }, {   0,   0 }, {  79,  94 }, {   0,   0 }, {   0, 972 },
 {  84,  94 }, {   0,   0 }, {   0, 969 }, {   0,   0 }, {   0, 967 },
 {  95,  92 }, {   0,   0 }, {   0, 964 }, {  67,  90 }, {   0,  44 },

 {   0, 961 }, {   0,   0 }, {   0, 959 }, {   0,   0 }, {   0,   0 },
 {   0, 956 }, {   0,   0 }, {   0, 954 }, {   0,   0 }, {   0, 952 },
 {  83,  82 }, {   0,   0 }, {   0, 949 }, {   0,   0 }, {  85,  83 },
 {  79,  89 }, {  76,  87 }, {  69,  81 }, {  85,  90 }, {   0,   0 },
 {   0,   0 }, {   0, 940 }, {   0,   0 }, {   0, 938 }, {   0,   0 },
 {   0, 936 }, {   0,   0 }, {   0, 934 }, {   0,   0 }, {   0, 932 },
 {  78,  83 }, {   0,  40 }, {   0, 929 }, {  83,  82 }, {   0,   0 },
 {   0, 926 }, {   0,   0 }, {   0, 924 }, {  84,  83 }, {  78,  84 },
 {   0,   0 }, {  82,  84 }, {   0,   0 }, {   0, 918 }, {   0,   0 },
 {   0, 916 }, {   0,   0 }, {   0, 914 }, {   0,   0 }, {   0,   0 },

 {   0, 911 }, {   0,   0 }, {   0, 909 }, {   0,   0 }, {   0, 907 },
 {  82,  74 }, {   0,   0 }, {   0, 904 }, {  69,  63 }, {   0,   0 },
 {   0, 901 }, {   0,   0 }, {   0, 899 }, {   0,   0 }, {  70,  63 },
 {   0,   0 }, {  69,  63 }, {   0,  42 }, {   0, 893 }, {  77,  62 },
 {   0,   0 }, {   0, 890 }, {  65,  64 }, {   0,   0 }, {   0, 887 },
 {   0,   0 }, {  67,  65 }, {   0,   0 }, {  66,  70 }, {   0,   0 },
 {  95,  65 }, {   0,   0 }, {   0, 879 }, {   0,   0 }, {   0, 877 },
 {   0,   0 }, {   0, 875 }, {   0,   0 }, {  86,  60 }, {  84,  63 },
 {  69,  63 }, {   0,   0 }, {  65,  69 }, {   0,   0 }, {   0, 867 },
 {   0,   0 }, {   0, 865 }, {   0,   0 }, {   0, 863 }, {   0,   0 },

 {  77,  63 }, {   0,   0 }, {   0, 859 }, {   0,   0 }, {  69,  67 },
 {   0,   0 }, {  69,  71 }, {   0,   9 }, {   0, 853 }, {   0,   0 },
 {   0, 851 }, {  82,  69 }, {   0,  28 }, {   0, 848 }, {  69,  68 },
 {   0,   0 }, {   0,   0 }, {   0, 844 }, {   0,   0 }, {   0, 842 },
 {  95,  69 }, {   0,   0 }, {  79,  67 }, {  73,  69 }, {   0,   0 },
 {   0, 836 }, {   0,   0 }, {   0, 834 }, {  76,  73 }, {   0,   0 },
 {  73,  78 }, {  69,  78 }, {  85,  70 }, {  79,  73 }, {   0,   0 },
 {   0, 826 }, {   0,   0 }, {   0, 824 }, {  78,  77 }, {   0,  14 },
 {   0, 821 }, {   0,   0 }, {   0, 819 }, {   0,   0 }, {   0, 817 },
 {   0,   0 }, {   0, 815 }, {   0,   0 }, {  77,  71 }, {   0,   0 },

 {   0,   0 }, {   0, 810 }, {   0,  39 }, {   0, 808 }, {   0,   0 },
 {  69,  67 }, {  82,  70 }, {   0,   0 }, {   0, 803 }, {   0,   0 },
 {   0, 801 }, {   0,   0 }, {  66,  64 }, {   0,   0 }, {   0, 797 },
 {  83,  64 }, {   0,  18 }, {   0, 794 }, {   0,  10 }, {   0, 792 },
 {   0,   0 }, {   0, 790 }, {   0,   0 }, {  79,  64 }, {   0,   0 },
 {   0, 786 }, {   0,   0 }, {   0, 784 }, {  76,  65 }, {  95,  67 },
 {   0,   0 }, {   0, 780 }, {   0,   0 }, {   0, 778 }, {   0,   0 },
 {   0,   0 }, {   0, 775 }, {   0,   0 }, {   0,   0 }, {   0, 772 },
 {   0,   0 }, {   0, 770 }, {   0,   0 }, {  95,  66 }, {  77,  54 },
 {  68,  54 }, {   0,   0 }, {  78,  56 }, {   0,   0 }, {  89,  59 },

 {   0,   0 }, {  76,  52 }, {  67,  48 }, {   0,   0 }, {   0, 757 },
 {   0,   0 }, {   0, 755 }, {   0,   0 }, {   0, 753 }, {   0,   0 },
 {   0, 751 }, {   0,   0 }, {   0,   0 }, {  67,  58 }, {   0,   0 },
 {   0, 746 }, {   0,   0 }, {  73,  47 }, {  67,  55 }, {   0,  22 },
 {   0, 741 }, {  84,  49 }, {   0,   0 }, {   0, 738 }, {   0,   0 },
 {   0, 736 }, {   0,   0 }, {   0, 734 }, {   0,   0 }, {   0,   0 },
 {   0, 731 }, {   0,   0 }, {   0, 729 }, {   0,   0 }, {  70,  51 },
 {   0,   0 }, {  76,  50 }, {  95,  47 }, {   0,   0 }, {   0,   0 },
 {  69,  52 }, {   0,   0 }, {  65,  50 }, {  85,  50 }, {   0,   0 },
 {   0,   0 }, {  65,  49 }, {   0,   0 }, {  65,  49 }, {   0,   0 },

 {  83,  53 }, {  65,  67 }, {   0,   0 }, {   0, 708 }, {   0,   0 },
 {  80,  50 }, {  67,  70 }, {  66,  70 }, {   0,   0 }, {   0, 702 },
 {   0,   0 }, {   0, 700 }, {   0,   0 }, {   0, 698 }, {   0,   0 },
 {   0, 696 }, {   0,   0 }, {   0, 694 }, {   0,   0 }, {   0, 692 },
 {   0,   0 }, {   0,   0 }, {   0, 689 }, {   0,   0 }, {   0, 687 },
 {   0,   0 }, {   0, 685 }, {   0,   0 }, {   0,   0 }, {  69,  59 },
 {   0,   0 }, {   0,   0 }, {   0, 679 }, {   0,  13 }, {   0, 677 },
 {  79,  59 }, {  82,  59 }, {   0,   0 }, {  73,  57 }, {   0,   0 },
 {   0, 671 }, {   0,   0 }, {  84,  59 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0, 665 }, {   0,   0 }, {   0, 663 }, {   0,  16 },

 {   0, 661 }, {  78,  51 }, {   0,   0 }, {   0, 658 }, {   0,   0 },
 {  78,  55 }, {  76,  54 }, {   0,   0 }, {   0, 653 }, {   0,   0 },
 {  85,  51 }, {   0,   0 }, {   0, 649 }, {   0,   0 }, {   0,   0 },
 {   0, 646 }, {  84,  58 }, {   0,   0 }, {   0, 643 }, {   0,  27 },
 {   0, 641 }, {   0,   0 }, {   0, 639 }, {   0,   0 }, {  71,  43 },
 {   0,   0 }, {   0, 635 }, {   0,   0 }, {   0, 633 }, {   0,   0 },
 {  69,  39 }, {   0,  41 }, {   0, 629 }, {   0,   0 }, {   0, 627 },
 {   0,   0 }, {  73,  40 }, {   0,   0 }, {  79,  39 }, {   0,   0 },
 {   0, 621 }, {   0,   0 }, {   0, 619 }, {   0,   0 }, {   0, 617 },
 {   0,   0 }, {   0, 615 }, {  80,  45 }, {  76,  46 }, {   0,   0 },

 {  85,  43 }, {  69,  44 }, {   0,   0 }, {   0,   0 }, {   0, 607 },
 {   0,  24 }, {   0, 605 }, {   0,   0 }, {  84,  46 }, {   0,   0 },
 {  84,  46 }, {   0,   0 }, {   0, 599 }, {  73,  38 }, {  95,  46 },
 {  69,  36 }, {   0,   0 }, {   0, 594 }, {   0,   0 }, {  66,  37 },
 {   0,   0 }, {   0, 590 }, {   0,   0 }, {   0, 588 }, {   0,  17 },
 {   0, 586 }, {   0,  26 }, {   0, 584 }, {   0,   0 }, {   0, 582 },
 {  65,  31 }, {   0,   0 }, {   0, 579 }, {  85,  36 }, {  69,  39 },
 {   0,   0 }, {  78,  34 }, {   0,   0 }, {   0, 573 }, {   0,   0 },
 {   0, 571 }, {   0,   0 }, {   0, 569 }, {   0,   0 }, {  76,  38 },
 {   0,   0 }, {   0, 565 }, {  85,  32 }, {   0,   0 }, {   0, 562 },

 {   0,  19 }, {   0, 560 }, {   0,  25 }, {   0, 558 }, {   0,   0 },
 {  79,  41 }, {   0,   0 }, {  79,  43 }, {   0,   0 }, {  69,  35 },
 {   0,   0 }, {   0, 550 }, {  78,  39 }, {   0,   0 }, {   0, 547 },
 {   0,   0 }, {   0, 545 }, {  95,  40 }, {   0,   0 }, {   0, 542 },
 {   0,   0 }, {   0, 540 }, {   0,   0 }, {   0,   0 }, {   0, 537 },
 {   0,   0 }, {  84,  35 }, {   0,   0 }, {  84,  35 }, {  67,  28 },
 {   0,   0 }, {  85,  36 }, {  78,  34 }, {   0,  43 }, {   0, 527 },
 {   0,   0 }, {   0, 525 }, {   0,   0 }, {   0, 523 }, {   0,   0 },
 {   0, 521 }, {   0,   0 }, {  80,  30 }, {   0,   0 }, {   0, 517 },
 {   0,   0 }, {  84,  34 }, {   0,   0 }, {   0, 513 }, {  78,  30 },

 {  68,  32 }, {   0,   0 }, {  85,  32 }, {   0,   0 }, {   0, 507 },
 {   0,   0 }, {   0, 505 }, {  84,  30 }, {   0,   0 }, {  71,  28 },
 {   0,   0 }, {   0,   0 }, {  72,  29 }, {   0,   0 }, {   0, 497 },
 {   0,   0 }, {   0, 495 }, {   0,   0 }, {   0, 493 }, {   0,   0 },
 {   0, 491 }, {  79,  29 }, {   0,   0 }, {   0, 488 }, {  95,  32 },
 {   0,   0 }, {   0, 485 }, {   0,   0 }, {  67,  25 }, {  68,  27 },
 {   0,  36 }, {   0, 480 }, {  83,  35 }, {   0,   0 }, {  65,  29 },
 {  89,  28 }, {   0,   0 }, {  73,  26 }, {   0,   0 }, {  73,  28 },
 {   0,  38 }, {   0, 470 }, {   0,   0 }, {   0, 468 }, {   0,   0 },
 {   0, 466 }, {   0,   0 }, {   0, 464 }, {   0,   0 }, {   0, 462 },

 {   0,   0 }, {   0, 460 }, {   0,   0 }, {  82,  33 }, {  80,  32 },
 {   0,   0 }, {   0, 455 }, {  69,  28 }, {  72,  28 }, {   0,   0 },
 {   0, 451 }, {   0,   0 }, {   0, 449 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0, 445 }, {   0,   0 }, {   0, 443 }, {  79,  30 },
 {  82,  30 }, {   0,   0 }, {  78,  29 }, {   0,  20 }, {   0, 437 },
 {  69,  35 }, {  78,  28 }, {   0,   0 }, {   0, 433 }, {  65,  29 },
 {   0,   0 }, {   0, 430 }, {   0,   0 }, {   0, 428 }, {   0,   0 },
 {   0, 426 }, {   0,   0 }, {   0, 424 }, {  84,  27 }, {   0,  37 },
 {   0, 421 }, {  73,  29 }, {  69,  28 }, {   0,   0 }, {   0, 417 },
 {   0,  29 }, {   0, 415 }, {   0,  32 }, {   0, 413 }, {   0,   0 },

 {   0, 411 }, {   0,   0 }, {  86,  29 }, {   0,   0 }, {  78,  30 },
 {   0,  34 }, {   0, 405 }, {   0,  30 }, {   0, 403 }, {   0,   0 },
 {   0, 401 }, {   0,   0 }, {   0, 399 }, {   0,   0 }, {   0, 397 },
 {  95,  29 }, {   0,   0 }, {   0, 394 }, {  73,  17 }, {   0,   0 },
 {   0, 391 }, {  78,  17 }, {   0,   0 }, {   0, 388 }, {   0,   0 },
 {  69,  22 }, {   0,   0 }, {   0, 384 }, {  79,  19 }, {  67,  21 },
 {   0,   0 }, {   0, 380 }, {   0,   0 }, {  86,  19 }, {  83,  23 },
 {  69,  19 }, {   0,   0 }, {   0, 374 }, {  78,  21 }, {   0,   0 },
 {   0, 371 }, {   0,   0 }, {   0, 369 }, {   0,   0 }, {   0, 367 },
 {   0,   0 }, {   0,   0 }, {   0, 364 }, {   0,   0 }, {   0, 362 },

 {  69,  13 }, {   0,   0 }, {  69,  13 }, {  85,  19 }, {  76,  12 },
 {   0,   0 }, {   0, 355 }, {   0,   0 }, {   0, 353 }, {   0,   0 },
 {   0,   0 }, {   0, 350 }, {   0,   0 }, {   0, 348 }, {   0,   0 },
 {   0, 346 }, {   0,   0 }, {  82,  13 }, {   0,   0 }, {   0, 342 },
 {  76,  12 }, {  84,  13 }, {   0,   0 }, {   0, 338 }, {   0,   0 },
 {   0, 336 }, {   0,   0 }, {   0, 334 }, {   0,   0 }, {  83,  12 },
 {  80,  14 }, {   0,   0 }, {   0, 329 }, {   0,   0 }, {   0, 327 },
 {  65,  17 }, {   0,   0 }, {   0, 324 }, {  65,  17 }, {   0,   0 },
 {  80,  10 }, {  95,  14 }, {  80,  11 }, {  95,  14 }, {   0,   0 },
 {   0, 316 }, {  65,  13 }, {  80,  14 }, {   0,   0 }, {  85,  13 },

 {   0,   0 }, {  95,  11 }, {   0,   0 }, {   0, 308 }, {   0,   0 },
 {   0, 306 }, {   0,   0 }, {   0, 304 }, {   0,   0 }, {   0, 302 },
 {   0,   0 }, {  84,  15 }, {  65,  14 }, {   0,   0 }, {  65,  14 },
 {   0,   0 }, {   0, 295 }, {   0,   0 }, {   0, 293 }, {  82,  10 },
 {   0,   0 }, {   0, 290 }, {  82,   9 }, {  65,  11 }, {  68,   9 },
 {   0,   0 }, {  82,  14 }, {   0,   0 }, {   0, 283 }, {   0,   0 },
 {   0, 281 }, {   0,  31 }, {   0, 279 }, {   0,  33 }, {   0, 277 },
 {   0,   0 }, {   0, 275 }, {  95,  14 }, {  77,  12 }, {   0,   0 },
 {  77,  12 }, {   0,   0 }, {  69,  11 }, {   0,   0 }, {  69,  12 },
 {   0,   0 }, {  77,  13 }, {  82,  12 }, {   0,  35 }, {   0, 262 },

 {  73,  18 }, {  69,  21 }, {   0,  21 }, {   0, 258 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  84,  21 }, {   0,   0 },
 {   0,   0 }, {  84,  20 }, {   0,   0 }, {   0,   0 }, {  69,  13 },
 {   0,   0 }, {  69,  14 }, {   0,   0 }, {  69,  19 }, {   0,   0 },
 {   0,   0 }, {  86,  14 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  69,  14 }, {   0,   0 }, {  84,  13 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {  82,  14 }, {   0,   0 }, {   0,   0 }, {  82,  13 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  82,   8 }, {   0,   0 }, {  82,  19 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  83,  17 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 { 257,  58 }, {   1,   0 },    };

static yyconst struct yy_trans_info *yy_start_state_list[5] =
    {
    &yy_transition[1],
    &yy_transition[3],
    &yy_transition[261],
    &yy_transition[519],
    &yy_transition[777],

    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lscp.l"
/***************************************************************************
 *                                                                         *
 *   LinuxSampler - modular, streaming capable sampler                     *
 *                                                                         *
 *   Copyright (C) 2003, 2004 by Benno Senoner and Christian Schoenebeck   *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the Free Software           *
 *   Foundation, Inc., 59 Temple Place, Suite 330, Boston,                 *
 *   MA  02111-1307  USA                                                   *
 ***************************************************************************/
#line 24 "lscp.l"

#include "lscpparser.h"
#include "lscpsymbols.h"

/// handle for a client connection (FIXME: doesn't work for more than one network connections of course)
int hSession;


#line 1119 "lex.yy.c"

#define INITIAL 0
#define INSTRING 1

/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (yyscan_t yyscanner );

int yyget_debug (yyscan_t yyscanner );

void yyset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra (yyscan_t yyscanner );

void yyset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *yyget_in (yyscan_t yyscanner );

void yyset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *yyget_out (yyscan_t yyscanner );

void yyset_out  (FILE * out_str ,yyscan_t yyscanner );

int yyget_leng (yyscan_t yyscanner );

char *yyget_text (yyscan_t yyscanner );

int yyget_lineno (yyscan_t yyscanner );

void yyset_lineno (int line_number ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (yyscan_t yyscanner );
#else
extern int yywrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	errno=0; \
	while ( (result = read( fileno(yyin), (char *) buf, max_size )) < 0 ) \
	{ \
		if( errno != EINTR) \
		{ \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
			break; \
		} \
		errno=0; \
		clearerr(yyin); \
	}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (yyscan_t yyscanner);

#define YY_DECL int yylex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 39 "lscp.l"


#line 1320 "lex.yy.c"

	if ( yyg->yy_init )
		{
		yyg->yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		yy_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start_state_list[yyg->yy_start];
yy_match:
		{
		register yyconst struct yy_trans_info *yy_trans_info;

		register YY_CHAR yy_c;

		for ( yy_c = YY_SC_TO_UI(*yy_cp);
		      (yy_trans_info = &yy_current_state[(unsigned int) yy_c])->
		yy_verify == yy_c;
		      yy_c = YY_SC_TO_UI(*++yy_cp) )
			{
			yy_current_state += yy_trans_info->yy_nxt;

			if ( yy_current_state[-1].yy_nxt )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			}
		}

yy_find_action:
		yy_act = yy_current_state[-1].yy_nxt;

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos + 1;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 41 "lscp.l"
{ return SP; }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 42 "lscp.l"
{ return LF; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 43 "lscp.l"
{ return CR; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 44 "lscp.l"
{ return HASH; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 45 "lscp.l"
{ return EQ; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 46 "lscp.l"
{ yylval->Dotnum = atof(yytext); return DOTNUM; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 47 "lscp.l"
{ return ADD; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 48 "lscp.l"
{ return GET; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 49 "lscp.l"
{ return CREATE; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 50 "lscp.l"
{ return DESTROY; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 51 "lscp.l"
{ return LIST; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 52 "lscp.l"
{ return LOAD; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 53 "lscp.l"
{ return NON_MODAL; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 54 "lscp.l"
{ return REMOVE; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 55 "lscp.l"
{ return SET; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 56 "lscp.l"
{ return SUBSCRIBE; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 57 "lscp.l"
{ return UNSUBSCRIBE; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 58 "lscp.l"
{ return CHANNEL; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 59 "lscp.l"
{ return NOTIFICATION; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 60 "lscp.l"
{ return AVAILABLE_ENGINES; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 61 "lscp.l"
{ return AVAILABLE_AUDIO_OUTPUT_DRIVERS; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 62 "lscp.l"
{ return CHANNELS; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 63 "lscp.l"
{ return INFO; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 64 "lscp.l"
{ return BUFFER_FILL; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 65 "lscp.l"
{ return STREAM_COUNT; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 66 "lscp.l"
{ return VOICE_COUNT; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 67 "lscp.l"
{ return INSTRUMENT; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 68 "lscp.l"
{ return ENGINE; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 69 "lscp.l"
{ return AUDIO_OUTPUT_DEVICE; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 70 "lscp.l"
{ return AUDIO_OUTPUT_DEVICES; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 71 "lscp.l"
{ return AUDIO_OUTPUT_DEVICE_PARAMETER; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 72 "lscp.l"
{ return AUDIO_OUTPUT_DRIVER; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 73 "lscp.l"
{ return AUDIO_OUTPUT_DRIVER_PARAMETER; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 74 "lscp.l"
{ return AUDIO_OUTPUT_CHANNEL; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 75 "lscp.l"
{ return AUDIO_OUTPUT_CHANNEL_PARAMETER; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 76 "lscp.l"
{ return MIDI_INPUT_PORT; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 77 "lscp.l"
{ return MIDI_INPUT_CHANNEL; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 78 "lscp.l"
{ return MIDI_INPUT_TYPE; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 79 "lscp.l"
{ return VOLUME; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 80 "lscp.l"
{ return BYTES; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 81 "lscp.l"
{ return PERCENTAGE; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 82 "lscp.l"
{ return RESET; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 83 "lscp.l"
{ return MISCELLANEOUS; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 84 "lscp.l"
{ return QUIT; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 85 "lscp.l"
{ yylval->Number = atoi(yytext); return NUMBER; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 86 "lscp.l"
{ yylval->String = "";  BEGIN(INSTRING); }
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 87 "lscp.l"
{ yylval->String += yytext; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 88 "lscp.l"
{ yylval->String += '\n'; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 89 "lscp.l"
{ yylval->String += '\r'; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 90 "lscp.l"
{ yylval->String += '\t'; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 91 "lscp.l"
{ yylval->String += '\\'; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 92 "lscp.l"
{ yylval->String += '\"'; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 93 "lscp.l"
{ yylval->String += '\''; }
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 94 "lscp.l"
{ yylval->String += yytext; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 95 "lscp.l"
{ BEGIN(INITIAL); return STRINGVAL; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 96 "lscp.l"
{ yylval->Char = yytext[0]; return CHAR; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 98 "lscp.l"
ECHO;
	YY_BREAK
#line 1686 "lex.yy.c"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(INSTRING):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yy_start_state_list[yyg->yy_start];

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		yy_current_state += yy_current_state[(*yy_cp ? YY_SC_TO_UI(*yy_cp) : 256)].yy_nxt;
		if ( yy_current_state[-1].yy_nxt )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *yy_cp = yyg->yy_c_buf_p;

	register int yy_c = 256;
	register yyconst struct yy_trans_info *yy_trans_info;

	yy_trans_info = &yy_current_state[(unsigned int) yy_c];
	yy_current_state += yy_trans_info->yy_nxt;
	yy_is_jam = (yy_trans_info->yy_verify != yy_c);

	if ( ! yy_is_jam )
		{
		if ( yy_current_state[-1].yy_nxt )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		}

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	yy_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf ,yyscanner );

	yyfree((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * str , yyscan_t yyscanner)
{
    
	return yy_scan_bytes(str,strlen(str) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * bytes, int  len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yyalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "yyset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "yyset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void yyset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
       This function is called once per scanner lifetime. */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 1;
    yyg->yy_start = 0;
    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack = (int *) 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int yylex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    memset(*ptr_yy_globals,0,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#undef YY_NEW_FILE
#undef YY_FLUSH_BUFFER
#undef yy_set_bol
#undef yy_new_buffer
#undef yy_set_interactive
#undef YY_DO_BEFORE_ACTION

#ifdef YY_DECL_IS_OURS
#undef YY_DECL_IS_OURS
#undef YY_DECL
#endif
#line 98 "lscp.l"



/**
 * We provide our own version of yywrap() so we don't have to link against
 * the lex library.
 */
int yywrap(yyscan_t yyscanner) {
    return 1; // continue scanning
}

