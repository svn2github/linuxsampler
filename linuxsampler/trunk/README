LinuxSampler - modular, streaming capable sampler

by Benno Senoner (benno@gardena.net)
and Christian Schoenebeck (cuse@users.sourceforge.net)

This software is distributed under the GNU General Public License (see
COPYING file), and may not be used in commercial applications without asking
the authors for permission.

LinuxSampler is sampler backend, thus server-like console application. It
provides a TCP based network interface with a custom ASCII based protocol
called "LSCP" to control the sampler and manage sampler sessions. You either
have to send commands manually to LinuxSampler, e.g. by connecting via
'telnet' or by using 'netcat' or you might want to use a graphical user
interface (frontend) like QSampler.

For more informations visit http://www.linuxsampler.org/documentation.html


Requirements on Linux
---------------------

    o A low latency enabled kernel
      (see http://www.linuxsampler.org/faq.html#dropouts).
    o At least ALSA and optionally JACK and their respective development
      (header) files as MIDI input and audio output drivers.
    o libgig and its development (header) files for loading Gigasampler
      format files.
    o If you are compiling from CVS you need to have the autotools installed
      (autoconf, automake and libtool).


Compiling on Linux
------------------

    a) Compiling and installing directly
    
    The general procedure by calling './configure && make' on the source's
    toplevel directory will compile and 'make install' as root will install
    LinuxSampler on your system.
    
    Note: if you are compiling from CVS you have to explicitly call
          'make -f Makefile.cvs' before doing the above procedure. This will
          generate all autotools managed build files.

          
    b) Creating Debian packages

    Simply calling 'dpkg-buildpackage -rfakeroot -b' from the source's
    toplevel directory will compile and build the Debian binary package.
    The Debian package will be placed one directory above the source's
    toplevel directory (thus ../).

    
    c) Creating Redhat packages

    You need to have the rpmbuild tool installed and properly configured to
    create RPM packages. To create the RPM packages do the following:

    * Get .spec file generated by ./configure and edit it as appropriate.

    * Copy the source tarball to "/usr/src/<rpmdir>/SOURCES" directory,
      where <rpmdir> is dependent to the system you are using. For SuSE
      <rmpdir> will be "packages", for Mandrake <rpmdir> is "RPM" and for
      Redhat / Fedora <rpmdir> always equals "redhat".

    * Build the rpm(s) by invoking 'rpmbuild -bb <specfile>' from the
      command line.

    On success, the resulting rpm(s) can usually be found under the proper
    "/usr/src/<rpmdir>/RPMS/<arch>" directory.


Compilation on OSX : Stephane Letz (letz@grame.fr)
--------------------------------------------------

The compilation on OSX currently uses an XCode project. 

- Download and install the JackOSX package (www.jackosx.com)

- In the "osx" folder, possibly manually edit the version.h to change the version number

- In the XCode project, build the "LinuxSampler" target

