


LinuxSampler Developers                                   C. Schoenebeck
Internet-Draft                           Interessengemeinschaft Software
Intended status: Standards Track                       Engineering e. V.
Expires: May 5, 2010                                    November 1, 2009


                     LinuxSampler Control Protocol
                                LSCP 1.5

Abstract

   The LinuxSampler Control Protocol (LSCP) is an application-level
   protocol primarily intended for local and remote controlling the
   LinuxSampler backend application, which is a sophisticated server-
   like console application essentially playing back audio samples and
   manipulating the samples in real time to certain extent.

Status of this Memo

   By submitting this Internet-Draft, each author represents that any
   applicable patent or other IPR claims of which he or she is aware
   have been or will be disclosed, and any of which he or she becomes
   aware will be disclosed, in accordance with Section 6 of BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF), its areas, and its working groups.  Note that
   other groups may also distribute working documents as Internet-
   Drafts.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   The list of current Internet-Drafts can be accessed at
   http://www.ietf.org/ietf/1id-abstracts.txt.

   The list of Internet-Draft Shadow Directories can be accessed at
   http://www.ietf.org/shadow.html.

   This Internet-Draft will expire on May 5, 2010.










Schoenebeck                Expires May 5, 2010                  [Page 1]

Internet-Draft        LinuxSampler Control Protocol        November 2009


Table of Contents

   1.  Requirements notation . . . . . . . . . . . . . . . . . . . .   6
   2.  Versioning of this specification  . . . . . . . . . . . . . .   7
   3.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   8
   4.  Focus of this protocol  . . . . . . . . . . . . . . . . . . .   9
   5.  Communication Overview  . . . . . . . . . . . . . . . . . . .  10
     5.1.  Request/response communication method . . . . . . . . . .  10
       5.1.1.  Result format . . . . . . . . . . . . . . . . . . . .  11
     5.2.  Subscribe/notify communication method . . . . . . . . . .  13
   6.  Description for control commands  . . . . . . . . . . . . . .  15
     6.1.  Ignored lines and comments  . . . . . . . . . . . . . . .  15
     6.2.  Configuring audio drivers . . . . . . . . . . . . . . . .  15
       6.2.1.  Getting amount of available audio output drivers  . .  16
       6.2.2.  Getting all available audio output drivers  . . . . .  16
       6.2.3.  Getting information about a specific audio output
               driver  . . . . . . . . . . . . . . . . . . . . . . .  16
       6.2.4.  Getting information about specific audio output
               driver parameter  . . . . . . . . . . . . . . . . . .  17
       6.2.5.  Creating an audio output device . . . . . . . . . . .  21
       6.2.6.  Destroying an audio output device . . . . . . . . . .  22
       6.2.7.  Getting all created audio output device count . . . .  23
       6.2.8.  Getting all created audio output device list  . . . .  23
       6.2.9.  Getting current settings of an audio output device  .  23
       6.2.10. Changing settings of audio output devices . . . . . .  25
       6.2.11. Getting information about an audio channel  . . . . .  26
       6.2.12. Getting information about specific audio channel
               parameter . . . . . . . . . . . . . . . . . . . . . .  27
       6.2.13. Changing settings of audio output channels  . . . . .  29
     6.3.  Configuring MIDI input drivers  . . . . . . . . . . . . .  30
       6.3.1.  Getting amount of available MIDI input drivers  . . .  31
       6.3.2.  Getting all available MIDI input drivers  . . . . . .  31
       6.3.3.  Getting information about a specific MIDI input
               driver  . . . . . . . . . . . . . . . . . . . . . . .  32
       6.3.4.  Getting information about specific MIDI input
               driver parameter  . . . . . . . . . . . . . . . . . .  33
       6.3.5.  Creating a MIDI input device  . . . . . . . . . . . .  35
       6.3.6.  Destroying a MIDI input device  . . . . . . . . . . .  36
       6.3.7.  Getting all created MIDI input device count . . . . .  37
       6.3.8.  Getting all created MIDI input device list  . . . . .  37
       6.3.9.  Getting current settings of a MIDI input device . . .  38
       6.3.10. Changing settings of MIDI input devices . . . . . . .  39
       6.3.11. Getting information about a MIDI port . . . . . . . .  39
       6.3.12. Getting information about specific MIDI port
               parameter . . . . . . . . . . . . . . . . . . . . . .  40
       6.3.13. Changing settings of MIDI input ports . . . . . . . .  42
     6.4.  Configuring sampler channels  . . . . . . . . . . . . . .  43
       6.4.1.  Loading an instrument . . . . . . . . . . . . . . . .  43



Schoenebeck                Expires May 5, 2010                  [Page 2]

Internet-Draft        LinuxSampler Control Protocol        November 2009


       6.4.2.  Loading a sampler engine  . . . . . . . . . . . . . .  44
       6.4.3.  Getting all created sampler channel count . . . . . .  45
       6.4.4.  Getting all created sampler channel list  . . . . . .  46
       6.4.5.  Adding a new sampler channel  . . . . . . . . . . . .  46
       6.4.6.  Removing a sampler channel  . . . . . . . . . . . . .  47
       6.4.7.  Getting amount of available engines . . . . . . . . .  48
       6.4.8.  Getting all available engines . . . . . . . . . . . .  48
       6.4.9.  Getting information about an engine . . . . . . . . .  48
       6.4.10. Getting sampler channel information . . . . . . . . .  49
       6.4.11. Current number of active voices . . . . . . . . . . .  52
       6.4.12. Current number of active disk streams . . . . . . . .  53
       6.4.13. Current fill state of disk stream buffers . . . . . .  53
       6.4.14. Setting audio output device . . . . . . . . . . . . .  54
       6.4.15. Setting audio output type . . . . . . . . . . . . . .  55
       6.4.16. Setting audio output channel  . . . . . . . . . . . .  56
       6.4.17. Setting MIDI input device . . . . . . . . . . . . . .  57
       6.4.18. Setting MIDI input type . . . . . . . . . . . . . . .  57
       6.4.19. Setting MIDI input port . . . . . . . . . . . . . . .  58
       6.4.20. Setting MIDI input channel  . . . . . . . . . . . . .  59
       6.4.21. Setting channel volume  . . . . . . . . . . . . . . .  59
       6.4.22. Muting a sampler channel  . . . . . . . . . . . . . .  60
       6.4.23. Soloing a sampler channel . . . . . . . . . . . . . .  61
       6.4.24. Assigning a MIDI instrument map to a sampler
               channel . . . . . . . . . . . . . . . . . . . . . . .  61
       6.4.25. Adding an effect send to a sampler channel  . . . . .  62
       6.4.26. Removing an effect send from a sampler channel  . . .  64
       6.4.27. Getting amount of effect sends on a sampler channel .  64
       6.4.28. Listing all effect sends on a sampler channel . . . .  65
       6.4.29. Getting effect send information . . . . . . . . . . .  65
       6.4.30. Changing effect send's name . . . . . . . . . . . . .  67
       6.4.31. Altering effect send's audio routing  . . . . . . . .  67
       6.4.32. Altering effect send's MIDI controller  . . . . . . .  68
       6.4.33. Altering effect send's send level . . . . . . . . . .  69
       6.4.34. Sending MIDI messages to sampler channel  . . . . . .  70
       6.4.35. Resetting a sampler channel . . . . . . . . . . . . .  71
     6.5.  Controlling connection  . . . . . . . . . . . . . . . . .  72
       6.5.1.  Register front-end for receiving event messages . . .  72
       6.5.2.  Unregister front-end for not receiving event
               messages  . . . . . . . . . . . . . . . . . . . . . .  73
       6.5.3.  Enable or disable echo of commands  . . . . . . . . .  73
       6.5.4.  Close client connection . . . . . . . . . . . . . . .  74
     6.6.  Global commands . . . . . . . . . . . . . . . . . . . . .  74
       6.6.1.  Current number of active voices . . . . . . . . . . .  74
       6.6.2.  Maximum amount of active voices . . . . . . . . . . .  74
       6.6.3.  Current number of active disk streams . . . . . . . .  75
       6.6.4.  Reset sampler . . . . . . . . . . . . . . . . . . . .  75
       6.6.5.  General sampler informations  . . . . . . . . . . . .  75
       6.6.6.  Getting global volume attenuation . . . . . . . . . .  76



Schoenebeck                Expires May 5, 2010                  [Page 3]

Internet-Draft        LinuxSampler Control Protocol        November 2009


       6.6.7.  Setting global volume attenuation . . . . . . . . . .  76
       6.6.8.  Getting global voice limit  . . . . . . . . . . . . .  77
       6.6.9.  Setting global voice limit  . . . . . . . . . . . . .  77
       6.6.10. Getting global disk stream limit  . . . . . . . . . .  78
       6.6.11. Setting global disk stream limit  . . . . . . . . . .  79
     6.7.  MIDI Instrument Mapping . . . . . . . . . . . . . . . . .  79
       6.7.1.  Create a new MIDI instrument map  . . . . . . . . . .  80
       6.7.2.  Delete one particular or all MIDI instrument maps . .  81
       6.7.3.  Get amount of existing MIDI instrument maps . . . . .  82
       6.7.4.  Getting all created MIDI instrument maps  . . . . . .  82
       6.7.5.  Getting MIDI instrument map information . . . . . . .  82
       6.7.6.  Renaming a MIDI instrument map  . . . . . . . . . . .  83
       6.7.7.  Create or replace a MIDI instrument map entry . . . .  84
       6.7.8.  Getting ammount of MIDI instrument map entries  . . .  87
       6.7.9.  Getting indeces of all entries of a MIDI
               instrument map  . . . . . . . . . . . . . . . . . . .  87
       6.7.10. Remove an entry from the MIDI instrument map  . . . .  88
       6.7.11. Get current settings of MIDI instrument map entry . .  89
       6.7.12. Clear MIDI instrument map . . . . . . . . . . . . . .  90
     6.8.  Managing Instruments Database . . . . . . . . . . . . . .  91
       6.8.1.  Creating a new instrument directory . . . . . . . . .  91
       6.8.2.  Deleting an instrument directory  . . . . . . . . . .  92
       6.8.3.  Getting amount of instrument directories  . . . . . .  93
       6.8.4.  Listing all directories in specific directory . . . .  93
       6.8.5.  Getting instrument directory information  . . . . . .  94
       6.8.6.  Renaming an instrument directory  . . . . . . . . . .  95
       6.8.7.  Moving an instrument directory  . . . . . . . . . . .  95
       6.8.8.  Copying instrument directories  . . . . . . . . . . .  96
       6.8.9.  Changing the description of directory . . . . . . . .  97
       6.8.10. Finding directories . . . . . . . . . . . . . . . . .  97
       6.8.11. Adding instruments to the instruments database  . . .  99
       6.8.12. Removing an instrument  . . . . . . . . . . . . . . . 100
       6.8.13. Getting amount of instruments . . . . . . . . . . . . 101
       6.8.14. Listing all instruments in specific directory . . . . 102
       6.8.15. Getting instrument information  . . . . . . . . . . . 102
       6.8.16. Renaming an instrument  . . . . . . . . . . . . . . . 105
       6.8.17. Moving an instrument  . . . . . . . . . . . . . . . . 105
       6.8.18. Copying instruments . . . . . . . . . . . . . . . . . 106
       6.8.19. Changing the description of instrument  . . . . . . . 106
       6.8.20. Finding instruments . . . . . . . . . . . . . . . . . 107
       6.8.21. Getting job status information  . . . . . . . . . . . 109
       6.8.22. Formatting the instruments database . . . . . . . . . 111
       6.8.23. Checking for lost instrument files  . . . . . . . . . 111
       6.8.24. Replacing an instrument file  . . . . . . . . . . . . 112
     6.9.  Editing Instruments . . . . . . . . . . . . . . . . . . . 112
       6.9.1.  Opening an appropriate instrument editor
               application . . . . . . . . . . . . . . . . . . . . . 112
     6.10. Managing Files  . . . . . . . . . . . . . . . . . . . . . 113



Schoenebeck                Expires May 5, 2010                  [Page 4]

Internet-Draft        LinuxSampler Control Protocol        November 2009


       6.10.1. Retrieving amount of instruments of a file  . . . . . 114
       6.10.2. Retrieving all instruments of a file  . . . . . . . . 114
       6.10.3. Retrieving informations about one instrument in a
               file  . . . . . . . . . . . . . . . . . . . . . . . . 115
   7.  Command Syntax  . . . . . . . . . . . . . . . . . . . . . . . 117
     7.1.  Character Set and Escape Sequences  . . . . . . . . . . . 131
   8.  Events  . . . . . . . . . . . . . . . . . . . . . . . . . . . 136
     8.1.  Number of audio output devices changed  . . . . . . . . . 136
     8.2.  Audio output device's settings changed  . . . . . . . . . 136
     8.3.  Number of MIDI input devices changed  . . . . . . . . . . 136
     8.4.  MIDI input device's settings changed  . . . . . . . . . . 137
     8.5.  Number of sampler channels changed  . . . . . . . . . . . 137
     8.6.  MIDI data on a sampler channel arrived  . . . . . . . . . 137
     8.7.  MIDI data on a MIDI input device arrived  . . . . . . . . 138
     8.8.  Number of active voices changed . . . . . . . . . . . . . 138
     8.9.  Number of active disk streams changed . . . . . . . . . . 139
     8.10. Disk stream buffer fill state changed . . . . . . . . . . 139
     8.11. Channel information changed . . . . . . . . . . . . . . . 139
     8.12. Number of effect sends changed  . . . . . . . . . . . . . 140
     8.13. Effect send information changed . . . . . . . . . . . . . 140
     8.14. Total number of active voices changed . . . . . . . . . . 141
     8.15. Total number of active disk streams changed . . . . . . . 141
     8.16. Number of MIDI instrument maps changed  . . . . . . . . . 141
     8.17. MIDI instrument map information changed . . . . . . . . . 141
     8.18. Number of MIDI instruments changed  . . . . . . . . . . . 142
     8.19. MIDI instrument information changed . . . . . . . . . . . 142
     8.20. Global settings changed . . . . . . . . . . . . . . . . . 143
     8.21. Number of database instrument directories changed . . . . 143
     8.22. Database instrument directory information changed . . . . 143
     8.23. Number of database instruments changed  . . . . . . . . . 144
     8.24. Database instrument information changed . . . . . . . . . 144
     8.25. Database job status information changed . . . . . . . . . 145
     8.26. Miscellaneous and debugging events  . . . . . . . . . . . 145
   9.  Security Considerations . . . . . . . . . . . . . . . . . . . 147
   10. Acknowledgments . . . . . . . . . . . . . . . . . . . . . . . 148
   11. References  . . . . . . . . . . . . . . . . . . . . . . . . . 149
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . . 150
   Intellectual Property and Copyright Statements  . . . . . . . . . 151













Schoenebeck                Expires May 5, 2010                  [Page 5]

Internet-Draft        LinuxSampler Control Protocol        November 2009


1.  Requirements notation

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].

   This protocol is always case-sensitive if not explicitly claimed the
   opposite.

   In examples, "C:" and "S:" indicate lines sent by the client (front-
   end) and server (LinuxSampler) respectively.  Lines in examples must
   be interpreted as every line being CRLF terminated (carriage return
   character followed by line feed character as defined in the ASCII
   standard [RFC20]), thus the following example:

      C: "some line"

         "another line"

   must actually be interpreted as client sending the following message:

      "some line<CR><LF>another line<CR><LF>"

   where <CR> symbolizes the carriage return character and <LF> the line
   feed character as defined in the ASCII standard.

   Due to technical reasons, messages can arbitrary be fragmented, means
   the following example:

      S: "abcd"

   could also happen to be sent in three messages like in the following
   sequence scenario:

   o  server sending message "a"

   o  followed by a delay (pause) with arbitrary duration

   o  followed by server sending message "bcd<CR>"

   o  again followed by a delay (pause) with arbitrary duration

   o  followed by server sending the message "<LF>"

   where again <CR> and <LF> symbolize the carriage return and line feed
   characters respectively.





Schoenebeck                Expires May 5, 2010                  [Page 6]

Internet-Draft        LinuxSampler Control Protocol        November 2009


2.  Versioning of this specification

   LSCP will certainly be extended and enhanced by-and-by.  Each
   official release of the LSCP specification will be tagged with a
   unique version tuple.  The version tuple consists at least of a major
   and minor version number like:

      "1.2"

   In this example the major version number would be "1" and the minor
   version number would be "2".  Note that the version tuple might also
   have more than two elements.  The major version number defines a
   group of backward compatible versions.  That means a frontend is
   compatible to the connected sampler if and only if the LSCP versions
   to which each of the two parties complies to, match both of the
   following rules:

   Compatibility:

   1.  The frontend's LSCP major version and the sampler's LSCP major
       version are exactly equal.

   2.  The frontend's LSCP minor version is less or equal than the
       sampler's LSCP minor version.

   Compatibility can only be claimed if both rules are true.  The
   frontend can use the "GET SERVER INFO" (Section 6.6.5) command to get
   the version of the LSCP specification the sampler complies with.























Schoenebeck                Expires May 5, 2010                  [Page 7]

Internet-Draft        LinuxSampler Control Protocol        November 2009


3.  Introduction

   LinuxSampler is a so called software sampler application capable to
   playback audio samples from a computer's Random Access Memory (RAM)
   as well as directly streaming it from disk.  LinuxSampler is designed
   to be modular.  It provides several so called "sampler engines" where
   each engine is specialized for a certain purpose.  LinuxSampler has
   virtual channels which will be referred in this document as "sampler
   channels".  The channels are in such way virtual as they can be
   connected to an arbitrary MIDI input method and arbitrary MIDI
   channel (e.g. sampler channel 17 could be connected to an ALSA
   sequencer device 64:0 and listening to MIDI channel 1 there).  Each
   sampler channel will be associated with an instance of one of the
   available sampler engines (e.g.  GigEngine, DLSEngine).  The audio
   output of each sampler channel can be routed to an arbitrary audio
   output method (ALSA / JACK) and an arbitrary audio output channel
   there.


































Schoenebeck                Expires May 5, 2010                  [Page 8]

Internet-Draft        LinuxSampler Control Protocol        November 2009


4.  Focus of this protocol

   Main focus of this protocol is to provide a way to configure a
   running LinuxSampler instance and to retrieve information about it.
   The focus of this protocol is not to provide a way to control
   synthesis parameters or even to trigger or release notes.  Or in
   other words; the focus are those functionalities which are not
   covered by MIDI or which may at most be handled via MIDI System
   Exclusive Messages.










































Schoenebeck                Expires May 5, 2010                  [Page 9]

Internet-Draft        LinuxSampler Control Protocol        November 2009


5.  Communication Overview

   There are two distinct methods of communication between a running
   instance of LinuxSampler and one or more control applications, so
   called "front-ends": a simple request/response communication method
   used by the clients to give commands to the server as well as to
   inquire about server's status and a subscribe/notify communication
   method used by the client to subscribe to and receive notifications
   of certain events as they happen on the server.  The latter needs
   more effort to be implemented in the front-end application.  The two
   communication methods will be described next.

5.1.  Request/response communication method

   This simple communication method is based on TCP [RFC793].  The
   front-end application establishes a TCP connection to the
   LinuxSampler instance on a certain host system.  Then the front-end
   application will send certain ASCII based commands as defined in this
   document (every command line must be CRLF terminated - see
   "Conventions used in this document" at the beginning of this
   document) and the LinuxSampler application will response after a
   certain process time with an appropriate ASCII based answer, also as
   defined in this document.  So this TCP communication is simply based
   on query and answer paradigm.  That way LinuxSampler is only able to
   answer on queries from front-ends, but not able to automatically send
   messages to the client if it's not asked to.  The fronted should not
   reconnect to LinuxSampler for every single command, instead it should
   keep the connection established and simply resend message(s) for
   subsequent commands.  To keep information in the front-end up-to-date
   the front-end has to periodically send new requests to get the
   current information from the LinuxSampler instance.  This is often
   referred to as "polling".  While polling is simple to implement and
   may be OK to use in some cases, there may be disadvantages to polling
   such as network traffic overhead and information being out of date.
   It is possible for a client or several clients to open more than one
   connection to the server at the same time.  It is also possible to
   send more than one request to the server at the same time but if
   those requests are sent over the same connection server MUST execute
   them sequentially.  Upon executing a request server will produce a
   result set and send it to the client.  Each and every request made by
   the client MUST result in a result set being sent back to the client.
   No other data other than a result set may be sent by a server to a
   client.  No result set may be sent to a client without the client
   sending request to the server first.  On any particular connection,
   result sets MUST be sent in their entirety without being interrupted
   by other result sets.  If several requests got queued up at the
   server they MUST be processed in the order they were received and
   result sets MUST be sent back in the same order.



Schoenebeck                Expires May 5, 2010                 [Page 10]

Internet-Draft        LinuxSampler Control Protocol        November 2009


5.1.1.  Result format

   Result set could be one of the following types:

   1.  Normal

   2.  Warning

   3.  Error

   Warning and Error result sets MUST be single line and have the
   following format:

   o  "WRN:<warning-code>:<warning-message>"

   o  "ERR:<error-code>:<error-message>"

   Where <warning-code> and <error-code> are numeric unique identifiers
   of the warning or error and <warning-message> and <error-message> are
   human readable descriptions of the warning or error respectively.

   Examples:

      C: "LOAD INSTRUMENT '/home/me/Boesendorfer24bit.gig" 0 0

      S: "WRN:32:This is a 24 bit patch which is not supported natively
      yet."

      C: "GET AUDIO_OUTPUT_DRIVER_PARAMETER INFO ALSA EAR"

      S: "ERR:3456:Audio output driver 'ALSA' does not have a parameter
      'EAR'."

      C: "GET AUDIO_OUTPUT_DEVICE INFO 123456"

      S: "ERR:9:There is no audio output device with index 123456."

   Normal result sets could be:

   1.  Empty

   2.  Single line

   3.  Multi-line

   Empty result set is issued when the server only needed to acknowledge
   the fact that the request was received and it was processed
   successfully and no additional information is available.  This result



Schoenebeck                Expires May 5, 2010                 [Page 11]

Internet-Draft        LinuxSampler Control Protocol        November 2009


   set has the following format:

      "OK"

   Example:

      C: "SET AUDIO_OUTPUT_DEVICE_PARAMETER 0 CHANNELS=4"

      S: "OK"

   Single line result sets are command specific.  One example of a
   single line result set is an empty line.  Multi-line result sets are
   command specific and may include one or more lines of information.
   They MUST always end with the following line:

      "."

   Example:

      C: "GET AUDIO_OUTPUT_DEVICE INFO 0"

      S: "DRIVER: ALSA"

         "CHANNELS: 2"

         "SAMPLERATE: 44100"

         "ACTIVE: true"

         "FRAGMENTS: 2"

         "FRAGMENTSIZE: 128"

         "CARD: '0,0'"

         "."

   In addition to above mentioned formats, warnings and empty result
   sets MAY be indexed.  In this case, they have the following formats
   respectively:

   o  "WRN[<index>]:<warning-code>:<warning-message>"

   o  "OK[<index>]"

   where <index> is command specific and is used to indicate channel
   number that the result set was related to or other integer value.




Schoenebeck                Expires May 5, 2010                 [Page 12]

Internet-Draft        LinuxSampler Control Protocol        November 2009


   Each line of the result set MUST end with <CRLF>.

   Examples:

      C: "ADD CHANNEL"

      S: "OK[12]"

      C: "CREATE AUDIO_OUTPUT_DEVICE ALSA SAMPLERATE=96000"

      S: "WRN[0]:32:Sample rate not supported, using 44100 instead."

5.2.  Subscribe/notify communication method

   This more sophisticated communication method is actually only an
   extension of the simple request/response communication method.  The
   front-end still uses a TCP connection and sends the same commands on
   the TCP connection.  Two extra commands are SUBSCRIBE and UNSUBSCRIBE
   commands that allow a client to tell the server that it is interested
   in receiving notifications about certain events as they happen on the
   server.  The SUBSCRIBE command has the following syntax:

      SUBSCRIBE <event-id>

   where <event-id> will be replaced by the respective event that client
   wants to subscribe to.  Upon receiving such request, server SHOULD
   respond with OK and start sending EVENT notifications when a given
   even has occurred to the front-end when an event has occurred.  It
   MAY be possible certain events may be sent before OK response during
   real time nature of their generation.  Event messages have the
   following format:

      NOTIFY:<event-id>:<custom-event-data>

   where <event-id> uniquely identifies the event that has occurred and
   <custom-event-data> is event specific.

   Several rules must be followed by the server when generating events:

   1.  Events MUST NOT be sent to any client who has not issued an
       appropriate SUBSCRIBE command.

   2.  Events MUST only be sent using the same connection that was used
       to subscribe to them.

   3.  When response is being sent to the client, event MUST be inserted
       in the stream before or after the response, but NOT in the
       middle.  Same is true about the response.  It should never be



Schoenebeck                Expires May 5, 2010                 [Page 13]

Internet-Draft        LinuxSampler Control Protocol        November 2009


       inserted in the middle of the event message as well as any other
       response.

   If the client is not interested in a particular event anymore it MAY
   issue UNSUBSCRIBE command using the following syntax:

      UNSUBSCRIBE <event-id>

   where <event-id> will be replace by the respective event that client
   is no longer interested in receiving.  For a list of supported events
   see Section 8.

   Example: the fill states of disk stream buffers have changed on
   sampler channel 4 and the LinuxSampler instance will react by sending
   the following message to all clients who subscribed to this event:

      NOTIFY:CHANNEL_BUFFER_FILL:4 [35]62%,[33]80%,[37]98%

   Which means there are currently three active streams on sampler
   channel 4, where the stream with ID "35" is filled by 62%, stream
   with ID 33 is filled by 80% and stream with ID 37 is filled by 98%.

   Clients may choose to open more than one connection to the server and
   use some connections to receive notifications while using other
   connections to issue commands to the back-end.  This is entirely
   legal and up to the implementation.  This does not change the
   protocol in any way and no special restrictions exist on the server
   to allow or disallow this or to track what connections belong to what
   front-ends.  Server will listen on a single port, accept multiple
   connections and support protocol described in this specification in
   it's entirety on this single port on each connection that it
   accepted.

   Due to the fact that TCP is used for this communication, dead peers
   will be detected automatically by the OS TCP stack.  While it may
   take a while to detect dead peers if no traffic is being sent from
   server to client (TCP keep-alive timer is set to 2 hours on many
   OSes) it will not be an issue here as when notifications are sent by
   the server, dead client will be detected quickly.

   When connection is closed for any reason server MUST forget all
   subscriptions that were made on this connection.  If client
   reconnects it MUST resubscribe to all events that it wants to
   receive.







Schoenebeck                Expires May 5, 2010                 [Page 14]

Internet-Draft        LinuxSampler Control Protocol        November 2009


6.  Description for control commands

   This chapter will describe the available control commands that can be
   sent on the TCP connection in detail.  Some certain commands (e.g.
   "GET CHANNEL INFO" (Section 6.4.10) or "GET ENGINE INFO"
   (Section 6.4.9)) lead to multiple-line responses.  In this case
   LinuxSampler signals the end of the response by a "." (single dot)
   line.

6.1.  Ignored lines and comments

   White lines, that is lines which only contain space and tabulator
   characters, and lines that start with a "#" character are ignored,
   thus it's possible for example to group commands and to place
   comments in a LSCP script file.

6.2.  Configuring audio drivers

   Instances of drivers in LinuxSampler are called devices.  You can use
   multiple audio devices simultaneously, e.g. to output the sound of
   one sampler channel using the ALSA audio output driver, and on
   another sampler channel you might want to use the JACK audio output
   driver.  For particular audio output systems it's also possible to
   create several devices of the same audio output driver, e.g. two
   separate ALSA audio output devices for using two different sound
   cards at the same time.  This chapter describes all commands to
   configure LinuxSampler's audio output devices and their parameters.

   Instead of defining commands and parameters for each driver
   individually, all possible parameters, their meanings and possible
   values have to be obtained at runtime.  This makes the protocol a bit
   abstract, but has the advantage, that front-ends can be written
   independently of what drivers are currently implemented and what
   parameters these drivers are actually offering.  This means front-
   ends can even handle drivers which are implemented somewhere in
   future without modifying the front-end at all.

   Note: examples in this chapter showing particular parameters of
   drivers are not meant as specification of the drivers' parameters.
   Driver implementations in LinuxSampler might have complete different
   parameter names and meanings than shown in these examples or might
   change in future, so these examples are only meant for showing how to
   retrieve what parameters drivers are offering, how to retrieve their
   possible values, etc.







Schoenebeck                Expires May 5, 2010                 [Page 15]

Internet-Draft        LinuxSampler Control Protocol        November 2009


6.2.1.  Getting amount of available audio output drivers

   Use the following command to get the number of audio output drivers
   currently available for the LinuxSampler instance:

      GET AVAILABLE_AUDIO_OUTPUT_DRIVERS

   Possible Answers:

      LinuxSampler will answer by sending the number of audio output
      drivers.

   Example:

      C: "GET AVAILABLE_AUDIO_OUTPUT_DRIVERS"

      S: "2"

6.2.2.  Getting all available audio output drivers

   Use the following command to list all audio output drivers currently
   available for the LinuxSampler instance:

      LIST AVAILABLE_AUDIO_OUTPUT_DRIVERS

   Possible Answers:

      LinuxSampler will answer by sending comma separated character
      strings, each symbolizing an audio output driver.

   Example:

      C: "LIST AVAILABLE_AUDIO_OUTPUT_DRIVERS"

      S: "ALSA,JACK"

6.2.3.  Getting information about a specific audio output driver

   Use the following command to get detailed information about a
   specific audio output driver:

      GET AUDIO_OUTPUT_DRIVER INFO <audio-output-driver>

   Where <audio-output-driver> is the name of the audio output driver,
   returned by the "LIST AVAILABLE_AUDIO_OUTPUT_DRIVERS" (Section 6.2.2)
   command.

   Possible Answers:



Schoenebeck                Expires May 5, 2010                 [Page 16]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      LinuxSampler will answer by sending a <CRLF> separated list.  Each
      answer line begins with the information category name followed by
      a colon and then a space character <SP> and finally the info
      character string to that info category.  At the moment the
      following information categories are defined:



         DESCRIPTION -

            character string describing the audio output driver

         VERSION -

            character string reflecting the driver's version

         PARAMETERS -

            comma separated list of all parameters available for the
            given audio output driver, at least parameters 'channels',
            'samplerate' and 'active' are offered by all audio output
            drivers

      The mentioned fields above don't have to be in particular order.

   Example:

      C: "GET AUDIO_OUTPUT_DRIVER INFO ALSA"

      S: "DESCRIPTION: Advanced Linux Sound Architecture"

         "VERSION: 1.0"

         "PARAMETERS: DRIVER,CHANNELS,SAMPLERATE,ACTIVE,FRAGMENTS,
      FRAGMENTSIZE,CARD"

         "."

6.2.4.  Getting information about specific audio output driver parameter

   Use the following command to get detailed information about a
   specific audio output driver parameter:

      GET AUDIO_OUTPUT_DRIVER_PARAMETER INFO <audio> <prm> [<deplist>]

   Where <audio> is the name of the audio output driver as returned by
   the "LIST AVAILABLE_AUDIO_OUTPUT_DRIVERS" (Section 6.2.2) command,
   <prm> a specific parameter name for which information should be



Schoenebeck                Expires May 5, 2010                 [Page 17]

Internet-Draft        LinuxSampler Control Protocol        November 2009


   obtained (as returned by the "GET AUDIO_OUTPUT_DRIVER INFO"
   (Section 6.2.3) command) and <deplist> is an optional list of
   parameters on which the sought parameter <prm> depends on, <deplist>
   is a list of key-value pairs in form of "key1=val1 key2=val2 ...",
   where character string values are encapsulated into apostrophes (').
   Arguments given with <deplist> which are not dependency parameters of
   <prm> will be ignored, means the front-end application can simply put
   all parameters into <deplist> with the values already selected by the
   user.

   Possible Answers:

      LinuxSampler will answer by sending a <CRLF> separated list.  Each
      answer line begins with the information category name followed by
      a colon and then a space character <SP> and finally the info
      character string to that info category.  There are information
      which is always returned, independently of the given driver
      parameter and there are optional information which is only shown
      dependently to given driver parameter.  At the moment the
      following information categories are defined:

      TYPE -

         either "BOOL" for boolean value(s) or "INT" for integer
         value(s) or "FLOAT" for dotted number(s) or "STRING" for
         character string(s) (always returned, no matter which driver
         parameter)

      DESCRIPTION -

         arbitrary text describing the purpose of the parameter (always
         returned, no matter which driver parameter)

      MANDATORY -

         either true or false, defines if this parameter must be given
         when the device is to be created with the 'CREATE
         AUDIO_OUTPUT_DEVICE' (Section 6.2.5) command (always returned,
         no matter which driver parameter)

      FIX -

         either true or false, if false then this parameter can be
         changed at any time, once the device is created by the 'CREATE
         AUDIO_OUTPUT_DEVICE' (Section 6.2.5) command (always returned,
         no matter which driver parameter)





Schoenebeck                Expires May 5, 2010                 [Page 18]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      MULTIPLICITY -

         either true or false, defines if this parameter allows only one
         value or a list of values, where true means multiple values and
         false only a single value allowed (always returned, no matter
         which driver parameter)

      DEPENDS -

         comma separated list of parameters this parameter depends on,
         means the values for fields 'DEFAULT', 'RANGE_MIN', 'RANGE_MAX'
         and 'POSSIBILITIES' might depend on these listed parameters,
         for example assuming that an audio driver (like the ALSA
         driver) offers parameters 'card' and 'samplerate' then
         parameter 'samplerate' would depend on 'card' because the
         possible values for 'samplerate' depends on the sound card
         which can be chosen by the 'card' parameter (optionally
         returned, dependent to driver parameter)

      DEFAULT -

         reflects the default value for this parameter which is used
         when the device is created and not explicitly given with the
         'CREATE AUDIO_OUTPUT_DEVICE' (Section 6.2.5) command, in case
         of MULTIPLCITY=true, this is a comma separated list, that's why
         character strings are encapsulated into apostrophes (')
         (optionally returned, dependent to driver parameter)

      RANGE_MIN -

         defines lower limit of the allowed value range for this
         parameter, can be an integer value as well as a dotted number,
         this parameter is often used in conjunction with RANGE_MAX, but
         may also appear without (optionally returned, dependent to
         driver parameter)

      RANGE_MAX -

         defines upper limit of the allowed value range for this
         parameter, can be an integer value as well as a dotted number,
         this parameter is often used in conjunction with RANGE_MIN, but
         may also appear without (optionally returned, dependent to
         driver parameter)

      POSSIBILITIES -

         comma separated list of possible values for this parameter,
         character strings are encapsulated into apostrophes (optionally



Schoenebeck                Expires May 5, 2010                 [Page 19]

Internet-Draft        LinuxSampler Control Protocol        November 2009


         returned, dependent to driver parameter)

   The mentioned fields above don't have to be in particular order.

   Examples:

      C: "GET AUDIO_OUTPUT_DRIVER_PARAMETER INFO ALSA CARD"

      S: "DESCRIPTION: sound card to be used"

         "TYPE: STRING"

         "MANDATORY: false"

         "FIX: true"

         "MULTIPLICITY: false"

         "DEFAULT: '0,0'"

         "POSSIBILITIES: '0,0','1,0','2,0'"

         "."

      C: "GET AUDIO_OUTPUT_DRIVER_PARAMETER INFO ALSA SAMPLERATE"

      S: "DESCRIPTION: output sample rate in Hz"

         "TYPE: INT"

         "MANDATORY: false"

         "FIX: false"

         "MULTIPLICITY: false"

         "DEPENDS: card"

         "DEFAULT: 44100"

         "."

      C: "GET AUDIO_OUTPUT_DRIVER_PARAMETER INFO ALSA SAMPLERATE
      CARD='0,0'"

      S: "DESCRIPTION: output sample rate in Hz"





Schoenebeck                Expires May 5, 2010                 [Page 20]

Internet-Draft        LinuxSampler Control Protocol        November 2009


         "TYPE: INT"

         "MANDATORY: false"

         "FIX: false"

         "MULTIPLICITY: false"

         "DEPENDS: card"

         "DEFAULT: 44100"

         "RANGE_MIN: 22050"

         "RANGE_MAX: 96000"

         "."

6.2.5.  Creating an audio output device

   Use the following command to create a new audio output device for the
   desired audio output system:

      CREATE AUDIO_OUTPUT_DEVICE <audio-output-driver> [<param-list>]

   Where <audio-output-driver> should be replaced by the desired audio
   output system as returned by the "LIST
   AVAILABLE_AUDIO_OUTPUT_DRIVERS" (Section 6.2.2) command and <param-
   list> by an optional list of driver specific parameters in form of
   "key1=val1 key2=val2 ...", where character string values should be
   encapsulated into apostrophes (').  Note that there might be drivers
   which require parameter(s) to be given with this command.  Use the
   previously described commands in this chapter to get this
   information.

   Possible Answers:

      "OK[<device-id>]" -

         in case the device was successfully created, where <device-id>
         is the numerical ID of the new device

      "WRN[<device-id>]:<warning-code>:<warning-message>" -

         in case the device was created successfully, where <device-id>
         is the numerical ID of the new device, but there are noteworthy
         issue(s) related (e.g. sound card doesn't support given
         hardware parameters and the driver is using fall-back values),



Schoenebeck                Expires May 5, 2010                 [Page 21]

Internet-Draft        LinuxSampler Control Protocol        November 2009


         providing an appropriate warning code and warning message

      "ERR:<error-code>:<error-message>" -

         in case it failed, providing an appropriate error code and
         error message

   Examples:

      C: "CREATE AUDIO_OUTPUT_DEVICE ALSA"

      S: "OK[0]"

      C: "CREATE AUDIO_OUTPUT_DEVICE ALSA CARD='2,0' SAMPLERATE=96000"

      S: "OK[1]"

6.2.6.  Destroying an audio output device

   Use the following command to destroy a created output device:

      DESTROY AUDIO_OUTPUT_DEVICE <device-id>

   Where <device-id> should be replaced by the numerical ID of the audio
   output device as given by the "CREATE AUDIO_OUTPUT_DEVICE"
   (Section 6.2.5) or "LIST AUDIO_OUTPUT_DEVICES" (Section 6.2.8)
   command.

   Possible Answers:

      "OK" -

         in case the device was successfully destroyed

      "WRN:<warning-code>:<warning-message>" -

         in case the device was destroyed successfully, but there are
         noteworthy issue(s) related (e.g. an audio over ethernet driver
         was unloaded but the other host might not be informed about
         this situation), providing an appropriate warning code and
         warning message

      "ERR:<error-code>:<error-message>" -

         in case it failed, providing an appropriate error code and
         error message

   Example:



Schoenebeck                Expires May 5, 2010                 [Page 22]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      C: "DESTROY AUDIO_OUTPUT_DEVICE 0"

      S: "OK"

6.2.7.  Getting all created audio output device count

   Use the following command to count all created audio output devices:

      GET AUDIO_OUTPUT_DEVICES

   Possible Answers:

      LinuxSampler will answer by sending the current number of all
      audio output devices.

   Example:

      C: "GET AUDIO_OUTPUT_DEVICES"

      S: "4"

6.2.8.  Getting all created audio output device list

   Use the following command to list all created audio output devices:

      LIST AUDIO_OUTPUT_DEVICES

   Possible Answers:

      LinuxSampler will answer by sending a comma separated list with
      the numerical IDs of all audio output devices.

   Example:

      C: "LIST AUDIO_OUTPUT_DEVICES"

      S: "0,1,4,5"

6.2.9.  Getting current settings of an audio output device

   Use the following command to get current settings of a specific,
   created audio output device:

      GET AUDIO_OUTPUT_DEVICE INFO <device-id>

   Where <device-id> should be replaced by numerical ID of the audio
   output device as e.g. returned by the "LIST AUDIO_OUTPUT_DEVICES"
   (Section 6.2.8) command.



Schoenebeck                Expires May 5, 2010                 [Page 23]

Internet-Draft        LinuxSampler Control Protocol        November 2009


   Possible Answers:

   LinuxSampler will answer by sending a <CRLF> separated list.  Each
   answer line begins with the information category name followed by a
   colon and then a space character <SP> and finally the info character
   string to that info category.  As some parameters might allow
   multiple values, character strings are encapsulated into apostrophes
   (').  At the moment the following information categories are defined
   (independently of device):

      DRIVER -

         identifier of the used audio output driver, as also returned by
         the "LIST AVAILABLE_AUDIO_OUTPUT_DRIVERS" (Section 6.2.2)
         command

      CHANNELS -

         amount of audio output channels this device currently offers

      SAMPLERATE -

         playback sample rate the device uses

      ACTIVE -

         either true or false, if false then the audio device is
         inactive and doesn't output any sound, nor do the sampler
         channels connected to this audio device render any audio

   The mentioned fields above don't have to be in particular order.  The
   fields above are only those fields which are returned by all audio
   output devices.  Every audio output driver might have its own,
   additional driver specific parameters (see Section 6.2.3) which are
   also returned by this command.

   Example:

      C: "GET AUDIO_OUTPUT_DEVICE INFO 0"

      S: "DRIVER: ALSA"

         "CHANNELS: 2"

         "SAMPLERATE: 44100"

         "ACTIVE: true"




Schoenebeck                Expires May 5, 2010                 [Page 24]

Internet-Draft        LinuxSampler Control Protocol        November 2009


         "FRAGMENTS: 2"

         "FRAGMENTSIZE: 128"

         "CARD: '0,0'"

         "."

6.2.10.  Changing settings of audio output devices

   Use the following command to alter a specific setting of a created
   audio output device:

      SET AUDIO_OUTPUT_DEVICE_PARAMETER <device-id> <key>=<value>

   Where <device-id> should be replaced by the numerical ID of the audio
   output device as given by the "CREATE AUDIO_OUTPUT_DEVICE"
   (Section 6.2.5) or "LIST AUDIO_OUTPUT_DEVICES" (Section 6.2.8)
   command, <key> by the name of the parameter to change and <value> by
   the new value for this parameter.

   Possible Answers:

      "OK" -

         in case setting was successfully changed

      "WRN:<warning-code>:<warning-message>" -

         in case setting was changed successfully, but there are
         noteworthy issue(s) related, providing an appropriate warning
         code and warning message

      "ERR:<error-code>:<error-message>" -

         in case it failed, providing an appropriate error code and
         error message

   Example:

      C: "SET AUDIO_OUTPUT_DEVICE_PARAMETER 0 FRAGMENTSIZE=128"

      S: "OK"








Schoenebeck                Expires May 5, 2010                 [Page 25]

Internet-Draft        LinuxSampler Control Protocol        November 2009


6.2.11.  Getting information about an audio channel

   Use the following command to get information about an audio channel:

      GET AUDIO_OUTPUT_CHANNEL INFO <device-id> <audio-chan>

   Where <device-id> is the numerical ID of the audio output device as
   given by the "CREATE AUDIO_OUTPUT_DEVICE" (Section 6.2.5) or "LIST
   AUDIO_OUTPUT_DEVICES" (Section 6.2.8) command and <audio-chan> the
   audio channel number.

   Possible Answers:

      LinuxSampler will answer by sending a <CRLF> separated list.  Each
      answer line begins with the information category name followed by
      a colon and then a space character <SP> and finally the info
      character string to that info category.  At the moment the
      following information categories are defined:



         NAME -

            arbitrary character string naming the channel, which doesn't
            have to be unique (always returned by all audio channels)

         IS_MIX_CHANNEL -

            either true or false, a mix-channel is not a real,
            independent audio channel, but a virtual channel which is
            mixed to another real channel, this mechanism is needed for
            sampler engines which need more audio channels than the used
            audio system might be able to offer (always returned by all
            audio channels)

         MIX_CHANNEL_DESTINATION -

            numerical ID (positive integer including 0) which reflects
            the real audio channel (of the same audio output device)
            this mix channel refers to, means where the audio signal
            actually will be routed / added to (only returned in case
            the audio channel is mix channel)

   The mentioned fields above don't have to be in particular order.  The
   fields above are only those fields which are generally returned for
   the described cases by all audio channels regardless of the audio
   driver.  Every audio channel might have its own, additional driver
   and channel specific parameters.



Schoenebeck                Expires May 5, 2010                 [Page 26]

Internet-Draft        LinuxSampler Control Protocol        November 2009


   Examples:

      C: "GET AUDIO_OUTPUT_CHANNEL INFO 0 0"

      S: "NAME: studio monitor left"

         "IS_MIX_CHANNEL: false"

         "."

      C: "GET AUDIO_OUTPUT_CHANNEL INFO 0 1"

      S: "NAME: studio monitor right"

         "IS_MIX_CHANNEL: false"

         "."

      C: "GET AUDIO_OUTPUT_CHANNEL INFO 0 2"

      S: "NAME: studio monitor left"

         "IS_MIX_CHANNEL: true"

         "MIX_CHANNEL_DESTINATION: 1"

         "."

      C: "GET AUDIO_OUTPUT_CHANNEL INFO 1 0"

      S: "NAME: 'ardour (left)'"

         "IS_MIX_CHANNEL: false"

         "JACK_BINDINGS: 'ardour:0'"

         "."

6.2.12.  Getting information about specific audio channel parameter

   Use the following command to get detailed information about specific
   audio channel parameter:

      GET AUDIO_OUTPUT_CHANNEL_PARAMETER INFO <dev-id> <chan> <param>

   Where <dev-id> is the numerical ID of the audio output device as
   returned by the "CREATE AUDIO_OUTPUT_DEVICE" (Section 6.2.5) or "LIST
   AUDIO_OUTPUT_DEVICES" (Section 6.2.8) command, <chan> the audio



Schoenebeck                Expires May 5, 2010                 [Page 27]

Internet-Draft        LinuxSampler Control Protocol        November 2009


   channel number and <param> a specific channel parameter name for
   which information should be obtained (as returned by the "GET
   AUDIO_OUTPUT_CHANNEL INFO" (Section 6.2.11) command).

   Possible Answers:

      LinuxSampler will answer by sending a <CRLF> separated list.  Each
      answer line begins with the information category name followed by
      a colon and then a space character <SP> and finally the info
      character string to that info category.  There are information
      which is always returned, independently of the given channel
      parameter and there is optional information which is only shown
      dependently to the given audio channel.  At the moment the
      following information categories are defined:



         TYPE -

            either "BOOL" for boolean value(s) or "INT" for integer
            value(s) or "FLOAT" for dotted number(s) or "STRING" for
            character string(s) (always returned)

         DESCRIPTION -

            arbitrary text describing the purpose of the parameter
            (always returned)

         FIX -

            either true or false, if true then this parameter is read
            only, thus cannot be altered (always returned)

         MULTIPLICITY -

            either true or false, defines if this parameter allows only
            one value or a list of values, where true means multiple
            values and false only a single value allowed (always
            returned)

         RANGE_MIN -

            defines lower limit of the allowed value range for this
            parameter, can be an integer value as well as a dotted
            number, usually used in conjunction with 'RANGE_MAX', but
            may also appear without (optionally returned, dependent to
            driver and channel parameter)




Schoenebeck                Expires May 5, 2010                 [Page 28]

Internet-Draft        LinuxSampler Control Protocol        November 2009


         RANGE_MAX -

            defines upper limit of the allowed value range for this
            parameter, can be an integer value as well as a dotted
            number, usually used in conjunction with 'RANGE_MIN', but
            may also appear without (optionally returned, dependent to
            driver and channel parameter)

         POSSIBILITIES -

            comma separated list of possible values for this parameter,
            character strings are encapsulated into apostrophes
            (optionally returned, dependent to driver and channel
            parameter)

      The mentioned fields above don't have to be in particular order.

   Example:

      C: "GET AUDIO_OUTPUT_CHANNEL_PARAMETER INFO 1 0 JACK_BINDINGS"

      S: "DESCRIPTION: bindings to other JACK clients"

         "TYPE: STRING"

         "FIX: false"

         "MULTIPLICITY: true"

         "POSSIBILITIES: 'PCM:0','PCM:1','ardour:0','ardour:1'"

         "."

6.2.13.  Changing settings of audio output channels

   Use the following command to alter a specific setting of an audio
   output channel:

      SET AUDIO_OUTPUT_CHANNEL_PARAMETER <dev-id> <chn> <key>=<value>

   Where <dev-id> should be replaced by the numerical ID of the audio
   output device as returned by the "CREATE AUDIO_OUTPUT_DEVICE"
   (Section 6.2.5) or "LIST AUDIO_OUTPUT_DEVICES" (Section 6.2.8)
   command, <chn> by the audio channel number, <key> by the name of the
   parameter to change and <value> by the new value for this parameter.

   Possible Answers:




Schoenebeck                Expires May 5, 2010                 [Page 29]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      "OK" -

         in case setting was successfully changed

      "WRN:<warning-code>:<warning-message>" -

         in case setting was changed successfully, but there are
         noteworthy issue(s) related, providing an appropriate warning
         code and warning message

      "ERR:<error-code>:<error-message>" -

         in case it failed, providing an appropriate error code and
         error message

   Example:

      C: "SET AUDIO_OUTPUT_CHANNEL PARAMETER 0 0 JACK_BINDINGS='PCM:0'"

      S: "OK"

      C: "SET AUDIO_OUTPUT_CHANNEL PARAMETER 0 0 NAME='monitor left'"

      S: "OK"

6.3.  Configuring MIDI input drivers

   Instances of drivers in LinuxSampler are called devices.  You can use
   multiple MIDI devices simultaneously, e.g. to use MIDI over ethernet
   as MIDI input on one sampler channel and ALSA as MIDI input on
   another sampler channel.  For particular MIDI input systems it's also
   possible to create several devices of the same MIDI input type.  This
   chapter describes all commands to configure LinuxSampler's MIDI input
   devices and their parameters.

   Instead of defining commands and parameters for each driver
   individually, all possible parameters, their meanings and possible
   values have to be obtained at runtime.  This makes the protocol a bit
   abstract, but has the advantage, that front-ends can be written
   independently of what drivers are currently implemented and what
   parameters these drivers are actually offering.  This means front-
   ends can even handle drivers which are implemented somewhere in
   future without modifying the front-end at all.

   Commands for configuring MIDI input devices are pretty much the same
   as the commands for configuring audio output drivers, already
   described in the last chapter.




Schoenebeck                Expires May 5, 2010                 [Page 30]

Internet-Draft        LinuxSampler Control Protocol        November 2009


   Note: examples in this chapter showing particular parameters of
   drivers are not meant as specification of the drivers' parameters.
   Driver implementations in LinuxSampler might have complete different
   parameter names and meanings than shown in these examples or might
   change in future, so these examples are only meant for showing how to
   retrieve what parameters drivers are offering, how to retrieve their
   possible values, etc.

6.3.1.  Getting amount of available MIDI input drivers

   Use the following command to get the number of MIDI input drivers
   currently available for the LinuxSampler instance:

      GET AVAILABLE_MIDI_INPUT_DRIVERS

   Possible Answers:

      LinuxSampler will answer by sending the number of available MIDI
      input drivers.

   Example:

      C: "GET AVAILABLE_MIDI_INPUT_DRIVERS"

      S: "2"

6.3.2.  Getting all available MIDI input drivers

   Use the following command to list all MIDI input drivers currently
   available for the LinuxSampler instance:

      LIST AVAILABLE_MIDI_INPUT_DRIVERS

   Possible Answers:

      LinuxSampler will answer by sending comma separated character
      strings, each symbolizing a MIDI input driver.

   Example:

      C: "LIST AVAILABLE_MIDI_INPUT_DRIVERS"

      S: "ALSA,JACK"








Schoenebeck                Expires May 5, 2010                 [Page 31]

Internet-Draft        LinuxSampler Control Protocol        November 2009


6.3.3.  Getting information about a specific MIDI input driver

   Use the following command to get detailed information about a
   specific MIDI input driver:

      GET MIDI_INPUT_DRIVER INFO <midi-input-driver>

   Where <midi-input-driver> is the name of the MIDI input driver as
   returned by the "LIST AVAILABLE_MIDI_INPUT_DRIVERS" (Section 6.3.2)
   command.

   Possible Answers:

      LinuxSampler will answer by sending a <CRLF> separated list.  Each
      answer line begins with the information category name followed by
      a colon and then a space character <SP> and finally the info
      character string to that info category.  At the moment the
      following information categories are defined:



         DESCRIPTION -

            arbitrary description text about the MIDI input driver

         VERSION -

            arbitrary character string regarding the driver's version

         PARAMETERS -

            comma separated list of all parameters available for the
            given MIDI input driver

      The mentioned fields above don't have to be in particular order.

   Example:

      C: "GET MIDI_INPUT_DRIVER INFO ALSA"

      S: "DESCRIPTION: Advanced Linux Sound Architecture"

         "VERSION: 1.0"

         "PARAMETERS: DRIVER,ACTIVE"

         "."




Schoenebeck                Expires May 5, 2010                 [Page 32]

Internet-Draft        LinuxSampler Control Protocol        November 2009


6.3.4.  Getting information about specific MIDI input driver parameter

   Use the following command to get detailed information about a
   specific parameter of a specific MIDI input driver:

      GET MIDI_INPUT_DRIVER_PARAMETER INFO <midit> <param> [<deplist>]

   Where <midit> is the name of the MIDI input driver as returned by the
   "LIST AVAILABLE_MIDI_INPUT_DRIVERS" (Section 6.3.2) command, <param>
   a specific parameter name for which information should be obtained
   (as returned by the "GET MIDI_INPUT_DRIVER INFO" (Section 6.3.3)
   command) and <deplist> is an optional list of parameters on which the
   sought parameter <param> depends on, <deplist> is a key-value pair
   list in form of "key1=val1 key2=val2 ...", where character string
   values are encapsulated into apostrophes (').  Arguments given with
   <deplist> which are not dependency parameters of <param> will be
   ignored, means the front-end application can simply put all
   parameters in <deplist> with the values selected by the user.

   Possible Answers:

   LinuxSampler will answer by sending a <CRLF> separated list.  Each
   answer line begins with the information category name followed by a
   colon and then a space character <SP> and finally the info character
   string to that info category.  There is information which is always
   returned, independent of the given driver parameter and there is
   optional information which is only shown dependent to given driver
   parameter.  At the moment the following information categories are
   defined:

      TYPE -

         either "BOOL" for boolean value(s) or "INT" for integer
         value(s) or "FLOAT" for dotted number(s) or "STRING" for
         character string(s) (always returned, no matter which driver
         parameter)

      DESCRIPTION -

         arbitrary text describing the purpose of the parameter (always
         returned, no matter which driver parameter)

      MANDATORY -

         either true or false, defines if this parameter must be given
         when the device is to be created with the 'CREATE
         MIDI_INPUT_DEVICE' (Section 6.3.5) command (always returned, no
         matter which driver parameter)



Schoenebeck                Expires May 5, 2010                 [Page 33]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      FIX -

         either true or false, if false then this parameter can be
         changed at any time, once the device is created by the 'CREATE
         MIDI_INPUT_DEVICE' (Section 6.3.5) command (always returned, no
         matter which driver parameter)

      MULTIPLICITY -

         either true or false, defines if this parameter allows only one
         value or a list of values, where true means multiple values and
         false only a single value allowed (always returned, no matter
         which driver parameter)

      DEPENDS -

         comma separated list of parameters this parameter depends on,
         means the values for fields 'DEFAULT', 'RANGE_MIN', 'RANGE_MAX'
         and 'POSSIBILITIES' might depend on these listed parameters,
         for example assuming that an audio driver (like the ALSA
         driver) offers parameters 'card' and 'samplerate' then
         parameter 'samplerate' would depend on 'card' because the
         possible values for 'samplerate' depends on the sound card
         which can be chosen by the 'card' parameter (optionally
         returned, dependent to driver parameter)

      DEFAULT -

         reflects the default value for this parameter which is used
         when the device is created and not explicitly given with the
         'CREATE MIDI_INPUT_DEVICE' (Section 6.3.5) command, in case of
         MULTIPLCITY=true, this is a comma separated list, that's why
         character strings are encapsulated into apostrophes (')
         (optionally returned, dependent to driver parameter)

      RANGE_MIN -

         defines lower limit of the allowed value range for this
         parameter, can be an integer value as well as a dotted number,
         this parameter is often used in conjunction with RANGE_MAX, but
         may also appear without (optionally returned, dependent to
         driver parameter)

      RANGE_MAX -

         defines upper limit of the allowed value range for this
         parameter, can be an integer value as well as a dotted number,
         this parameter is often used in conjunction with RANGE_MIN, but



Schoenebeck                Expires May 5, 2010                 [Page 34]

Internet-Draft        LinuxSampler Control Protocol        November 2009


         may also appear without (optionally returned, dependent to
         driver parameter)

      POSSIBILITIES -

         comma separated list of possible values for this parameter,
         character strings are encapsulated into apostrophes (optionally
         returned, dependent to driver parameter)

   The mentioned fields above don't have to be in particular order.

   Example:

      C: "GET MIDI_INPUT_DRIVER_PARAMETER INFO ALSA ACTIVE"

      S: "DESCRIPTION: Whether device is enabled"

         "TYPE: BOOL"

         "MANDATORY: false"

         "FIX: false"

         "MULTIPLICITY: false"

         "DEFAULT: true"

         "."

6.3.5.  Creating a MIDI input device

   Use the following command to create a new MIDI input device for the
   desired MIDI input system:

      CREATE MIDI_INPUT_DEVICE <midi-input-driver> [<param-list>]

   Where <midi-input-driver> should be replaced by the desired MIDI
   input system as returned by the "LIST AVAILABLE_MIDI_INPUT_DRIVERS"
   (Section 6.3.2) command and <param-list> by an optional list of
   driver specific parameters in form of "key1=val1 key2=val2 ...",
   where character string values should be encapsulated into apostrophes
   (').  Note that there might be drivers which require parameter(s) to
   be given with this command.  Use the previously described commands in
   this chapter to get that information.

   Possible Answers:





Schoenebeck                Expires May 5, 2010                 [Page 35]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      "OK[<device-id>]" -

         in case the device was successfully created, where <device-id>
         is the numerical ID of the new device

      "WRN[<device-id>]:<warning-code>:<warning-message>" -

         in case the driver was loaded successfully, where <device-id>
         is the numerical ID of the new device, but there are noteworthy
         issue(s) related, providing an appropriate warning code and
         warning message

      "ERR:<error-code>:<error-message>" -

         in case it failed, providing an appropriate error code and
         error message

   Example:

      C: "CREATE MIDI_INPUT_DEVICE ALSA"

      S: "OK[0]"

6.3.6.  Destroying a MIDI input device

   Use the following command to destroy a created MIDI input device:

      DESTROY MIDI_INPUT_DEVICE <device-id>

   Where <device-id> should be replaced by the device's numerical ID as
   returned by the "CREATE MIDI_INPUT_DEVICE" (Section 6.3.5) or "LIST
   MIDI_INPUT_DEVICES" (Section 6.3.8) command.

   Possible Answers:

      "OK" -

         in case the device was successfully destroyed

      "WRN:<warning-code>:<warning-message>" -

         in case the device was destroyed, but there are noteworthy
         issue(s) related, providing an appropriate warning code and
         warning message

      "ERR:<error-code>:<error-message>" -





Schoenebeck                Expires May 5, 2010                 [Page 36]

Internet-Draft        LinuxSampler Control Protocol        November 2009


         in case it failed, providing an appropriate error code and
         error message

   Example:

      C: "DESTROY MIDI_INPUT_DEVICE 0"

      S: "OK"

6.3.7.  Getting all created MIDI input device count

   Use the following command to count all created MIDI input devices:

      GET MIDI_INPUT_DEVICES

   Possible Answers:

      LinuxSampler will answer by sending the current number of all MIDI
      input devices.

   Example:

      C: "GET MIDI_INPUT_DEVICES"

      S: "3"

6.3.8.  Getting all created MIDI input device list

   Use the following command to list all created MIDI input devices:

      LIST MIDI_INPUT_DEVICES

   Possible Answers:

      LinuxSampler will answer by sending a comma separated list with
      the numerical Ids of all created MIDI input devices.

   Examples:

      C: "LIST MIDI_INPUT_DEVICES"

      S: "0,1,2"

      C: "LIST MIDI_INPUT_DEVICES"

      S: "1,3"





Schoenebeck                Expires May 5, 2010                 [Page 37]

Internet-Draft        LinuxSampler Control Protocol        November 2009


6.3.9.  Getting current settings of a MIDI input device

   Use the following command to get current settings of a specific,
   created MIDI input device:

      GET MIDI_INPUT_DEVICE INFO <device-id>

   Where <device-id> is the numerical ID of the MIDI input device as
   returned by the "CREATE MIDI_INPUT_DEVICE" (Section 6.3.5) or "LIST
   MIDI_INPUT_DEVICES" (Section 6.3.8) command.

   Possible Answers:

      LinuxSampler will answer by sending a <CRLF> separated list.  Each
      answer line begins with the information category name followed by
      a colon and then a space character <SP> and finally the info
      character string to that info category.  As some parameters might
      allow multiple values, character strings are encapsulated into
      apostrophes (').  At the moment the following information
      categories are defined (independent of driver):



         DRIVER -

            identifier of the used MIDI input driver, as e.g. returned
            by the "LIST AVAILABLE_MIDI_INPUT_DRIVERS" (Section 6.3.2)
            command

         ACTIVE -

            either true or false, if false then the MIDI device is
            inactive and doesn't listen to any incoming MIDI events and
            thus doesn't forward them to connected sampler channels

   The mentioned fields above don't have to be in particular order.  The
   fields above are only those fields which are returned by all MIDI
   input devices.  Every MIDI input driver might have its own,
   additional driver specific parameters (see "GET MIDI_INPUT_DRIVER
   INFO" (Section 6.3.3) command) which are also returned by this
   command.

   Example:

      C: "GET MIDI_INPUT_DEVICE INFO 0"

      S: "DRIVER: ALSA"




Schoenebeck                Expires May 5, 2010                 [Page 38]

Internet-Draft        LinuxSampler Control Protocol        November 2009


         "ACTIVE: true"

         "."

6.3.10.  Changing settings of MIDI input devices

   Use the following command to alter a specific setting of a created
   MIDI input device:

      SET MIDI_INPUT_DEVICE_PARAMETER <device-id> <key>=<value>

   Where <device-id> should be replaced by the numerical ID of the MIDI
   input device as returned by the "CREATE MIDI_INPUT_DEVICE"
   (Section 6.3.5) or "LIST MIDI_INPUT_DEVICES" (Section 6.3.8) command,
   <key> by the name of the parameter to change and <value> by the new
   value for this parameter.

   Possible Answers:

      "OK" -

         in case setting was successfully changed

      "WRN:<warning-code>:<warning-message>" -

         in case setting was changed successfully, but there are
         noteworthy issue(s) related, providing an appropriate warning
         code and warning message

      "ERR:<error-code>:<error-message>" -

         in case it failed, providing an appropriate error code and
         error message

   Example:

      C: "SET MIDI_INPUT_DEVICE_PARAMETER 0 ACTIVE=false"

      S: "OK"

6.3.11.  Getting information about a MIDI port

   Use the following command to get information about a MIDI port:

      GET MIDI_INPUT_PORT INFO <device-id> <midi-port>

   Where <device-id> is the numerical ID of the MIDI input device as
   returned by the "CREATE MIDI_INPUT_DEVICE" (Section 6.3.5) or "LIST



Schoenebeck                Expires May 5, 2010                 [Page 39]

Internet-Draft        LinuxSampler Control Protocol        November 2009


   MIDI_INPUT_DEVICES" (Section 6.3.8) command and <midi-port> the MIDI
   input port number.

   Possible Answers:

      LinuxSampler will answer by sending a <CRLF> separated list.  Each
      answer line begins with the information category name followed by
      a colon and then a space character <SP> and finally the info
      character string to that info category.  At the moment the
      following information categories are defined:

      NAME -

         arbitrary character string naming the port

   The field above is only the one which is returned by all MIDI ports
   regardless of the MIDI driver and port.  Every MIDI port might have
   its own, additional driver and port specific parameters.

   Example:

      C: "GET MIDI_INPUT_PORT INFO 0 0"

      S: "NAME: 'Masterkeyboard'"

         "ALSA_SEQ_BINDINGS: '64:0'"

         "."

6.3.12.  Getting information about specific MIDI port parameter

   Use the following command to get detailed information about specific
   MIDI port parameter:

      GET MIDI_INPUT_PORT_PARAMETER INFO <dev-id> <port> <param>

   Where <dev-id> is the numerical ID of the MIDI input device as
   returned by the "CREATE MIDI_INPUT_DEVICE" (Section 6.3.5) or "LIST
   MIDI_INPUT_DEVICES" (Section 6.3.8) command, <port> the MIDI port
   number and <param> a specific port parameter name for which
   information should be obtained (as returned by the "GET
   MIDI_INPUT_PORT INFO" (Section 6.3.11) command).

   Possible Answers:

      LinuxSampler will answer by sending a <CRLF> separated list.  Each
      answer line begins with the information category name followed by
      a colon and then a space character <SP> and finally the info



Schoenebeck                Expires May 5, 2010                 [Page 40]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      character string to that info category.  There is information
      which is always returned, independently of the given channel
      parameter and there is optional information which are only shown
      dependently to the given MIDI port.  At the moment the following
      information categories are defined:

      TYPE -

         either "BOOL" for boolean value(s) or "INT" for integer
         value(s) or "FLOAT" for dotted number(s) or "STRING" for
         character string(s) (always returned)

      DESCRIPTION -

         arbitrary text describing the purpose of the parameter (always
         returned)

      FIX -

         either true or false, if true then this parameter is read only,
         thus cannot be altered (always returned)

      MULTIPLICITY -

         either true or false, defines if this parameter allows only one
         value or a list of values, where true means multiple values and
         false only a single value allowed (always returned)

      RANGE_MIN -

         defines lower limit of the allowed value range for this
         parameter, can be an integer value as well as a dotted number,
         this parameter is usually used in conjunction with 'RANGE_MAX'
         but may also appear without (optionally returned, dependent to
         driver and port parameter)

      RANGE_MAX -

         defines upper limit of the allowed value range for this
         parameter, can be an integer value as well as a dotted number,
         this parameter is usually used in conjunction with 'RANGE_MIN'
         but may also appear without (optionally returned, dependent to
         driver and port parameter)

      POSSIBILITIES -

         comma separated list of possible values for this parameter,
         character strings are encapsulated into apostrophes (optionally



Schoenebeck                Expires May 5, 2010                 [Page 41]

Internet-Draft        LinuxSampler Control Protocol        November 2009


         returned, dependent to device and port parameter)

   The mentioned fields above don't have to be in particular order.

   Example:

      C: "GET MIDI_INPUT_PORT_PARAMETER INFO 0 0 ALSA_SEQ_BINDINGS"

      S: "DESCRIPTION: bindings to other ALSA sequencer clients"

         "TYPE: STRING"

         "FIX: false"

         "MULTIPLICITY: true"

         "POSSIBILITIES: '64:0','68:0','68:1'"

         "."

6.3.13.  Changing settings of MIDI input ports

   Use the following command to alter a specific setting of a MIDI input
   port:

      SET MIDI_INPUT_PORT_PARAMETER <device-id> <port> <key>=<value>

   Where <device-id> should be replaced by the numerical ID of the MIDI
   device as returned by the "CREATE MIDI_INPUT_DEVICE" (Section 6.3.5)
   or "LIST MIDI_INPUT_DEVICES" (Section 6.3.8) command, <port> by the
   MIDI port number, <key> by the name of the parameter to change and
   <value> by the new value for this parameter (encapsulated into
   apostrophes) or NONE (not encapsulated into apostrophes) for
   specifying no value for parameters allowing a list of values.

   Possible Answers:

      "OK" -

         in case setting was successfully changed

      "WRN:<warning-code>:<warning-message>" -

         in case setting was changed successfully, but there are
         noteworthy issue(s) related, providing an appropriate warning
         code and warning message





Schoenebeck                Expires May 5, 2010                 [Page 42]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      "ERR:<error-code>:<error-message>" -

         in case it failed, providing an appropriate error code and
         error message

   Example:

      C: "SET MIDI_INPUT_PORT_PARAMETER 0 0 ALSA_SEQ_BINDINGS='20:0'"

      S: "OK"

      C: "SET MIDI_INPUT_PORT_PARAMETER 0 0 ALSA_SEQ_BINDINGS=NONE"

      S: "OK"

6.4.  Configuring sampler channels

   The following commands describe how to add and remove sampler
   channels, associate a sampler channel with a sampler engine, load
   instruments and connect sampler channels to MIDI and audio devices.

6.4.1.  Loading an instrument

   An instrument file can be loaded and assigned to a sampler channel by
   one of the following commands:

      LOAD INSTRUMENT [NON_MODAL] '<filename>' <instr-index> <sampler-
      channel>

   Where <filename> is the name of the instrument file on the
   LinuxSampler instance's host system, <instr-index> the index of the
   instrument in the instrument file and <sampler-channel> is the number
   of the sampler channel the instrument should be assigned to.  Each
   sampler channel can only have one instrument.

   Notice: since LSCP 1.2 the <filename> argument supports escape
   characters for special characters (see chapter "Character Set and
   Escape Sequences (Section 7.1)" for details) and accordingly
   backslash characters in the filename MUST now be escaped as well!

   The difference between regular and NON_MODAL versions of the command
   is that the regular command returns OK only after the instrument has
   been fully loaded and the channel is ready to be used while NON_MODAL
   version returns immediately and a background process is launched to
   load the instrument on the channel.  The GET CHANNEL INFO
   (Section 6.4.10) command can be used to obtain loading progress from
   INSTRUMENT_STATUS field.  LOAD command will perform sanity checks
   such as making sure that the file could be read and it is of a proper



Schoenebeck                Expires May 5, 2010                 [Page 43]

Internet-Draft        LinuxSampler Control Protocol        November 2009


   format and SHOULD return ERR and SHOULD not launch the background
   process should any errors be detected at that point.

   Possible Answers:

      "OK" -

         in case the instrument was successfully loaded

      "WRN:<warning-code>:<warning-message>" -

         in case the instrument was loaded successfully, but there are
         noteworthy issue(s) related (e.g.  Engine doesn't support one
         or more patch parameters provided by the loaded instrument
         file), providing an appropriate warning code and warning
         message

      "ERR:<error-code>:<error-message>" -

         in case it failed, providing an appropriate error code and
         error message

   Example (Unix):

      C: LOAD INSTRUMENT '/home/joe/gigs/cello.gig' 0 0

      S: OK

   Example (Windows):

      C: LOAD INSTRUMENT 'D:/MySounds/cello.gig' 0 0

      S: OK

6.4.2.  Loading a sampler engine

   A sampler engine type can be associated to a specific sampler channel
   by the following command:

      LOAD ENGINE <engine-name> <sampler-channel>

   Where <engine-name> is an engine name as obtained by the "LIST
   AVAILABLE_ENGINES" (Section 6.4.8) command and <sampler-channel> the
   sampler channel as returned by the "ADD CHANNEL" (Section 6.4.5) or
   "LIST CHANNELS" (Section 6.4.4) command where the engine type should
   be assigned to.  This command should be issued after adding a new
   sampler channel and before any other control commands on the new
   sampler channel.  It can also be used to change the engine type of a



Schoenebeck                Expires May 5, 2010                 [Page 44]

Internet-Draft        LinuxSampler Control Protocol        November 2009


   sampler channel.  This command has (currently) no way to define or
   force if a new engine instance should be created and assigned to the
   given sampler channel or if an already existing instance of that
   engine type, shared with other sampler channels, should be used.

   Possible Answers:

      "OK" -

         in case the engine was successfully deployed

      "WRN:<warning-code>:<warning-message>" -

         in case the engine was deployed successfully, but there are
         noteworthy issue(s) related, providing an appropriate warning
         code and warning message

      "ERR:<error-code>:<error-message>" -

         in case it failed, providing an appropriate error code and
         error message

   Example:



6.4.3.  Getting all created sampler channel count

   The number of sampler channels can change on runtime.  To get the
   current amount of sampler channels, the front-end can send the
   following command:

      GET CHANNELS

   Possible Answers:

      LinuxSampler will answer by returning the current number of
      sampler channels.

   Example:

      C: "GET CHANNELS"

      S: "12"







Schoenebeck                Expires May 5, 2010                 [Page 45]

Internet-Draft        LinuxSampler Control Protocol        November 2009


6.4.4.  Getting all created sampler channel list

   The number of sampler channels can change on runtime.  To get the
   current list of sampler channels, the front-end can send the
   following command:

      LIST CHANNELS

   Possible Answers:

      LinuxSampler will answer by returning a comma separated list with
      all sampler channels numerical IDs.

   Example:

      C: "LIST CHANNELS"

      S: "0,1,2,3,4,5,6,9,10,11,15,20"

6.4.5.  Adding a new sampler channel

   A new sampler channel can be added to the end of the sampler channel
   list by sending the following command:

      ADD CHANNEL

   This will increment the sampler channel count by one and the new
   sampler channel will be appended to the end of the sampler channel
   list.  The front-end should send the respective, related commands
   right after to e.g. load an engine, load an instrument and setting
   input, output method and eventually other commands to initialize the
   new channel.  The front-end should use the sampler channel returned
   by the answer of this command to perform the previously recommended
   commands, to avoid race conditions e.g. with other front-ends that
   might also have sent an "ADD CHANNEL" command.

   Possible Answers:

      "OK[<sampler-channel>]" -

         in case a new sampler channel could be added, where <sampler-
         channel> reflects the channel number of the new created sampler
         channel which should be used to set up the sampler channel by
         sending subsequent initialization commands

      "WRN:<warning-code>:<warning-message>" -





Schoenebeck                Expires May 5, 2010                 [Page 46]

Internet-Draft        LinuxSampler Control Protocol        November 2009


         in case a new channel was added successfully, but there are
         noteworthy issue(s) related, providing an appropriate warning
         code and warning message

      "ERR:<error-code>:<error-message>" -

         in case it failed, providing an appropriate error code and
         error message

   Example:



6.4.6.  Removing a sampler channel

   A sampler channel can be removed by sending the following command:

      REMOVE CHANNEL <sampler-channel>

   Where <sampler-channel> should be replaced by the number of the
   sampler channel as given by the "ADD CHANNEL" (Section 6.4.5) or
   "LIST CHANNELS" (Section 6.4.4) command.  The channel numbers of all
   subsequent sampler channels remain the same.

   Possible Answers:

      "OK" -

         in case the given sampler channel could be removed

      "WRN:<warning-code>:<warning-message>" -

         in case the given channel was removed, but there are noteworthy
         issue(s) related, providing an appropriate warning code and
         warning message

      "ERR:<error-code>:<error-message>" -

         in case it failed, providing an appropriate error code and
         error message

   Example:









Schoenebeck                Expires May 5, 2010                 [Page 47]

Internet-Draft        LinuxSampler Control Protocol        November 2009


6.4.7.  Getting amount of available engines

   The front-end can ask for the number of available engines by sending
   the following command:

      GET AVAILABLE_ENGINES

   Possible Answers:

      LinuxSampler will answer by sending the number of available
      engines.

   Example:

      C: "GET AVAILABLE_ENGINES"

      S: "4"

6.4.8.  Getting all available engines

   The front-end can ask for a list of all available engines by sending
   the following command:

      LIST AVAILABLE_ENGINES

   Possible Answers:

      LinuxSampler will answer by sending a comma separated list of the
      engines' names encapsulated into apostrophes (').  Engine names
      can consist of lower and upper cases, digits and underlines ("_"
      character).

   Example:

      C: "LIST AVAILABLE_ENGINES"

      S: "'GigEngine','AkaiEngine','DLSEngine','JoesCustomEngine'"

6.4.9.  Getting information about an engine

   The front-end can ask for information about a specific engine by
   sending the following command:

      GET ENGINE INFO <engine-name>

   Where <engine-name> is an engine name as obtained by the "LIST
   AVAILABLE_ENGINES" (Section 6.4.8) command.




Schoenebeck                Expires May 5, 2010                 [Page 48]

Internet-Draft        LinuxSampler Control Protocol        November 2009


   Possible Answers:

      LinuxSampler will answer by sending a <CRLF> separated list.  Each
      answer line begins with the information category name followed by
      a colon and then a space character <SP> and finally the info
      character string to that info category.  At the moment the
      following categories are defined:



         DESCRIPTION -

            arbitrary description text about the engine (note that the
            character string may contain escape sequences (Section 7.1))

         VERSION -

            arbitrary character string regarding the engine's version

   The mentioned fields above don't have to be in particular order.

   Example:

      C: "GET ENGINE INFO JoesCustomEngine"

      S: "DESCRIPTION: this is Joe's custom sampler engine"

         "VERSION: testing-1.0"

         "."

6.4.10.  Getting sampler channel information

   The front-end can ask for the current settings of a sampler channel
   by sending the following command:

      GET CHANNEL INFO <sampler-channel>

   Where <sampler-channel> is the sampler channel number the front-end
   is interested in as returned by the "ADD CHANNEL" (Section 6.4.5) or
   "LIST CHANNELS" (Section 6.4.4) command.

   Possible Answers:

      LinuxSampler will answer by sending a <CRLF> separated list.  Each
      answer line begins with the settings category name followed by a
      colon and then a space character <SP> and finally the info
      character string to that setting category.  At the moment the



Schoenebeck                Expires May 5, 2010                 [Page 49]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      following categories are defined:



         ENGINE_NAME -

            name of the engine that is associated with the sampler
            channel, "NONE" if there's no engine associated yet for this
            sampler channel

         AUDIO_OUTPUT_DEVICE -

            numerical ID of the audio output device which is currently
            connected to this sampler channel to output the audio
            signal, "-1" if there's no device connected to this sampler
            channel

         AUDIO_OUTPUT_CHANNELS -

            number of output channels the sampler channel offers
            (dependent to used sampler engine and loaded instrument)

         AUDIO_OUTPUT_ROUTING -

            comma separated list which reflects to which audio channel
            of the selected audio output device each sampler output
            channel is routed to, e.g. "0,3" would mean the engine's
            output channel 0 is routed to channel 0 of the audio output
            device and the engine's output channel 1 is routed to the
            channel 3 of the audio output device

         INSTRUMENT_FILE -

            the file name of the loaded instrument, "NONE" if there's no
            instrument yet loaded for this sampler channel (note: since
            LSCP 1.2 this path may contain escape sequences
            (Section 7.1))

         INSTRUMENT_NR -

            the instrument index number of the loaded instrument, "-1"
            if there's no instrument loaded for this sampler channel

         INSTRUMENT_NAME -

            the instrument name of the loaded instrument (note: since
            LSCP 1.2 this character string may contain escape sequences
            (Section 7.1))



Schoenebeck                Expires May 5, 2010                 [Page 50]

Internet-Draft        LinuxSampler Control Protocol        November 2009


         INSTRUMENT_STATUS -

            Integer values 0 to 100 indicating loading progress
            percentage for the instrument.  Negative value indicates a
            loading exception (also returns "-1" in case no instrument
            was yet to be loaded on the sampler channel).  Value of 100
            indicates that the instrument is fully loaded.

         MIDI_INPUT_DEVICE -

            numerical ID of the MIDI input device which is currently
            connected to this sampler channel to deliver MIDI input
            commands, "-1" if there's no device connected to this
            sampler channel

         MIDI_INPUT_PORT -

            port number of the MIDI input device (in case a MIDI device
            was already assigned to the sampler channel)

         MIDI_INPUT_CHANNEL -

            the MIDI input channel number this sampler channel should
            listen to or "ALL" to listen on all MIDI channels

         VOLUME -

            optionally dotted number for the channel volume factor
            (where a value < 1.0 means attenuation and a value > 1.0
            means amplification)

         MUTE -

            Determines whether the channel is muted, "true" if the
            channel is muted, "false" if the channel is not muted, and
            "MUTED_BY_SOLO" if the channel is muted because of the
            presence of a solo channel and will be unmuted when there
            are no solo channels left

         SOLO -

            Determines whether this is a solo channel, "true" if the
            channel is a solo channel; "false" otherwise

         MIDI_INSTRUMENT_MAP -

            Determines to which MIDI instrument map this sampler channel
            is assigned to.  Read chapter "SET CHANNEL



Schoenebeck                Expires May 5, 2010                 [Page 51]

Internet-Draft        LinuxSampler Control Protocol        November 2009


            MIDI_INSTRUMENT_MAP" (Section 6.4.24) for a list of possible
            values.

   The mentioned fields above don't have to be in particular order.

   Example:

      C: "GET CHANNEL INFO 34"

      S: "ENGINE_NAME: GigEngine"

         "VOLUME: 1.0"

         "AUDIO_OUTPUT_DEVICE: 0"

         "AUDIO_OUTPUT_CHANNELS: 2"

         "AUDIO_OUTPUT_ROUTING: 0,1"

         "INSTRUMENT_FILE: /home/joe/FazioliPiano.gig"

         "INSTRUMENT_NR: 0"

         "INSTRUMENT_NAME: Fazioli Piano"

         "INSTRUMENT_STATUS: 100"

         "MIDI_INPUT_DEVICE: 0"

         "MIDI_INPUT_PORT: 0"

         "MIDI_INPUT_CHANNEL: 5"

         "VOLUME: 1.0"

         "MUTE: false"

         "SOLO: false"

         "MIDI_INSTRUMENT_MAP: NONE"

         "."

6.4.11.  Current number of active voices

   The front-end can ask for the current number of active voices on a
   sampler channel by sending the following command:




Schoenebeck                Expires May 5, 2010                 [Page 52]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      GET CHANNEL VOICE_COUNT <sampler-channel>

   Where <sampler-channel> is the sampler channel number the front-end
   is interested in as returned by the "ADD CHANNEL" (Section 6.4.5) or
   "LIST CHANNELS" (Section 6.4.4) command.

   Possible Answers:

      LinuxSampler will answer by returning the number of active voices
      on that channel.

   Example:



6.4.12.  Current number of active disk streams

   The front-end can ask for the current number of active disk streams
   on a sampler channel by sending the following command:

      GET CHANNEL STREAM_COUNT <sampler-channel>

   Where <sampler-channel> is the sampler channel number the front-end
   is interested in as returned by the "ADD CHANNEL" (Section 6.4.5) or
   "LIST CHANNELS" (Section 6.4.4) command.

   Possible Answers:

      LinuxSampler will answer by returning the number of active disk
      streams on that channel in case the engine supports disk
      streaming, if the engine doesn't support disk streaming it will
      return "NA" for not available.

   Example:



6.4.13.  Current fill state of disk stream buffers

   The front-end can ask for the current fill state of all disk streams
   on a sampler channel by sending the following command:

      GET CHANNEL BUFFER_FILL BYTES <sampler-channel>

   to get the fill state in bytes or






Schoenebeck                Expires May 5, 2010                 [Page 53]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      GET CHANNEL BUFFER_FILL PERCENTAGE <sampler-channel>

   to get the fill state in percent, where <sampler-channel> is the
   sampler channel number the front-end is interested in as returned by
   the "ADD CHANNEL" (Section 6.4.5) or "LIST CHANNELS" (Section 6.4.4)
   command.

   Possible Answers:

      LinuxSampler will either answer by returning a comma separated
      string with the fill state of all disk stream buffers on that
      channel or an empty line if there are no active disk streams or
      "NA" for *not available* in case the engine which is deployed
      doesn't support disk streaming.  Each entry in the answer list
      will begin with the stream's ID in brackets followed by the
      numerical representation of the fill size (either in bytes or
      percentage).  Note: due to efficiency reasons the fill states in
      the response are not in particular order, thus the front-end has
      to sort them by itself if necessary.

   Examples:

      C: "GET CHANNEL BUFFER_FILL BYTES 4"

      S: "[115]420500,[116]510300,[75]110000,[120]230700"

      C: "GET CHANNEL BUFFER_FILL PERCENTAGE 4"

      S: "[115]90%,[116]98%,[75]40%,[120]62%"

      C: "GET CHANNEL BUFFER_FILL PERCENTAGE 4"

      S: ""

6.4.14.  Setting audio output device

   The front-end can set the audio output device on a specific sampler
   channel by sending the following command:

      SET CHANNEL AUDIO_OUTPUT_DEVICE <sampler-channel>
      <audio-device-id>

   Where <sampler-channel> is the respective sampler channel number as
   returned by the "ADD CHANNEL" (Section 6.4.5) or "LIST CHANNELS"
   (Section 6.4.4) command and <audio-device-id> is the numerical ID of
   the audio output device as given by the "CREATE AUDIO_OUTPUT_DEVICE"
   (Section 6.2.5) or "LIST AUDIO_OUTPUT_DEVICES" (Section 6.2.8)
   command.



Schoenebeck                Expires May 5, 2010                 [Page 54]

Internet-Draft        LinuxSampler Control Protocol        November 2009


   Possible Answers:

      "OK" -

         on success

      "WRN:<warning-code>:<warning-message>" -

         if audio output device was set, but there are noteworthy
         issue(s) related, providing an appropriate warning code and
         warning message

      "ERR:<error-code>:<error-message>" -

         in case it failed, providing an appropriate error code and
         error message

   Examples:



6.4.15.  Setting audio output type

   DEPRECATED: THIS COMMAND WILL DISAPPEAR SOON!

   The front-end can alter the audio output type on a specific sampler
   channel by sending the following command:

      SET CHANNEL AUDIO_OUTPUT_TYPE <sampler-channel> <audio-output-
      type>

   Where <audio-output-type> is currently either "ALSA" or "JACK" and
   <sampler-channel> is the respective sampler channel number.

   Possible Answers:

      "OK" -

         on success

      "WRN:<warning-code>:<warning-message>" -

         if audio output type was set, but there are noteworthy issue(s)
         related, providing an appropriate warning code and warning
         message






Schoenebeck                Expires May 5, 2010                 [Page 55]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      "ERR:<error-code>:<error-message>" -

         in case it failed, providing an appropriate error code and
         error message

   Examples:



6.4.16.  Setting audio output channel

   The front-end can alter the audio output channel on a specific
   sampler channel by sending the following command:

      SET CHANNEL AUDIO_OUTPUT_CHANNEL <sampler-chan> <audio-out>
      <audio-in>

   Where <sampler-chan> is the sampler channel number as returned by the
   "ADD CHANNEL" (Section 6.4.5) or "LIST CHANNELS" (Section 6.4.4)
   command, <audio-out> is the numerical ID of the sampler channel's
   audio output channel which should be rerouted and <audio-in> is the
   numerical ID of the audio channel of the selected audio output device
   where <audio-out> should be routed to.

   Possible Answers:

      "OK" -

         on success

      "WRN:<warning-code>:<warning-message>" -

         if audio output channel was set, but there are noteworthy
         issue(s) related, providing an appropriate warning code and
         warning message

      "ERR:<error-code>:<error-message>" -

         in case it failed, providing an appropriate error code and
         error message

   Examples:









Schoenebeck                Expires May 5, 2010                 [Page 56]

Internet-Draft        LinuxSampler Control Protocol        November 2009


6.4.17.  Setting MIDI input device

   The front-end can set the MIDI input device on a specific sampler
   channel by sending the following command:

      SET CHANNEL MIDI_INPUT_DEVICE <sampler-channel> <midi-device-id>

   Where <sampler-channel> is the sampler channel number as returned by
   the "ADD CHANNEL" (Section 6.4.5) or "LIST CHANNELS" (Section 6.4.4)
   command and <midi-device-id> is the numerical ID of the MIDI input
   device as returned by the "CREATE MIDI_INPUT_DEVICE" (Section 6.3.5)
   or "LIST MIDI_INPUT_DEVICES" (Section 6.3.8) command.

   Possible Answers:

      "OK" -

         on success

      "WRN:<warning-code>:<warning-message>" -

         if MIDI input device was set, but there are noteworthy issue(s)
         related, providing an appropriate warning code and warning
         message

      "ERR:<error-code>:<error-message>" -

         in case it failed, providing an appropriate error code and
         error message

   Examples:



6.4.18.  Setting MIDI input type

   DEPRECATED: THIS COMMAND WILL DISAPPEAR SOON!

   The front-end can alter the MIDI input type on a specific sampler
   channel by sending the following command:

      SET CHANNEL MIDI_INPUT_TYPE <sampler-channel> <midi-input-type>

   Where <midi-input-type> is currently only "ALSA" and <sampler-
   channel> is the respective sampler channel number.

   Possible Answers:




Schoenebeck                Expires May 5, 2010                 [Page 57]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      "OK" -

         on success

      "WRN:<warning-code>:<warning-message>" -

         if MIDI input type was set, but there are noteworthy issue(s)
         related, providing an appropriate warning code and warning
         message

      "ERR:<error-code>:<error-message>" -

         in case it failed, providing an appropriate error code and
         error message

   Examples:



6.4.19.  Setting MIDI input port

   The front-end can alter the MIDI input port on a specific sampler
   channel by sending the following command:

      SET CHANNEL MIDI_INPUT_PORT <sampler-channel> <midi-input-port>

   Where <midi-input-port> is a MIDI input port number of the MIDI input
   device connected to the sampler channel given by <sampler-channel>.

   Possible Answers:

      "OK" -

         on success

      "WRN:<warning-code>:<warning-message>" -

         if MIDI input port was set, but there are noteworthy issue(s)
         related, providing an appropriate warning code and warning
         message

      "ERR:<error-code>:<error-message>" -

         in case it failed, providing an appropriate error code and
         error message

   Examples:




Schoenebeck                Expires May 5, 2010                 [Page 58]

Internet-Draft        LinuxSampler Control Protocol        November 2009




6.4.20.  Setting MIDI input channel

   The front-end can alter the MIDI channel a sampler channel should
   listen to by sending the following command:

      SET CHANNEL MIDI_INPUT_CHANNEL <sampler-channel> <midi-input-chan>

   Where <midi-input-chan> is the number of the new MIDI input channel
   where <sampler-channel> should listen to or "ALL" to listen on all 16
   MIDI channels.

   Possible Answers:

      "OK" -

         on success

      "WRN:<warning-code>:<warning-message>" -

         if MIDI input channel was set, but there are noteworthy
         issue(s) related, providing an appropriate warning code and
         warning message

      "ERR:<error-code>:<error-message>" -

         in case it failed, providing an appropriate error code and
         error message

   Examples:



6.4.21.  Setting channel volume

   The front-end can alter the volume of a sampler channel by sending
   the following command:

      SET CHANNEL VOLUME <sampler-channel> <volume>

   Where <volume> is an optionally dotted positive number (a value
   smaller than 1.0 means attenuation, whereas a value greater than 1.0
   means amplification) and <sampler-channel> defines the sampler
   channel where this volume factor should be set.

   Possible Answers:




Schoenebeck                Expires May 5, 2010                 [Page 59]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      "OK" -

         on success

      "WRN:<warning-code>:<warning-message>" -

         if channel volume was set, but there are noteworthy issue(s)
         related, providing an appropriate warning code and warning
         message

      "ERR:<error-code>:<error-message>" -

         in case it failed, providing an appropriate error code and
         error message

   Examples:



6.4.22.  Muting a sampler channel

   The front-end can mute/unmute a specific sampler channel by sending
   the following command:

      SET CHANNEL MUTE <sampler-channel> <mute>

   Where <sampler-channel> is the respective sampler channel number as
   returned by the "ADD CHANNEL" (Section 6.4.5) or "LIST CHANNELS"
   (Section 6.4.4) command and <mute> should be replaced either by "1"
   to mute the channel or "0" to unmute the channel.

   Possible Answers:

      "OK" -

         on success

      "WRN:<warning-code>:<warning-message>" -

         if the channel was muted/unmuted, but there are noteworthy
         issue(s) related, providing an appropriate warning code and
         warning message

      "ERR:<error-code>:<error-message>" -

         in case it failed, providing an appropriate error code and
         error message




Schoenebeck                Expires May 5, 2010                 [Page 60]

Internet-Draft        LinuxSampler Control Protocol        November 2009


   Examples:



6.4.23.  Soloing a sampler channel

   The front-end can solo/unsolo a specific sampler channel by sending
   the following command:

      SET CHANNEL SOLO <sampler-channel> <solo>

   Where <sampler-channel> is the respective sampler channel number as
   returned by the "ADD CHANNEL" (Section 6.4.5) or "LIST CHANNELS"
   (Section 6.4.4) command and <solo> should be replaced either by "1"
   to solo the channel or "0" to unsolo the channel.

   Possible Answers:

      "OK" -

         on success

      "WRN:<warning-code>:<warning-message>" -

         if the channel was soloed/unsoloed, but there are noteworthy
         issue(s) related, providing an appropriate warning code and
         warning message

      "ERR:<error-code>:<error-message>" -

         in case it failed, providing an appropriate error code and
         error message

   Examples:



6.4.24.  Assigning a MIDI instrument map to a sampler channel

   The front-end can assign a MIDI instrument map to a specific sampler
   channel by sending the following command:

      SET CHANNEL MIDI_INSTRUMENT_MAP <sampler-channel> <map>

   Where <sampler-channel> is the respective sampler channel number as
   returned by the "ADD CHANNEL" (Section 6.4.5) or "LIST CHANNELS"
   (Section 6.4.4) command and <map> can have the following
   possibilites:



Schoenebeck                Expires May 5, 2010                 [Page 61]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      "NONE" -

         This is the default setting.  In this case the sampler channel
         is not assigned any MIDI instrument map and thus will ignore
         all MIDI program change messages.

      "DEFAULT" -

         The sampler channel will always use the default MIDI instrument
         map to handle MIDI program change messages.

      numeric ID -

         You can assign a specific MIDI instrument map by replacing
         <map> with the respective numeric ID of the MIDI instrument map
         as returned by the "LIST MIDI_INSTRUMENT_MAPS" (Section 6.7.4)
         command.  Once that map will be deleted, the sampler channel
         would fall back to "NONE".

   Read chapter "MIDI Instrument Mapping" (Section 6.7) for details
   regarding MIDI instrument mapping.

   Possible Answers:

      "OK" -

         on success

      "ERR:<error-code>:<error-message>" -

         in case it failed, providing an appropriate error code and
         error message

   Examples:



6.4.25.  Adding an effect send to a sampler channel

   The front-end can create an additional effect send on a specific
   sampler channel by sending the following command:

      CREATE FX_SEND <sampler-channel> <midi-ctrl> [<name>]

   Where <sampler-channel> is the respective sampler channel number as
   returned by the "ADD CHANNEL" (Section 6.4.5) or "LIST CHANNELS"
   (Section 6.4.4) command, that is the sampler channel on which the
   effect send should be created on, <midi-ctrl> is a number between



Schoenebeck                Expires May 5, 2010                 [Page 62]

Internet-Draft        LinuxSampler Control Protocol        November 2009


   0..127 defining the MIDI controller which can alter the effect send
   level and <name> is an optional argument defining a name for the
   effect send entity.  The name does not have to be unique, but MUST be
   encapsulated into apostrophes and supports escape sequences as
   described in chapter "Character Set and Escape Sequences
   (Section 7.1)".

   By default, that is as initial routing, the effect send's audio
   channels are automatically routed to the last audio channels of the
   sampler channel's audio output device, that way you can i.e. first
   increase the amount of audio channels on the audio output device for
   having dedicated effect send output channels and when "CREATE
   FX_SEND" is called, those channels will automatically be picked.  You
   can alter the destination channels however with "SET FX_SEND
   AUDIO_OUTPUT_CHANNEL" (Section 6.4.31).

   Note: Create effect sends on a sampler channel only when needed,
   because having effect sends on a sampler channel will decrease
   runtime performance, because for implementing channel effect sends,
   separate (sampler channel local) audio buffers are needed to render
   and mix the voices and route the audio signal afterwards to the
   master outputs and effect send outputs (along with their respective
   effect send levels).  A sampler channel without effect sends however
   can mix its voices directly into the audio output devices's audio
   buffers and is thus faster.

   Possible Answers:

      "OK[<fx-send-id>]" -

         in case a new effect send could be added to the sampler
         channel, where <fx-send-id> reflects the unique ID of the newly
         created effect send entity

      "ERR:<error-code>:<error-message>" -

         when a new effect send could not be added, i.e. due to invalid
         parameters

   Examples:

      C: "CREATE FX_SEND 0 91 'Reverb Send'"

      S: "OK[0]"

      C: "CREATE FX_SEND 0 93"





Schoenebeck                Expires May 5, 2010                 [Page 63]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      S: "OK[1]"

6.4.26.  Removing an effect send from a sampler channel

   The front-end can remove an existing effect send on a specific
   sampler channel by sending the following command:

      DESTROY FX_SEND <sampler-channel> <fx-send-id>

   Where <sampler-channel> is the respective sampler channel number as
   returned by the "ADD CHANNEL" (Section 6.4.5) or "LIST CHANNELS"
   (Section 6.4.4) command, that is the sampler channel from which the
   effect send should be removed from and <fx-send-id> is the respective
   effect send number as returned by the "CREATE FX_SEND"
   (Section 6.4.25) or "LIST FX_SENDS" (Section 6.4.28) command.

   Possible Answers:

      "OK" -

         on success

      "ERR:<error-code>:<error-message>" -

         in case it failed, providing an appropriate error code and
         error message

   Example:

      C: "DESTROY FX_SEND 0 0"

      S: "OK"

6.4.27.  Getting amount of effect sends on a sampler channel

   The front-end can ask for the amount of effect sends on a specific
   sampler channel by sending the following command:

      GET FX_SENDS <sampler-channel>

   Where <sampler-channel> is the respective sampler channel number as
   returned by the "ADD CHANNEL" (Section 6.4.5) or "LIST CHANNELS"
   (Section 6.4.4) command.

   Possible Answers:






Schoenebeck                Expires May 5, 2010                 [Page 64]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      The sampler will answer by returning the number of effect sends on
      the given sampler channel.

   Example:

      C: "GET FX_SENDS 0"

      S: "2"

6.4.28.  Listing all effect sends on a sampler channel

   The front-end can ask for a list of effect sends on a specific
   sampler channel by sending the following command:

      LIST FX_SENDS <sampler-channel>

   Where <sampler-channel> is the respective sampler channel number as
   returned by the "ADD CHANNEL" (Section 6.4.5) or "LIST CHANNELS"
   (Section 6.4.4) command.

   Possible Answers:

      The sampler will answer by returning a comma separated list with
      all effect sends' numerical IDs on the given sampler channel.

   Examples:

      C: "LIST FX_SENDS 0"

      S: "0,1"

      C: "LIST FX_SENDS 1"

      S: ""

6.4.29.  Getting effect send information

   The front-end can ask for the current settings of an effect send
   entity by sending the following command:

      GET FX_SEND INFO <sampler-channel> <fx-send-id>

   Where <sampler-channel> is the sampler channel number as returned by
   the "ADD CHANNEL" (Section 6.4.5) or "LIST CHANNELS" (Section 6.4.4)
   command and <fx-send-id> reflects the numerical ID of the effect send
   entity as returned by the "CREATE FX_SEND" (Section 6.4.25) or "LIST
   FX_SENDS" (Section 6.4.28) command.




Schoenebeck                Expires May 5, 2010                 [Page 65]

Internet-Draft        LinuxSampler Control Protocol        November 2009


   Possible Answers:

      The sampler will answer by sending a <CRLF> separated list.  Each
      answer line begins with the settings category name followed by a
      colon and then a space character <SP> and finally the info
      character string to that setting category.  At the moment the
      following categories are defined:



         NAME -

            name of the effect send entity (note that this character
            string may contain escape sequences (Section 7.1))

         MIDI_CONTROLLER -

            a value between 0 and 127 reflecting the MIDI controller
            which is able to modify the effect send's send level

         LEVEL -

            optionally dotted number reflecting the effect send's
            current send level (where a value < 1.0 means attenuation
            and a value > 1.0 means amplification)

         AUDIO_OUTPUT_ROUTING -

            comma separated list which reflects to which audio channel
            of the selected audio output device each effect send output
            channel is routed to, e.g. "0,3" would mean the effect
            send's output channel 0 is routed to channel 0 of the audio
            output device and the effect send's output channel 1 is
            routed to the channel 3 of the audio output device (see "SET
            FX_SEND AUDIO_OUTPUT_CHANNEL" (Section 6.4.31) for details)

   The mentioned fields above don't have to be in particular order.

   Example:

      C: "GET FX_SEND INFO 0 0"

      S: "NAME: Reverb Send"

         "MIDI_CONTROLLER: 91"

         "LEVEL: 0.3"




Schoenebeck                Expires May 5, 2010                 [Page 66]

Internet-Draft        LinuxSampler Control Protocol        November 2009


         "AUDIO_OUTPUT_ROUTING: 2,3"

         "."

6.4.30.  Changing effect send's name

   The front-end can alter the current name of an effect send entity by
   sending the following command:

      SET FX_SEND NAME <sampler-chan> <fx-send-id> <name>

   Where <sampler-chan> is the sampler channel number as returned by the
   "ADD CHANNEL" (Section 6.4.5) or "LIST CHANNELS" (Section 6.4.4)
   command, <fx-send-id> reflects the numerical ID of the effect send
   entity as returned by the "CREATE FX_SEND" (Section 6.4.25) or "LIST
   FX_SENDS" (Section 6.4.28) command and <name> is the new name of the
   effect send entity, which does not have to be unique (name MUST be
   encapsulated into apostrophes and supports escape sequences as
   described in chapter "Character Set and Escape Sequences
   (Section 7.1)").

   Possible Answers:

      "OK" -

         on success

      "ERR:<error-code>:<error-message>" -

         in case it failed, providing an appropriate error code and
         error message

   Example:

      C: "SET FX_SEND NAME 0 0 'Fx Send 1'"

      S: "OK"

6.4.31.  Altering effect send's audio routing

   The front-end can alter the destination of an effect send's audio
   channel on a specific sampler channel by sending the following
   command:

      SET FX_SEND AUDIO_OUTPUT_CHANNEL <sampler-chan> <fx-send-id>
      <audio-src> <audio-dst>

   Where <sampler-chan> is the sampler channel number as returned by the



Schoenebeck                Expires May 5, 2010                 [Page 67]

Internet-Draft        LinuxSampler Control Protocol        November 2009


   "ADD CHANNEL" (Section 6.4.5) or "LIST CHANNELS" (Section 6.4.4)
   command, <fx-send-id> reflects the numerical ID of the effect send
   entity as returned by the "CREATE FX_SEND" (Section 6.4.25) or "LIST
   FX_SENDS" (Section 6.4.28) command, <audio-src> is the numerical ID
   of the effect send's audio channel which should be rerouted and
   <audio-dst> is the numerical ID of the audio channel of the selected
   audio output device where <audio-src> should be routed to.

   Note that effect sends can only route audio to the same audio output
   device as assigned to the effect send's sampler channel.  Also note
   that an effect send entity does always have exactly as much audio
   channels as its sampler channel.  So if the sampler channel is
   stereo, the effect send does have two audio channels as well.  Also
   keep in mind that the amount of audio channels on a sampler channel
   might be dependant not only to the deployed sampler engine on the
   sampler channel, but also dependant to the instrument currently
   loaded.  However you can (effectively) turn an i.e. stereo effect
   send into a mono one by simply altering its audio routing
   appropriately.

   Possible Answers:

      "OK" -

         on success

      "WRN:<warning-code>:<warning-message>" -

         if audio output channel was set, but there are noteworthy
         issue(s) related, providing an appropriate warning code and
         warning message

      "ERR:<error-code>:<error-message>" -

         in case it failed, providing an appropriate error code and
         error message

   Example:

      C: "SET FX_SEND AUDIO_OUTPUT_CHANNEL 0 0 0 2"

      S: "OK"

6.4.32.  Altering effect send's MIDI controller

   The front-end can alter the MIDI controller of an effect send entity
   by sending the following command:




Schoenebeck                Expires May 5, 2010                 [Page 68]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      SET FX_SEND MIDI_CONTROLLER <sampler-chan> <fx-send-id> <midi-
      ctrl>

   Where <sampler-chan> is the sampler channel number as returned by the
   "ADD CHANNEL" (Section 6.4.5) or "LIST CHANNELS" (Section 6.4.4)
   command, <fx-send-id> reflects the numerical ID of the effect send
   entity as returned by the "CREATE FX_SEND" (Section 6.4.25) or "LIST
   FX_SENDS" (Section 6.4.28) command and <midi-ctrl> reflects the MIDI
   controller which shall be able to modify the effect send's send
   level.

   Possible Answers:

      "OK" -

         on success

      "WRN:<warning-code>:<warning-message>" -

         if MIDI controller was set, but there are noteworthy issue(s)
         related, providing an appropriate warning code and warning
         message

      "ERR:<error-code>:<error-message>" -

         in case it failed, providing an appropriate error code and
         error message

   Example:

      C: "SET FX_SEND MIDI_CONTROLLER 0 0 91"

      S: "OK"

6.4.33.  Altering effect send's send level

   The front-end can alter the current send level of an effect send
   entity by sending the following command:

      SET FX_SEND LEVEL <sampler-chan> <fx-send-id> <volume>

   Where <sampler-chan> is the sampler channel number as returned by the
   "ADD CHANNEL" (Section 6.4.5) or "LIST CHANNELS" (Section 6.4.4)
   command, <fx-send-id> reflects the numerical ID of the effect send
   entity as returned by the "CREATE FX_SEND" (Section 6.4.25) or "LIST
   FX_SENDS" (Section 6.4.28) command and <volume> is an optionally
   dotted positive number (a value smaller than 1.0 means attenuation,
   whereas a value greater than 1.0 means amplification) reflecting the



Schoenebeck                Expires May 5, 2010                 [Page 69]

Internet-Draft        LinuxSampler Control Protocol        November 2009


   new send level.

   Possible Answers:

      "OK" -

         on success

      "WRN:<warning-code>:<warning-message>" -

         if new send level was set, but there are noteworthy issue(s)
         related, providing an appropriate warning code and warning
         message

      "ERR:<error-code>:<error-message>" -

         in case it failed, providing an appropriate error code and
         error message

   Example:

      C: "SET FX_SEND LEVEL 0 0 0.15"

      S: "OK"

6.4.34.  Sending MIDI messages to sampler channel

   The front-end can send MIDI events to a specific sampler channel by
   sending the following command:

      SEND CHANNEL MIDI_DATA <midi-msg> <sampler-chan> <arg1> <arg2>

   Where <sampler-chan> is the sampler channel number as returned by the
   "ADD CHANNEL" (Section 6.4.5) or "LIST CHANNELS" (Section 6.4.4)
   command, <arg1> and <arg2> arguments depend on the <midi-msg>
   argument, which specifies the MIDI message type.  Currently, the
   following MIDI messages are supported:

      "NOTE_ON" -

         For turning on MIDI notes, where <arg1> specifies the key
         number and <arg2> the velocity as described in the MIDI
         specification.

      "NOTE_OFF" -

         For turning a currently playing MIDI note off, where <arg1>
         specifies the key number and <arg2> the velocity as described



Schoenebeck                Expires May 5, 2010                 [Page 70]

Internet-Draft        LinuxSampler Control Protocol        November 2009


         in the MIDI specification.

      "CC" -

         For changing a MIDI controller, where <arg1> specifies the
         controller number and <arg2> the new value of the controller as
         described in the Control Change section of the MIDI
         specification.

   CAUTION: This command is provided for implementations of virtual MIDI
   keyboards and no realtime guarantee whatsoever will be made!

   Possible Answers:

      "OK" -

         on success

      "ERR:<error-code>:<error-message>" -

         in case it failed, providing an appropriate error code and
         error message

   Example:

      C: "SEND CHANNEL MIDI_DATA NOTE_ON 0 56 112"

      S: "OK"

6.4.35.  Resetting a sampler channel

   The front-end can reset a particular sampler channel by sending the
   following command:

      RESET CHANNEL <sampler-channel>

   Where <sampler-channel> defines the sampler channel to be reset.
   This will cause the engine on that sampler channel, its voices and
   eventually disk streams and all control and status variables to be
   reset.

   Possible Answers:

      "OK" -

         on success





Schoenebeck                Expires May 5, 2010                 [Page 71]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      "WRN:<warning-code>:<warning-message>" -

         if channel was reset, but there are noteworthy issue(s)
         related, providing an appropriate warning code and warning
         message

      "ERR:<error-code>:<error-message>" -

         in case it failed, providing an appropriate error code and
         error message

   Examples:



6.5.  Controlling connection

   The following commands are used to control the connection to
   LinuxSampler.

6.5.1.  Register front-end for receiving event messages

   The front-end can register itself to the LinuxSampler application to
   be informed about noteworthy events by sending this command:

      SUBSCRIBE <event-id>

   where <event-id> will be replaced by the respective event that client
   wants to subscribe to.

   Possible Answers:

      "OK" -

         on success

      "WRN:<warning-code>:<warning-message>" -

         if registration succeeded, but there are noteworthy issue(s)
         related, providing an appropriate warning code and warning
         message

      "ERR:<error-code>:<error-message>" -

         in case it failed, providing an appropriate error code and
         error message

   Examples:



Schoenebeck                Expires May 5, 2010                 [Page 72]

Internet-Draft        LinuxSampler Control Protocol        November 2009




6.5.2.  Unregister front-end for not receiving event messages

   The front-end can unregister itself if it doesn't want to receive
   event messages anymore by sending the following command:

      UNSUBSCRIBE <event-id>

   Where <event-id> will be replaced by the respective event that client
   doesn't want to receive anymore.

   Possible Answers:

      "OK" -

         on success

      "WRN:<warning-code>:<warning-message>" -

         if unregistration succeeded, but there are noteworthy issue(s)
         related, providing an appropriate warning code and warning
         message

      "ERR:<error-code>:<error-message>" -

         in case it failed, providing an appropriate error code and
         error message

   Examples:



6.5.3.  Enable or disable echo of commands

   To enable or disable back sending of commands to the client the
   following command can be used:

      SET ECHO <value>

   Where <value> should be replaced either by "1" to enable echo mode or
   "0" to disable echo mode.  When echo mode is enabled, all commands
   send to LinuxSampler will be immediately send back and after this
   echo the actual response to the command will be returned.  Echo mode
   will only be altered for the client connection that issued the "SET
   ECHO" command, not globally for all client connections.

   Possible Answers:



Schoenebeck                Expires May 5, 2010                 [Page 73]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      "OK" -

         usually

      "ERR:<error-code>:<error-message>" -

         on syntax error, e.g. non boolean value

   Examples:



6.5.4.  Close client connection

   The client can close its network connection to LinuxSampler by
   sending the following command:

      QUIT

   This is probably more interesting for manual telnet connections to
   LinuxSampler than really useful for a front-end implementation.

6.6.  Global commands

   The following commands have global impact on the sampler.

6.6.1.  Current number of active voices

   The front-end can ask for the current number of active voices on the
   sampler by sending the following command:

      GET TOTAL_VOICE_COUNT

   Possible Answers:

      LinuxSampler will answer by returning the number of all active
      voices on the sampler.

6.6.2.  Maximum amount of active voices

   The front-end can ask for the maximum number of active voices by
   sending the following command:

      GET TOTAL_VOICE_COUNT_MAX

   Possible Answers:





Schoenebeck                Expires May 5, 2010                 [Page 74]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      LinuxSampler will answer by returning the maximum number of active
      voices.

6.6.3.  Current number of active disk streams

   The front-end can ask for the current number of active disk streams
   on the sampler by sending the following command:

      GET TOTAL_STREAM_COUNT

   Possible Answers:

      LinuxSampler will answer by returning the number of all active
      disk streams on the sampler.

6.6.4.  Reset sampler

   The front-end can reset the whole sampler by sending the following
   command:

      RESET

   Possible Answers:

      "OK" -

         always

   Examples:



6.6.5.  General sampler informations

   The client can ask for general informations about the LinuxSampler
   instance by sending the following command:

      GET SERVER INFO

   Possible Answers:

      LinuxSampler will answer by sending a <CRLF> separated list.  Each
      answer line begins with the information category name followed by
      a colon and then a space character <SP> and finally the info
      character string to that information category.  At the moment the
      following categories are defined:





Schoenebeck                Expires May 5, 2010                 [Page 75]

Internet-Draft        LinuxSampler Control Protocol        November 2009




         DESCRIPTION -

            arbitrary textual description about the sampler (note that
            the character string may contain escape sequences
            (Section 7.1))

         VERSION -

            version of the sampler

         PROTOCOL_VERSION -

            version of the LSCP specification the sampler complies with
            (see Section 2 for details)

         INSTRUMENTS_DB_SUPPORT -

            either yes or no, specifies whether the sampler is build
            with instruments database support.

   The mentioned fields above don't have to be in particular order.
   Other fields might be added in future.

6.6.6.  Getting global volume attenuation

   The client can ask for the current global sampler-wide volume
   attenuation by sending the following command:

      GET VOLUME

   Possible Answers:

      The sampler will always answer by returning the optional dotted
      floating point coefficient, reflecting the current global volume
      attenuation.

   Note: it is up to the respective sampler engine whether to obey that
   global volume parameter or not, but in general all engines SHOULD use
   this parameter.

6.6.7.  Setting global volume attenuation

   The client can alter the current global sampler-wide volume
   attenuation by sending the following command:





Schoenebeck                Expires May 5, 2010                 [Page 76]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      SET VOLUME <volume>

   Where <volume> should be replaced by the optional dotted floating
   point value, reflecting the new global volume parameter.  This value
   might usually be in the range between 0.0 and 1.0, that is for
   attenuating the overall volume.

   Possible Answers:

      "OK" -

         on success

      "WRN:<warning-code>:<warning-message>" -

         if the global volume was set, but there are noteworthy issue(s)
         related, providing an appropriate warning code and warning
         message

      "ERR:<error-code>:<error-message>" -

         in case it failed, providing an appropriate error code and
         error message

6.6.8.  Getting global voice limit

   The client can ask for the current global sampler-wide limit for
   maximum voices by sending the following command:

      GET VOICES

   Possible Answers:

      LinuxSampler will answer by returning the number for the current
      limit of maximum voices.

   The voice limit setting defines how many voices should maximum be
   processed by the sampler at the same time.  If the user triggers new
   notes which would exceed that voice limit, the sampler engine will
   react by stealing old voices for those newly triggered notes.  Note
   that the amount of voices triggered by a new note can be larger than
   one and is dependent to the respective instrument and probably
   further criterias.

6.6.9.  Setting global voice limit

   The client can alter the current global sampler-wide limit for
   maximum voices by sending the following command:



Schoenebeck                Expires May 5, 2010                 [Page 77]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      SET VOICES <max-voices>

   Where <max-voices> should be replaced by the integer value,
   reflecting the new global amount limit of maximum voices.  This value
   has to be larger than 0.

   Possible Answers:

      "OK" -

         on success

      "WRN:<warning-code>:<warning-message>" -

         if the voice limit was set, but there are noteworthy issue(s)
         related, providing an appropriate warning code and warning
         message

      "ERR:<error-code>:<error-message>" -

         in case it failed, providing an appropriate error code and
         error message

   Note: the given value will be passed to all sampler engine instances.
   The total amount of maximum voices on the running system might thus
   be as big as the given value multiplied by the current amount of
   engine instances.

   Caution: when adjusting the voice limit, you SHOULD also adjust the
   disk stream limit respectively and vice versa.

6.6.10.  Getting global disk stream limit

   The client can ask for the current global sampler-wide limit for
   maximum disk streams by sending the following command:

      GET STREAMS

   Possible Answers:

      LinuxSampler will answer by returning the number for the current
      limit of maximum disk streams.

   The disk stream limit setting defines how many disk streams should
   maximum be processed by a sampler engine at the same time.  The
   higher this value, the more memory (RAM) will be occupied, since
   every disk streams allocates a certain buffer size for being able to
   perform its streaming operations.



Schoenebeck                Expires May 5, 2010                 [Page 78]

Internet-Draft        LinuxSampler Control Protocol        November 2009


6.6.11.  Setting global disk stream limit

   The client can alter the current global sampler-wide limit for
   maximum disk streams by sending the following command:

      SET STREAMS <max-streams>

   Where <max-streams> should be replaced by the integer value,
   reflecting the new global amount limit of maximum disk streams.  This
   value has to be positive.

   Possible Answers:

      "OK" -

         on success

      "WRN:<warning-code>:<warning-message>" -

         if the disk stream limit was set, but there are noteworthy
         issue(s) related, providing an appropriate warning code and
         warning message

      "ERR:<error-code>:<error-message>" -

         in case it failed, providing an appropriate error code and
         error message

   Note: the given value will be passed to all sampler engine instances.
   The total amount of maximum disk streams on the running system might
   thus be as big as the given value multiplied by the current amount of
   engine instances.

   Caution: when adjusting the disk stream limit, you SHOULD also adjust
   the voice limit respectively and vice versa.

6.7.  MIDI Instrument Mapping

   The MIDI protocol provides a way to switch between instruments by
   sending so called MIDI bank select and MIDI program change messages
   which are essentially just numbers.  The following commands allow to
   actually map arbitrary MIDI bank select / program change numbers with
   real instruments.

   The sampler allows to manage an arbitrary amount of MIDI instrument
   maps which define which instrument to load on which MIDI program
   change message.




Schoenebeck                Expires May 5, 2010                 [Page 79]

Internet-Draft        LinuxSampler Control Protocol        November 2009


   By default, that is when the sampler is launched, there is no map,
   thus the sampler will simply ignore all program change messages.  The
   front-end has to explicitly create at least one map, add entries to
   the map and tell the respective sampler channel(s) which MIDI
   instrument map to use, so the sampler knows how to react on a given
   program change message on the respective sampler channel, that is by
   switching to the respectively defined engine type and loading the
   respective instrument.  See command "SET CHANNEL MIDI_INSTRUMENT_MAP"
   (Section 6.4.24) for how to assign a MIDI instrument map to a sampler
   channel.

   Also note per MIDI specification a bank select message does not cause
   to switch to another instrument.  Instead when receiving a bank
   select message the bank value will be stored and a subsequent program
   change message (which may occur at any time) will finally cause the
   sampler to switch to the respective instrument as reflected by the
   current MIDI instrument map.

6.7.1.  Create a new MIDI instrument map

   The front-end can add a new MIDI instrument map by sending the
   following command:

      ADD MIDI_INSTRUMENT_MAP [<name>]

   Where <name> is an optional argument allowing to assign a custom name
   to the new map.  MIDI instrument Map names do not have to be unique,
   but MUST be encapsulated into apostrophes and support escape
   sequences as described in chapter "Character Set and Escape Sequences
   (Section 7.1)".

   Possible Answers:

      "OK[<map>]" -

         in case a new MIDI instrument map could be added, where <map>
         reflects the unique ID of the newly created MIDI instrument map

      "ERR:<error-code>:<error-message>" -

         when a new map could not be created, which might never occur in
         practice

   Examples:

      C: "ADD MIDI_INSTRUMENT_MAP 'Standard Map'"





Schoenebeck                Expires May 5, 2010                 [Page 80]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      S: "OK[0]"

      C: "ADD MIDI_INSTRUMENT_MAP 'Standard Drumkit'"

      S: "OK[1]"

      C: "ADD MIDI_INSTRUMENT_MAP"

      S: "OK[5]"

6.7.2.  Delete one particular or all MIDI instrument maps

   The front-end can delete a particular MIDI instrument map by sending
   the following command:

      REMOVE MIDI_INSTRUMENT_MAP <map>

   Where <map> reflects the unique ID of the map to delete as returned
   by the "LIST MIDI_INSTRUMENT_MAPS" (Section 6.7.4) command.

   The front-end can delete all MIDI instrument maps by sending the
   following command:

      REMOVE MIDI_INSTRUMENT_MAP ALL

   Possible Answers:

      "OK" -

         in case the map(s) could be deleted

      "ERR:<error-code>:<error-message>" -

         when the given map does not exist

   Examples:

      C: "REMOVE MIDI_INSTRUMENT_MAP 0"

      S: "OK"

      C: "REMOVE MIDI_INSTRUMENT_MAP ALL"

      S: "OK"







Schoenebeck                Expires May 5, 2010                 [Page 81]

Internet-Draft        LinuxSampler Control Protocol        November 2009


6.7.3.  Get amount of existing MIDI instrument maps

   The front-end can retrieve the current amount of MIDI instrument maps
   by sending the following command:

      GET MIDI_INSTRUMENT_MAPS

   Possible Answers:

      The sampler will answer by returning the current number of MIDI
      instrument maps.

   Example:

      C: "GET MIDI_INSTRUMENT_MAPS"

      S: "2"

6.7.4.  Getting all created MIDI instrument maps

   The number of MIDI instrument maps can change on runtime.  To get the
   current list of MIDI instrument maps, the front-end can send the
   following command:

      LIST MIDI_INSTRUMENT_MAPS

   Possible Answers:

      The sampler will answer by returning a comma separated list with
      all MIDI instrument maps' numerical IDs.

   Example:

      C: "LIST MIDI_INSTRUMENT_MAPS"

      S: "0,1,5,12"

6.7.5.  Getting MIDI instrument map information

   The front-end can ask for the current settings of a MIDI instrument
   map by sending the following command:

      GET MIDI_INSTRUMENT_MAP INFO <map>

   Where <map> is the numerical ID of the map the front-end is
   interested in as returned by the "LIST MIDI_INSTRUMENT_MAPS"
   (Section 6.7.4) command.




Schoenebeck                Expires May 5, 2010                 [Page 82]

Internet-Draft        LinuxSampler Control Protocol        November 2009


   Possible Answers:

      LinuxSampler will answer by sending a <CRLF> separated list.  Each
      answer line begins with the settings category name followed by a
      colon and then a space character <SP> and finally the info
      character string to that setting category.  At the moment the
      following categories are defined:



         NAME -

            custom name of the given map, which does not have to be
            unique (note that this character string may contain escape
            sequences (Section 7.1))

         DEFAULT -

            either true or false, defines whether this map is the
            default map

   The mentioned fields above don't have to be in particular order.

   Example:

      C: "GET MIDI_INSTRUMENT_MAP INFO 0"

      S: "NAME: Standard Map"

         "DEFAULT: true"

         "."

6.7.6.  Renaming a MIDI instrument map

   The front-end can alter the custom name of a MIDI instrument map by
   sending the following command:

      SET MIDI_INSTRUMENT_MAP NAME <map> <name>

   Where <map> is the numerical ID of the map and <name> the new custom
   name of the map, which does not have to be unique (name MUST be
   encapsulated into apostrophes and supports escape sequences as
   described in chapter "Character Set and Escape Sequences
   (Section 7.1)").

   Possible Answers:




Schoenebeck                Expires May 5, 2010                 [Page 83]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      "OK" -

         on success

      "ERR:<error-code>:<error-message>" -

         in case the given map does not exist

   Example:

      C: "SET MIDI_INSTRUMENT_MAP NAME 0 'Foo instruments'"

      S: "OK"

6.7.7.  Create or replace a MIDI instrument map entry

   The front-end can create a new or replace an existing entry in a
   sampler's MIDI instrument map by sending the following command:

      MAP MIDI_INSTRUMENT [NON_MODAL] <map> <midi_bank> <midi_prog>
      <engine_name> <filename> <instrument_index> <volume_value>
      [<instr_load_mode>] [<name>]

   Where <map> is the numeric ID of the map to alter, <midi_bank> is an
   integer value between 0..16383 reflecting the MIDI bank select index,
   <midi_prog> an integer value between 0..127 reflecting the MIDI
   program change index, <engine_name> a sampler engine name as returned
   by the "LIST AVAILABLE_ENGINES" (Section 6.4.8) command (not
   encapsulated into apostrophes), <filename> the name of the
   instrument's file to be deployed (encapsulated into apostrophes,
   supporting escape sequences as described in chapter "Character Set
   and Escape Sequences (Section 7.1)"), <instrument_index> the index
   (integer value) of the instrument within the given file,
   <volume_value> reflects the master volume of the instrument as
   optionally dotted number (where a value < 1.0 means attenuation and a
   value > 1.0 means amplification).  This parameter easily allows to
   adjust the volume of all intruments within a custom instrument map
   without having to adjust their instrument files.  The OPTIONAL
   <instr_load_mode> argument defines the life time of the instrument,
   that is when the instrument should be loaded, when freed and has
   exactly the following possibilities:

      "ON_DEMAND" -

         The instrument will be loaded when needed, that is when
         demanded by at least one sampler channel.  It will immediately
         be freed from memory when not needed by any sampler channel
         anymore.



Schoenebeck                Expires May 5, 2010                 [Page 84]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      "ON_DEMAND_HOLD" -

         The instrument will be loaded when needed, that is when
         demanded by at least one sampler channel.  It will be kept in
         memory even when not needed by any sampler channel anymore.
         Instruments with this mode are only freed when the sampler is
         reset or all mapping entries with this mode (and respective
         instrument) are explicitly changed to "ON_DEMAND" and no
         sampler channel is using the instrument anymore.

      "PERSISTENT" -

         The instrument will immediately be loaded into memory when this
         mapping command is sent and the instrument is kept all the
         time.  Instruments with this mode are only freed when the
         sampler is reset or all mapping entries with this mode (and
         respective instrument) are explicitly changed to "ON_DEMAND"
         and no sampler channel is using the instrument anymore.

      not supplied -

         In case there is no <instr_load_mode> argument given, it will
         be up to the InstrumentManager to decide which mode to use.
         Usually it will use "ON_DEMAND" if an entry for the given
         instrument does not exist in the InstrumentManager's list yet,
         otherwise if an entry already exists, it will simply stick with
         the mode currently reflected by the already existing entry,
         that is it will not change the mode.

   The <instr_load_mode> argument thus allows to define an appropriate
   strategy (low memory consumption vs. fast instrument switching) for
   each instrument individually.  Note, the following restrictions apply
   to this argument: "ON_DEMAND_HOLD" and "PERSISTENT" have to be
   supported by the respective sampler engine (which is technically the
   case when the engine provides an InstrumentManager for its format).
   If this is not the case the argument will automatically fall back to
   the default value "ON_DEMAND".  Also the load mode of one instrument
   may automatically change the laod mode of other instrument(s), i.e.
   because the instruments are part of the same file and the engine does
   not allow a way to manage load modes for them individually.  Due to
   this, in case the frontend shows the load modes of entries, the
   frontend should retrieve the actual mode by i.e. sending "GET
   MIDI_INSTRUMENT INFO" (Section 6.7.11) command(s).  Finally the
   OPTIONAL <name> argument allows to set a custom name (encapsulated
   into apostrophes, supporting escape sequences as described in chapter
   "Character Set and Escape Sequences (Section 7.1)") for the mapping
   entry, useful for frontends for displaying an appropriate name for
   mapped instruments (using "GET MIDI_INSTRUMENT INFO"



Schoenebeck                Expires May 5, 2010                 [Page 85]

Internet-Draft        LinuxSampler Control Protocol        November 2009


   (Section 6.7.11)).

   By default, "MAP MIDI_INSTRUMENT" commands block until the mapping is
   completely established in the sampler.  The OPTIONAL "NON_MODAL"
   argument however causes the respective "MAP MIDI_INSTRUMENT" command
   to return immediately, that is to let the sampler establish the
   mapping in the background.  So this argument might be especially
   useful for mappings with a "PERSISTENT" type, because these have to
   load the respective instruments immediately and might thus block for
   a very long time.  It is recommended however to use the OPTIONAL
   "NON_MODAL" argument only if really necessary, because it has the
   following drawbacks: as "NON_MODAL" instructions return immediately,
   they may not necessarily return an error i.e. when the given
   instrument file turns out to be corrupt, beside that subsequent
   commands in a LSCP instruction sequence might fail, because mandatory
   mappings are not yet completed.

   Possible Answers:

      "OK" -

         usually

      "ERR:<error-code>:<error-message>" -

         when the given map or engine does not exist or a value is out
         of range

   Examples:

      C: "MAP MIDI_INSTRUMENT 0 3 0 gig '/usr/share/Steinway D.gig' 0
      0.8 PERSISTENT"

      S: "OK"

      C: "MAP MIDI_INSTRUMENT 0 4 50 gig '/home/john/foostrings.gig' 7
      1.0"

      S: "OK"

      C: "MAP MIDI_INSTRUMENT 0 0 0 gig '/usr/share/piano.gig' 0 1.0
      'Normal Piano'"

      S: "OK"

      C: "MAP MIDI_INSTRUMENT 0 1 0 gig '/usr/share/piano.gig' 0 0.25
      'Silent Piano'"




Schoenebeck                Expires May 5, 2010                 [Page 86]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      S: "OK"

      C: "MAP MIDI_INSTRUMENT NON_MODAL 1 8 120 gig '/home/joe/
      foodrums.gig' 0 1.0 PERSISTENT 'Foo Drumkit'"

      S: "OK"

6.7.8.  Getting ammount of MIDI instrument map entries

   The front-end can query the amount of currently existing entries in a
   MIDI instrument map by sending the following command:

      GET MIDI_INSTRUMENTS <map>

   The front-end can query the amount of currently existing entries in
   all MIDI instrument maps by sending the following command:

      GET MIDI_INSTRUMENTS ALL

   Possible Answers:

      The sampler will answer by sending the current number of entries
      in the MIDI instrument map(s).

   Example:

      C: "GET MIDI_INSTRUMENTS 0"

      S: "234"

      C: "GET MIDI_INSTRUMENTS ALL"

      S: "954"

6.7.9.  Getting indeces of all entries of a MIDI instrument map

   The front-end can query a list of all currently existing entries in a
   certain MIDI instrument map by sending the following command:

      LIST MIDI_INSTRUMENTS <map>

   Where <map> is the numeric ID of the MIDI instrument map.

   The front-end can query a list of all currently existing entries of
   all MIDI instrument maps by sending the following command:






Schoenebeck                Expires May 5, 2010                 [Page 87]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      LIST MIDI_INSTRUMENTS ALL

   Possible Answers:

      The sampler will answer by sending a comma separated list of map
      ID - MIDI bank - MIDI program triples, where each triple is
      encapsulated into curly braces.  The list is returned in one
      single line.  Each triple just reflects the key of the respective
      map entry, thus subsequent "GET MIDI_INSTRUMENT INFO"
      (Section 6.7.11) command(s) are necessary to retrieve detailed
      informations about each entry.

   Example:

      C: "LIST MIDI_INSTRUMENTS 0"

      S: "{0,0,0},{0,0,1},{0,0,3},{0,1,4},{1,127,127}"

6.7.10.  Remove an entry from the MIDI instrument map

   The front-end can delete an entry from a MIDI instrument map by
   sending the following command:

      UNMAP MIDI_INSTRUMENT <map> <midi_bank> <midi_prog>

   Where <map> is the numeric ID of the MIDI instrument map, <midi_bank>
   is an integer value between 0..16383 reflecting the MIDI bank value
   and <midi_prog> an integer value between 0..127 reflecting the MIDI
   program value of the map's entrie's key index triple.

   Possible Answers:

      "OK" -

         usually

      "ERR:<error-code>:<error-message>" -

         when index out of bounds

   Example:

      C: "UNMAP MIDI_INSTRUMENT 0 2 127"

      S: "OK"






Schoenebeck                Expires May 5, 2010                 [Page 88]

Internet-Draft        LinuxSampler Control Protocol        November 2009


6.7.11.  Get current settings of MIDI instrument map entry

   The front-end can retrieve the current settings of a certain
   instrument map entry by sending the following command:

      GET MIDI_INSTRUMENT INFO <map> <midi_bank> <midi_prog>

   Where <map> is the numeric ID of the MIDI instrument map, <midi_bank>
   is an integer value between 0..16383 reflecting the MIDI bank value,
   <midi_bank> and <midi_prog> an integer value between 0..127
   reflecting the MIDI program value of the map's entrie's key index
   triple.

   Possible Answers:

      LinuxSampler will answer by sending a <CRLF> separated list.  Each
      answer line begins with the information category name followed by
      a colon and then a space character <SP> and finally the info
      character string to that info category.  At the moment the
      following categories are defined:

      "NAME" -

         Name for this MIDI instrument map entry (if defined).  This
         name shall be used by frontends for displaying a name for this
         mapped instrument.  It can be set and changed with the "MAP
         MIDI_INSTRUMENT" (Section 6.7.7) command and does not have to
         be unique. (note that this character string may contain escape
         sequences (Section 7.1))

      "ENGINE_NAME" -

         Name of the engine to be deployed for this instrument.

      "INSTRUMENT_FILE" -

         File name of the instrument (note that this path may contain
         escape sequences (Section 7.1)).

      "INSTRUMENT_NR" -

         Index of the instrument within the file.

      "INSTRUMENT_NAME" -

         Name of the loaded instrument as reflected by its file.  In
         contrast to the "NAME" field, the "INSTRUMENT_NAME" field
         cannot be changed (note that this character string may contain



Schoenebeck                Expires May 5, 2010                 [Page 89]

Internet-Draft        LinuxSampler Control Protocol        November 2009


         escape sequences (Section 7.1)).

      "LOAD_MODE" -

         Life time of instrument (see "MAP MIDI_INSTRUMENT"
         (Section 6.7.7) for details about this setting).

      "VOLUME" -

         master volume of the instrument as optionally dotted number
         (where a value < 1.0 means attenuation and a value > 1.0 means
         amplification)

      The mentioned fields above don't have to be in particular order.

   Example:

      C: "GET MIDI_INSTRUMENT INFO 1 45 120"

      S: "NAME: Drums for Foo Song"

         "ENGINE_NAME: GigEngine"

         "INSTRUMENT_FILE: /usr/share/joesdrumkit.gig"

         "INSTRUMENT_NR: 0"

         "INSTRUMENT_NAME: Joe's Drumkit"

         "LOAD_MODE: PERSISTENT"

         "VOLUME: 1.0"

         "."

6.7.12.  Clear MIDI instrument map

   The front-end can clear a whole MIDI instrument map, that is delete
   all its entries by sending the following command:

      CLEAR MIDI_INSTRUMENTS <map>

   Where <map> is the numeric ID of the map to clear.

   The front-end can clear all MIDI instrument maps, that is delete all
   entries of all maps by sending the following command:





Schoenebeck                Expires May 5, 2010                 [Page 90]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      CLEAR MIDI_INSTRUMENTS ALL

   The command "CLEAR MIDI_INSTRUMENTS ALL" does not delete the maps,
   only their entries, thus the map's settings like custom name will be
   preservevd.

   Possible Answers:

      "OK" -

         always

   Examples:

      C: "CLEAR MIDI_INSTRUMENTS 0"

      S: "OK"

      C: "CLEAR MIDI_INSTRUMENTS ALL"

      S: "OK"

6.8.  Managing Instruments Database

   The following commands describe how to use and manage the instruments
   database.

   Notice:

      All command arguments representing a path or instrument/directory
      name support escape sequences as described in chapter "Character
      Set and Escape Sequences (Section 7.1)".

      All occurrences of a forward slash in instrument and directory
      names are escaped with its hex (\x2f) or octal (\057) escape
      sequence.

6.8.1.  Creating a new instrument directory

   The front-end can add a new instrument directory to the instruments
   database by sending the following command:

      ADD DB_INSTRUMENT_DIRECTORY <dir>

   Where <dir> is the absolute path name of the directory to be created
   (encapsulated into apostrophes).

   Possible Answers:



Schoenebeck                Expires May 5, 2010                 [Page 91]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      "OK" -

         on success

      "ERR:<error-code>:<error-message>" -

         when the directory could not be created, which can happen if
         the directory already exists or the name contains not allowed
         symbols

   Examples:

      C: "ADD DB_INSTRUMENT_DIRECTORY '/Piano Collection'"

      S: "OK"

6.8.2.  Deleting an instrument directory

   The front-end can delete a particular instrument directory from the
   instruments database by sending the following command:

      REMOVE DB_INSTRUMENT_DIRECTORY [FORCE] <dir>

   Where <dir> is the absolute path name of the directory to delete.
   The optional FORCE argument can be used to force the deletion of a
   non-empty directory and all its content.

   Possible Answers:

      "OK" -

         if the directory is deleted successfully

      "ERR:<error-code>:<error-message>" -

         if the given directory does not exist, or if trying to delete a
         non-empty directory, without using the FORCE argument.

   Examples:

      C: "REMOVE DB_INSTRUMENT_DIRECTORY FORCE '/Piano Collection'"

      S: "OK"








Schoenebeck                Expires May 5, 2010                 [Page 92]

Internet-Draft        LinuxSampler Control Protocol        November 2009


6.8.3.  Getting amount of instrument directories

   The front-end can retrieve the current amount of directories in a
   specific directory by sending the following command:

      GET DB_INSTRUMENT_DIRECTORIES [RECURSIVE] <dir>

   Where <dir> should be replaced by the absolute path name of the
   directory.  If RECURSIVE is specified, the number of all directories,
   including those located in subdirectories of the specified directory,
   will be returned.

   Possible Answers:

      The current number of instrument directories in the specified
      directory.

      "ERR:<error-code>:<error-message>" -

         if the given directory does not exist.

   Example:

      C: "GET DB_INSTRUMENT_DIRECTORIES '/'"

      S: "2"

6.8.4.  Listing all directories in specific directory

   The front-end can retrieve the current list of directories in
   specific directory by sending the following command:

      LIST DB_INSTRUMENT_DIRECTORIES [RECURSIVE] <dir>

   Where <dir> should be replaced by the absolute path name of the
   directory.  If RECURSIVE is specified, the absolute path names of all
   directories, including those located in subdirectories of the
   specified directory, will be returned.

   Possible Answers:

      A comma separated list of all instrument directories (encapsulated
      into apostrophes) in the specified directory.

      "ERR:<error-code>:<error-message>" -

         if the given directory does not exist.




Schoenebeck                Expires May 5, 2010                 [Page 93]

Internet-Draft        LinuxSampler Control Protocol        November 2009


   Example:

      C: "LIST DB_INSTRUMENT_DIRECTORIES '/'"

      S: "'Piano Collection','Percussion Collection'"

      C: "LIST DB_INSTRUMENT_DIRECTORIES RECURSIVE '/'"

      S: "'/Piano Collection','/Piano Collection/Acoustic','/Piano
      Collection/Acoustic/New','/Percussion Collection'"

6.8.5.  Getting instrument directory information

   The front-end can ask for the current settings of an instrument
   directory by sending the following command:

      GET DB_INSTRUMENT_DIRECTORY INFO <dir>

   Where <dir> should be replaced by the absolute path name of the
   directory the front-end is interested in.

   Possible Answers:

      LinuxSampler will answer by sending a <CRLF> separated list.  Each
      answer line begins with the settings category name followed by a
      colon and then a space character <SP> and finally the info
      character string to that setting category.  At the moment the
      following categories are defined:



         DESCRIPTION -

            A brief description of the directory content.  Note that the
            character string may contain escape sequences (Section 7.1).

         CREATED -

            The creation date and time of the directory, represented in
            "YYYY-MM-DD HH:MM:SS" format

         MODIFIED -

            The date and time of the last modification of the directory,
            represented in "YYYY-MM-DD HH:MM:SS" format

   The mentioned fields above don't have to be in particular order.




Schoenebeck                Expires May 5, 2010                 [Page 94]

Internet-Draft        LinuxSampler Control Protocol        November 2009


   Example:

      C: "GET DB_INSTRUMENT_DIRECTORY INFO '/Piano Collection'"

      S: "DESCRIPTION: Piano collection of instruments in GigaSampler
      format."

         "CREATED: 2007-02-05 10:23:12"

         "MODIFIED: 2007-04-07 12:50:21"

         "."

6.8.6.  Renaming an instrument directory

   The front-end can alter the name of a specific instrument directory
   by sending the following command:

      SET DB_INSTRUMENT_DIRECTORY NAME <dir> <name>

   Where <dir> is the absolute path name of the directory and <name> is
   the new name for that directory.

   Possible Answers:

      "OK" -

         on success

      "ERR:<error-code>:<error-message>" -

         in case the given directory does not exists, or if a directory
         with name equal to the new name already exists.

   Example:

      C: "SET DB_INSTRUMENT_DIRECTORY NAME '/Piano Collection/Acustic'
      'Acoustic'"

      S: "OK"

6.8.7.  Moving an instrument directory

   The front-end can move a specific instrument directory by sending the
   following command:






Schoenebeck                Expires May 5, 2010                 [Page 95]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      MOVE DB_INSTRUMENT_DIRECTORY <dir> <dst>

   Where <dir> is the absolute path name of the directory to move and
   <dst> is the location where the directory will be moved to.

   Possible Answers:

      "OK" -

         on success

      "ERR:<error-code>:<error-message>" -

         in case a given directory does not exists, or if a directory
         with name equal to the name of the specified directory already
         exists in the destination directory.  Error is also thrown when
         trying to move a directory to a subdirectory of itself.

   Example:

      C: "MOVE DB_INSTRUMENT_DIRECTORY '/Acoustic' '/Piano Collection/
      Acoustic'"

      S: "OK"

6.8.8.  Copying instrument directories

   The front-end can copy a specific instrument directory by sending the
   following command:

      COPY DB_INSTRUMENT_DIRECTORY <dir> <dst>

   Where <dir> is the absolute path name of the directory to copy and
   <dst> is the location where the directory will be copied to.

   Possible Answers:

      "OK" -

         on success

      "ERR:<error-code>:<error-message>" -

         in case a given directory does not exists, or if a directory
         with name equal to the name of the specified directory already
         exists in the destination directory.  Error is also thrown when
         trying to copy a directory to a subdirectory of itself.




Schoenebeck                Expires May 5, 2010                 [Page 96]

Internet-Draft        LinuxSampler Control Protocol        November 2009


   Example:

      C: "COPY DB_INSTRUMENT_DIRECTORY '/Piano Collection/Acoustic'
      '/Acoustic/Pianos'"

      S: "OK"

6.8.9.  Changing the description of directory

   The front-end can alter the description of a specific instrument
   directory by sending the following command:

      SET DB_INSTRUMENT_DIRECTORY DESCRIPTION <dir> <desc>

   Where <dir> is the absolute path name of the directory and <desc> is
   the new description for the directory (encapsulated into apostrophes,
   supporting escape sequences as described in chapter "Character Set
   and Escape Sequences (Section 7.1)").

   Possible Answers:

      "OK" -

         on success

      "ERR:<error-code>:<error-message>" -

         in case the given directory does not exists.

   Example:

      C: "SET DB_INSTRUMENT_DIRECTORY DESCRIPTION '/Piano Collection' 'A
      collection of piano instruments in various format.'"

      S: "OK"

6.8.10.  Finding directories

   The front-end can search for directories in specific directory by
   sending the following command:

      FIND DB_INSTRUMENT_DIRECTORIES [NON_RECURSIVE] <dir> <criteria-
      list>

   Where <dir> should be replaced by the absolute path name of the
   directory to search in.  If NON_RECURSIVE is specified, the
   directories located in subdirectories of the specified directory will
   not be searched. <criteria-list> is a list of search criterias in



Schoenebeck                Expires May 5, 2010                 [Page 97]

Internet-Draft        LinuxSampler Control Protocol        November 2009


   form of "key1=val1 key2=val2 ...".  The following criterias are
   allowed:

   NAME='<search-string>'

      Restricts the search to directories, which names satisfy the
      supplied search string (encapsulated into apostrophes, supporting
      escape sequences as described in chapter "Character Set and Escape
      Sequences (Section 7.1)").

   CREATED='[<date-after>]..[<date-before>]'

      Restricts the search to directories, which creation date satisfies
      the specified period, where <date-after> and <date-before> are in
      "YYYY-MM-DD HH:MM:SS" format.  If <date-after> is omitted the
      search is restricted to directories created before <date-before>.
      If <date-before> is omitted, the search is restricted to
      directories created after <date-after>.

   MODIFIED='[<date-after>]..[<date-before>]'

      Restricts the search to directories, which date of last
      modification satisfies the specified period, where <date-after>
      and <date-before> are in "YYYY-MM-DD HH:MM:SS" format.  If <date-
      after> is omitted the search is restricted to directories, which
      are last modified before <date-before>.  If <date-before> is
      omitted, the search is restricted to directories, which are last
      modified after <date-after>.

   DESCRIPTION='<search-string>'

      Restricts the search to directories with description that
      satisfies the supplied search string (encapsulated into
      apostrophes, supporting escape sequences as described in chapter
      "Character Set and Escape Sequences (Section 7.1)").

   Where <search-string> is either a regular expression, or a word list
   separated with spaces for OR search and with '+' for AND search.

   Possible Answers:

      A comma separated list with the absolute path names (encapsulated
      into apostrophes) of all directories in the specified directory
      that satisfy the supplied search criterias.

      "ERR:<error-code>:<error-message>" -





Schoenebeck                Expires May 5, 2010                 [Page 98]

Internet-Draft        LinuxSampler Control Protocol        November 2009


         if the given directory does not exist.

   Example:

      C: "FIND DB_INSTRUMENT_DIRECTORIES '/' NAME='Piano'"

      S: "'/Piano Collection'"

      C: "FIND DB_INSTRUMENT_DIRECTORIES '/' CREATED='..2007-04-01 09:
      30:13'"

      S: "'/Piano Collection','/Percussions'"

6.8.11.  Adding instruments to the instruments database

   The front-end can add one or more instruments to the instruments
   database by sending the following command:

      ADD DB_INSTRUMENTS [NON_MODAL] [<mode>[ FILE_AS_DIR]] <db_dir>
      <file_path> [<instr_index>]

   Where <db_dir> is the absolute path name of a directory (encapsulated
   into apostrophes) in the instruments database in which only the new
   instruments (that are not already in the database) will be added,
   <file_path> is the absolute path name of a file or directory in the
   file system (encapsulated into apostrophes).  In case an instrument
   file is supplied, only the instruments in the specified file will be
   added to the instruments database.  If the optional <instr_index>
   (the index of the instrument within the given file) is supplied too,
   then only the specified instrument will be added.  In case a
   directory is supplied, the instruments in that directory will be
   added.  The OPTIONAL <mode> argument is only applied when a directory
   is provided as <file_path> and specifies how the scanning will be
   done and has exactly the following possibilities:

      "RECURSIVE" -

         All instruments will be processed, including those in the
         subdirectories, and the respective subdirectory tree structure
         will be recreated in the instruments database

      "NON_RECURSIVE" -

         Only the instruments in the specified directory will be added,
         the instruments in the subdirectories will not be processed.






Schoenebeck                Expires May 5, 2010                 [Page 99]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      "FLAT" -

         All instruments will be processed, including those in the
         subdirectories, but the respective subdirectory structure will
         not be recreated in the instruments database.  All instruments
         will be added directly in the specified database directory.

   If FILE_AS_DIR argument is supplied, all instruments in an instrument
   file will be added to a separate directory in the instruments
   database, which name will be the name of the instrument file with the
   file extension stripped off.

   The difference between regular and NON_MODAL versions of the command
   is that the regular command returns when the scanning is finished
   while NON_MODAL version returns immediately and a background process
   is launched.  The GET DB_INSTRUMENTS_JOB INFO (Section 6.8.21)
   command can be used to monitor the scanning progress.

   Possible Answers:

      "OK" -

         on success when NON_MODAL is not supplied

      "OK[<job-id>]" -

         on success when NON_MODAL is supplied, where <job-id> is a
         numerical ID used to obtain status information about the job
         progress.  See GET DB_INSTRUMENTS_JOB INFO (Section 6.8.21)

      "ERR:<error-code>:<error-message>" -

         if an invalid path is specified.

   Examples:

      C: "ADD DB_INSTRUMENTS '/Piano Collection' '/home/me/gigs/PMI
      Bosendorfer 290.gig' 0"

      S: "OK"

6.8.12.  Removing an instrument

   The front-end can remove a particular instrument from the instruments
   database by sending the following command:






Schoenebeck                Expires May 5, 2010                [Page 100]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      REMOVE DB_INSTRUMENT <instr_path>

   Where <instr_path> is the absolute path name (in the instruments
   database) of the instrument to remove.

   Possible Answers:

      "OK" -

         if the instrument is removed successfully

      "ERR:<error-code>:<error-message>" -

         if the given path does not exist or is a directory.

   Examples:

      C: "REMOVE DB_INSTRUMENT '/Piano Collection/Bosendorfer 290'"

      S: "OK"

6.8.13.  Getting amount of instruments

   The front-end can retrieve the current amount of instruments in a
   specific directory by sending the following command:

      GET DB_INSTRUMENTS [RECURSIVE] <dir>

   Where <dir> should be replaced by the absolute path name of the
   directory.  If RECURSIVE is specified, the number of all instruments,
   including those located in subdirectories of the specified directory,
   will be returned.

   Possible Answers:

      The current number of instruments in the specified directory.

      "ERR:<error-code>:<error-message>" -

         if the given directory does not exist.

   Example:

      C: "GET DB_INSTRUMENTS '/Piano Collection'"

      S: "2"





Schoenebeck                Expires May 5, 2010                [Page 101]

Internet-Draft        LinuxSampler Control Protocol        November 2009


6.8.14.  Listing all instruments in specific directory

   The front-end can retrieve the current list of instruments in
   specific directory by sending the following command:

      LIST DB_INSTRUMENTS [RECURSIVE] <dir>

   Where <dir> should be replaced by the absolute path name of the
   directory.  If RECURSIVE is specified, the absolute path names of all
   instruments, including those located in subdirectories of the
   specified directory, will be returned.

   Possible Answers:

      A comma separated list of all instruments (encapsulated into
      apostrophes) in the specified directory.

      "ERR:<error-code>:<error-message>" -

         if the given directory does not exist.

   Example:

      C: "LIST DB_INSTRUMENTS '/Piano Collection'"

      S: "'Bosendorfer 290','Steinway D'"

      C: "LIST DB_INSTRUMENTS RECURSIVE '/Piano Collection'"

      S: "'/Piano Collection/Bosendorfer 290','/Piano Collection/
      Steinway D','/Piano Collection/Lite/Free Piano'"

6.8.15.  Getting instrument information

   The front-end can ask for the current settings of an instrument by
   sending the following command:

      GET DB_INSTRUMENT INFO <instr_path>

   Where <instr_path> should be replaced by the absolute path name of
   the instrument the front-end is interested in.

   Possible Answers:

      LinuxSampler will answer by sending a <CRLF> separated list.  Each
      answer line begins with the settings category name followed by a
      colon and then a space character <SP> and finally the info
      character string to that setting category.  At the moment the



Schoenebeck                Expires May 5, 2010                [Page 102]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      following categories are defined:



         INSTRUMENT_FILE -

            File name of the instrument.  Note that the character string
            may contain escape sequences (Section 7.1).

         INSTRUMENT_NR -

            Index of the instrument within the file.

         FORMAT_FAMILY -

            The format family of the instrument.

         FORMAT_VERSION -

            The format version of the instrument.

         SIZE -

            The size of the instrument in bytes.

         CREATED -

            The date and time when the instrument is added in the
            instruments database, represented in "YYYY-MM-DD HH:MM:SS"
            format

         MODIFIED -

            The date and time of the last modification of the
            instrument's database settings, represented in "YYYY-MM-DD
            HH:MM:SS" format

         DESCRIPTION -

            A brief description of the instrument.  Note that the
            character string may contain escape sequences (Section 7.1).

         IS_DRUM -

            either true or false, determines whether the instrument is a
            drumkit or a chromatic instrument





Schoenebeck                Expires May 5, 2010                [Page 103]

Internet-Draft        LinuxSampler Control Protocol        November 2009


         PRODUCT -

            The product title of the instrument.  Note that the
            character string may contain escape sequences (Section 7.1).

         ARTISTS -

            Lists the artist names.  Note that the character string may
            contain escape sequences (Section 7.1).

         KEYWORDS -

            Provides a list of keywords that refer to the instrument.
            Keywords are separated with semicolon and blank.  Note that
            the character string may contain escape sequences
            (Section 7.1).

   The mentioned fields above don't have to be in particular order.

   Example:

      C: "GET DB_INSTRUMENT INFO '/Piano Collection/Bosendorfer 290'"

      S: "INSTRUMENT_FILE: /home/me/gigs/Bosendorfer 290.gig"

         "INSTRUMENT_NR: 0"

         "FORMAT_FAMILY: GIG"

         "FORMAT_VERSION: 2"

         "SIZE: 2050871870"

         "CREATED: 2007-02-05 10:23:12"

         "MODIFIED: 2007-04-07 12:50:21"

         "DESCRIPTION: "

         "IS_DRUM: false"

         "PRODUCT: GRANDIOSO Bosendorfer 290"

         "ARTISTS: Post Musical Instruments"

         "KEYWORDS: Bosendorfer"





Schoenebeck                Expires May 5, 2010                [Page 104]

Internet-Draft        LinuxSampler Control Protocol        November 2009


         "."

6.8.16.  Renaming an instrument

   The front-end can alter the name of a specific instrument by sending
   the following command:

      SET DB_INSTRUMENT NAME <instr> <name>

   Where <instr> is the absolute path name of the instrument and <name>
   is the new name for that instrument.

   Possible Answers:

      "OK" -

         on success

      "ERR:<error-code>:<error-message>" -

         in case the given instrument does not exists, or if an
         instrument with name equal to the new name already exists.

   Example:

      C: "SET DB_INSTRUMENT NAME '/Piano Collection/Bosendorfer'
      'Bosendorfer 290'"

      S: "OK"

6.8.17.  Moving an instrument

   The front-end can move a specific instrument to another directory by
   sending the following command:

      MOVE DB_INSTRUMENT <instr> <dst>

   Where <instr> is the absolute path name of the instrument to move and
   <dst> is the directory where the instrument will be moved to.

   Possible Answers:

      "OK" -

         on success






Schoenebeck                Expires May 5, 2010                [Page 105]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      "ERR:<error-code>:<error-message>" -

         in case the given instrument does not exists, or if an
         instrument with name equal to the name of the specified
         instrument already exists in the destination directory.

   Example:

      C: "MOVE DB_INSTRUMENT '/Piano Collection/Bosendorfer 290' '/Piano
      Collection/Acoustic'"

      S: "OK"

6.8.18.  Copying instruments

   The front-end can copy a specific instrument to another directory by
   sending the following command:

      COPY DB_INSTRUMENT <instr> <dst>

   Where <instr> is the absolute path name of the instrument to copy and
   <dst> is the directory where the instrument will be copied to.

   Possible Answers:

      "OK" -

         on success

      "ERR:<error-code>:<error-message>" -

         in case the given instrument does not exists, or if an
         instrument with name equal to the name of the specified
         instrument already exists in the destination directory.

   Example:

      C: "COPY DB_INSTRUMENT '/Piano Collection/Bosendorfer 290'
      '/Acoustic/Pianos/'"

      S: "OK"

6.8.19.  Changing the description of instrument

   The front-end can alter the description of a specific instrument by
   sending the following command:





Schoenebeck                Expires May 5, 2010                [Page 106]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      SET DB_INSTRUMENT DESCRIPTION <instr> <desc>

   Where <instr> is the absolute path name of the instrument and <desc>
   is the new description for the instrument (encapsulated into
   apostrophes, supporting escape sequences as described in chapter
   "Character Set and Escape Sequences (Section 7.1)").

   Possible Answers:

      "OK" -

         on success

      "ERR:<error-code>:<error-message>" -

         in case the given instrument does not exists.

   Example:

      C: "SET DB_INSTRUMENT DESCRIPTION '/Piano Collection/Acoustic/
      Bosendorfer 290' 'No comment :)'"

      S: "OK"

6.8.20.  Finding instruments

   The front-end can search for instruments in specific directory by
   sending the following command:

      FIND DB_INSTRUMENTS [NON_RECURSIVE] <dir> <criteria-list>

   Where <dir> should be replaced by the absolute path name of the
   directory to search in.  If NON_RECURSIVE is specified, the
   directories located in subdirectories of the specified directory will
   not be searched. <criteria-list> is a list of search criterias in
   form of "key1=val1 key2=val2 ...".  The following criterias are
   allowed:

   NAME='<search-string>'

      Restricts the search to instruments, which names satisfy the
      supplied search string (encapsulated into apostrophes, supporting
      escape sequences as described in chapter "Character Set and Escape
      Sequences (Section 7.1)").

   SIZE=[<min>]..[<max>]





Schoenebeck                Expires May 5, 2010                [Page 107]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      Restricts the search to instruments, which size is in the
      specified range.  If <min> is omitted, the search results are
      restricted to instruments with size less then or equal to <max>.
      If <max> is omitted, the search is restricted to instruments with
      size greater then or equal to <min>.

   CREATED='[<date-after>]..[<date-before>]'

      Restricts the search to instruments, which creation date satisfies
      the specified period, where <date-after> and <date-before> are in
      "YYYY-MM-DD HH:MM:SS" format.  If <date-after> is omitted the
      search is restricted to instruments created before <date-before>.
      If <date-before> is omitted, the search is restricted to
      instruments created after <date-after>.

   MODIFIED='[<date-after>]..[<date-before>]'

      Restricts the search to instruments, which date of last
      modification satisfies the specified period, where <date-after>
      and <date-before> are in "YYYY-MM-DD HH:MM:SS" format.  If <date-
      after> is omitted the search is restricted to instruments, which
      are last modified before <date-before>.  If <date-before> is
      omitted, the search is restricted to instruments, which are last
      modified after <date-after>.

   DESCRIPTION='<search-string>'

      Restricts the search to instruments with description that
      satisfies the supplied search string (encapsulated into
      apostrophes, supporting escape sequences as described in chapter
      "Character Set and Escape Sequences (Section 7.1)").

   PRODUCT='<search-string>'

      Restricts the search to instruments with product info that
      satisfies the supplied search string (encapsulated into
      apostrophes, supporting escape sequences as described in chapter
      "Character Set and Escape Sequences (Section 7.1)").

   ARTISTS='<search-string>'

      Restricts the search to instruments with artists info that
      satisfies the supplied search string (encapsulated into
      apostrophes, supporting escape sequences as described in chapter
      "Character Set and Escape Sequences (Section 7.1)").

   KEYWORDS='<search-string>'




Schoenebeck                Expires May 5, 2010                [Page 108]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      Restricts the search to instruments with keyword list that
      satisfies the supplied search string (encapsulated into
      apostrophes, supporting escape sequences as described in chapter
      "Character Set and Escape Sequences (Section 7.1)").

   IS_DRUM=true | false

      Either true or false.  Restricts the search to drum kits or
      chromatic instruments.

   FORMAT_FAMILIES='<format-list>'

      Restricts the search to instruments of the supplied format
      families, where <format-list> is a comma separated list of format
      families.

   Where <search-string> is either a regular expression, or a word list
   separated with spaces for OR search and with '+' for AND search.

   Possible Answers:

      A comma separated list with the absolute path names (encapsulated
      into apostrophes) of all instruments in the specified directory
      that satisfy the supplied search criterias.

      "ERR:<error-code>:<error-message>" -

         if the given directory does not exist.

   Example:

      C: "FIND DB_INSTRUMENTS '/Piano Collection' NAME='bosendorfer+
      290'"

      S: "'/Piano Collection/Bosendorfer 290'"

      C: "FIND DB_INSTRUMENTS '/Piano Collection' CREATED='2007-04-01
      09:30:13..'"

      S: "'/Piano Collection/Bosendorfer 290','/Piano Collection/
      Steinway D'"

6.8.21.  Getting job status information

   The front-end can ask for the current status of a particular database
   instruments job by sending the following command:





Schoenebeck                Expires May 5, 2010                [Page 109]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      GET DB_INSTRUMENTS_JOB INFO <job-id>

   Where <job-id> should be replaced by the numerical ID of the job the
   front-end is interested in.

   Possible Answers:

      LinuxSampler will answer by sending a <CRLF> separated list.  Each
      answer line begins with the settings category name followed by a
      colon and then a space character <SP> and finally the info
      character string to that setting category.  At the moment the
      following categories are defined:



         FILES_TOTAL -

            The total number of files scheduled for scanning

         FILES_SCANNED -

            The current number of scanned files

         SCANNING -

            The absolute path name of the file which is currently being
            scanned

         STATUS -

            An integer value between 0 and 100 indicating the scanning
            progress percentage of the file which is currently being
            scanned

   The mentioned fields above don't have to be in particular order.

   Example:

      C: "GET DB_INSTRUMENTS_JOB INFO 2"

      S: "FILES_TOTAL: 12"

         "FILES_SCANNED: 7"

         "SCANNING: /home/me/gigs/Bosendorfer 290.gig"

         "STATUS: 42"




Schoenebeck                Expires May 5, 2010                [Page 110]

Internet-Draft        LinuxSampler Control Protocol        November 2009


         "."

6.8.22.  Formatting the instruments database

   The front-end can remove all instruments and directories and re-
   create the instruments database structure (e.g., in case of a
   database corruption) by sending the following command:

      FORMAT INSTRUMENTS_DB

   Possible Answers:

      "OK" -

         on success

      "ERR:<error-code>:<error-message>" -

         If the formatting of the instruments database failed.

6.8.23.  Checking for lost instrument files

   The front-end can retrieve the list of all instrument files in the
   instruments database that don't exist in the filesystem by sending
   the following command:

      FIND LOST DB_INSTRUMENT_FILES

   Possible Answers:

      A comma separated list with the absolute path names (encapsulated
      into apostrophes) of all lost instrument files.

      "ERR:<error-code>:<error-message>" -

         in case it failed, providing an appropriate error code and
         error message.

   Example:

      C: "FIND LOST DB_INSTRUMENT_FILES"

      S: "'/gigs/Bosendorfer 290.gig','/gigs/Steinway D.gig','/gigs/Free
      Piano.gig'"







Schoenebeck                Expires May 5, 2010                [Page 111]

Internet-Draft        LinuxSampler Control Protocol        November 2009


6.8.24.  Replacing an instrument file

   The front-end can substitute all occurrences of an instrument file in
   the instruments database with a new one by sending the following
   command:

      SET DB_INSTRUMENT FILE_PATH <old_path> <new_path>

   Where <old_path> is the absolute path name of the instrument file to
   substitute with <new_path>.

   Possible Answers:

      "OK" -

         on success

      "ERR:<error-code>:<error-message>" -

         in case it failed, providing an appropriate error code and
         error message.

   Example:

      C: "SET DB_INSTRUMENT FILE_PATH '/gigs/Bosendorfer 290.gig'
      '/gigs/pianos/Bosendorfer 290.gig'"

      S: "OK"

6.9.  Editing Instruments

   The sampler allows to edit instruments while playing with the sampler
   by spawning an external (3rd party) instrument editor application for
   a given instrument.  The 3rd party instrument editor applications
   have to place a respective plugin DLL file into the sampler's plugins
   directory.  The sampler will automatically try to load all plugin
   DLLs in that directory on startup and only on startup!

   At the moment there is only one command for this feature set, but
   this will most probably change in future.

6.9.1.  Opening an appropriate instrument editor application

   The front-end can request to open an appropriate instrument editor
   application by sending the following command:






Schoenebeck                Expires May 5, 2010                [Page 112]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      EDIT CHANNEL INSTRUMENT <sampler-channel>

   Where <sampler-channel> should be replaced by the number of the
   sampler channel as given by the "ADD CHANNEL" (Section 6.4.5) or
   "LIST CHANNELS" (Section 6.4.4) command.

   The sampler will try to ask all registered instrument editors (or to
   be more specific: their sampler plugins) whether they are capable to
   handle the instrument on the given sampler channel.  The sampler will
   simply use the first instrument editor application which replied with
   a positive answer and spawn that instrument editor application within
   the sampler's process and provide that application access to the
   instrument's data structures, so both applications can share and
   access the same instruments data at the same time, thus allowing to
   immediately hear changes with the sampler made by the instrument
   editor.

   Note: consequently instrument editors are always spawned locally on
   the same machine where the sampler is running on!

   Possible Answers:

      "OK" -

         when an appropriate instrument editor was launched

      "WRN:<warning-code>:<warning-message>" -

         when an appropriate instrument editor was launched, but there
         are noteworthy issues

      "ERR:<error-code>:<error-message>" -

         when an appropriate instrument editor could not be launched

   Examples:

      C: "EDIT CHANNEL INSTRUMENT 0"

      S: "OK"

6.10.  Managing Files

   You can query detailed informations about files located at the same
   system where the sampler instance is running on.  Using this command
   set allows to retrieve file informations even remotely from another
   machine.




Schoenebeck                Expires May 5, 2010                [Page 113]

Internet-Draft        LinuxSampler Control Protocol        November 2009


6.10.1.  Retrieving amount of instruments of a file

   The front-end can retrieve the amount of instruments within a given
   instrument file by sending the following command:

      GET FILE INSTRUMENTS <filename>

   Where <filename> is the name of the instrument file (encapsulated
   into apostrophes, supporting escape sequences as described in chapter
   "Character Set and Escape Sequences (Section 7.1)").

   The sampler will try to ask all sampler engines, whether they support
   the given file and ask the first engine with a positive answer for
   the amount of instruments.

   Possible Answers:

      On success, the sampler will answer by returning the amount of
      instruments.

      "ERR:<error-code>:<error-message>" -

         if the file could not be handled

   Examples:

      C: "GET FILE INSTRUMENTS 'D:/Sounds/Foo.gig'"

      S: "10"

6.10.2.  Retrieving all instruments of a file

   The front-end can retrieve a list of all instruments within a given
   instrument file by sending the following command:

      LIST FILE INSTRUMENTS <filename>

   Where <filename> is the name of the instrument file (encapsulated
   into apostrophes, supporting escape sequences as described in chapter
   "Character Set and Escape Sequences (Section 7.1)").

   The sampler will try to ask all sampler engines, whether they support
   the given file and ask the first engine with a positive answer for a
   list of IDs for the instruments in the given file.

   Possible Answers:





Schoenebeck                Expires May 5, 2010                [Page 114]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      On success, the sampler will answer by returning a comma separated
      list of instrument IDs.

      "ERR:<error-code>:<error-message>" -

         if the file could not be handled

   Examples:

      C: "LIST FILE INSTRUMENTS 'D:/Sounds/Foo.gig'"

      S: "0,1,2,3,4,5,6,7,8,9"

6.10.3.  Retrieving informations about one instrument in a file

   The front-end can retrieve detailed informations about a specific
   instrument within a given instrument file by sending the following
   command:

      GET FILE INSTRUMENT INFO <filename> <instr-id>

   Where <filename> is the name of the instrument file (encapsulated
   into apostrophes, supporting escape sequences as described in chapter
   "Character Set and Escape Sequences (Section 7.1)") and <instr-id> is
   the numeric instrument ID as returned by the "LIST FILE INSTRUMENTS"
   (Section 6.10.2) command.

   The sampler will try to ask all sampler engines, whether they support
   the given file and ask the first engine with a positive answer for
   informations about the specific instrument in the given file.

   Possible Answers:

      LinuxSampler will answer by sending a <CRLF> separated list.  Each
      answer line begins with the settings category name followed by a
      colon and then a space character <SP> and finally the info
      character string to that setting category.  At the moment the
      following categories are defined:



         NAME -

            name of the instrument as stored in the instrument file

         FORMAT_FAMILY -





Schoenebeck                Expires May 5, 2010                [Page 115]

Internet-Draft        LinuxSampler Control Protocol        November 2009


            name of the sampler format of the given instrument

         FORMAT_VERSION -

            version of the sampler format the instrumen is stored as

         PRODUCT -

            official product name of the instrument as stored in the
            file

         ARTISTS -

            artists / sample library vendor of the instrument

         KEY_BINDINGS -

            comma separated list of integer values representing the
            instrument's key mapping in the range between 0 .. 127,
            reflecting the analog meaning of the MIDI specification.

         KEYSWITCH_BINDINGS -

            comma separated list of integer values representing the
            instrument's keyswitch mapping in the range between 0 ..
            127, reflecting the analog meaning of the MIDI
            specification.

   The mentioned fields above don't have to be in particular order.

   Example:

      C: "GET FILE INSTRUMENT INFO 'D:/Sounds/Foo.gig' 0"

      S: "NAME: Lunatic Loops"

         "FORMAT_FAMILY: GIG"

         "FORMAT_VERSION: 3"

         "PRODUCT: The Backbone Bongo Beats"

         "ARTISTS: Jimmy the Fish"

         "."






Schoenebeck                Expires May 5, 2010                [Page 116]

Internet-Draft        LinuxSampler Control Protocol        November 2009


7.  Command Syntax

   The grammar of the control protocol as descibed in Section 6 is
   defined below using Backus-Naur Form (BNF as described in [RFC2234])
   where applicable.

   input =

      line LF

      / line CR LF

   line =

      /* epsilon (empty line ignored) */

      / comment

      / command

      / error

   comment =

      '#'

      / comment '#'

      / comment SP

      / comment number

      / comment string

   command =

      ADD SP add_instruction

      / MAP SP map_instruction

      / UNMAP SP unmap_instruction

      / GET SP get_instruction

      / CREATE SP create_instruction

      / DESTROY SP destroy_instruction




Schoenebeck                Expires May 5, 2010                [Page 117]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      / LIST SP list_instruction

      / LOAD SP load_instruction

      / REMOVE SP remove_instruction

      / SET SP set_instruction

      / SUBSCRIBE SP subscribe_event

      / UNSUBSCRIBE SP unsubscribe_event

      / RESET SP reset_instruction

      / CLEAR SP clear_instruction

      / FIND SP find_instruction

      / MOVE SP move_instruction

      / COPY SP copy_instruction

      / EDIT SP edit_instruction

      / FORMAT SP format_instruction

      / SEND SP send_instruction

      / RESET

      / QUIT

   add_instruction =

      CHANNEL

      / DB_INSTRUMENT_DIRECTORY SP db_path

      / DB_INSTRUMENTS SP NON_MODAL SP scan_mode SP db_path SP filename

      / DB_INSTRUMENTS SP NON_MODAL SP scan_mode SP FILE_AS_DIR SP
      db_path SP filename

      / DB_INSTRUMENTS SP scan_mode SP db_path SP filename

      / DB_INSTRUMENTS SP scan_mode SP FILE_AS_DIR SP db_path SP
      filename




Schoenebeck                Expires May 5, 2010                [Page 118]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      / DB_INSTRUMENTS SP NON_MODAL SP db_path SP filename

      / DB_INSTRUMENTS SP NON_MODAL SP db_path SP filename SP
      instrument_index

      / DB_INSTRUMENTS SP db_path SP filename

      / DB_INSTRUMENTS SP db_path SP filename SP instrument_index

      / MIDI_INSTRUMENT_MAP

      / MIDI_INSTRUMENT_MAP SP map_name

   subscribe_event =

      AUDIO_OUTPUT_DEVICE_COUNT

      / AUDIO_OUTPUT_DEVICE_INFO

      / MIDI_INPUT_DEVICE_COUNT

      / MIDI_INPUT_DEVICE_INFO

      / CHANNEL_COUNT

      / CHANNEL_MIDI

      / DEVICE_MIDI

      / VOICE_COUNT

      / STREAM_COUNT

      / BUFFER_FILL

      / CHANNEL_INFO

      / FX_SEND_COUNT

      / FX_SEND_INFO

      / MIDI_INSTRUMENT_MAP_COUNT

      / MIDI_INSTRUMENT_MAP_INFO

      / MIDI_INSTRUMENT_COUNT





Schoenebeck                Expires May 5, 2010                [Page 119]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      / MIDI_INSTRUMENT_INFO

      / DB_INSTRUMENT_DIRECTORY_COUNT

      / DB_INSTRUMENT_DIRECTORY_INFO

      / DB_INSTRUMENT_COUNT

      / DB_INSTRUMENT_INFO

      / DB_INSTRUMENTS_JOB_INFO

      / MISCELLANEOUS

      / TOTAL_STREAM_COUNT

      / TOTAL_VOICE_COUNT

      / GLOBAL_INFO

   unsubscribe_event =

      AUDIO_OUTPUT_DEVICE_COUNT

      / AUDIO_OUTPUT_DEVICE_INFO

      / MIDI_INPUT_DEVICE_COUNT

      / MIDI_INPUT_DEVICE_INFO

      / CHANNEL_COUNT

      / CHANNEL_MIDI

      / DEVICE_MIDI

      / VOICE_COUNT

      / STREAM_COUNT

      / BUFFER_FILL

      / CHANNEL_INFO

      / FX_SEND_COUNT

      / FX_SEND_INFO




Schoenebeck                Expires May 5, 2010                [Page 120]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      / MIDI_INSTRUMENT_MAP_COUNT

      / MIDI_INSTRUMENT_MAP_INFO

      / MIDI_INSTRUMENT_COUNT

      / MIDI_INSTRUMENT_INFO

      / DB_INSTRUMENT_DIRECTORY_COUNT

      / DB_INSTRUMENT_DIRECTORY_INFO

      / DB_INSTRUMENT_COUNT

      / DB_INSTRUMENT_INFO

      / DB_INSTRUMENTS_JOB_INFO

      / MISCELLANEOUS

      / TOTAL_STREAM_COUNT

      / TOTAL_VOICE_COUNT

      / GLOBAL_INFO

   map_instruction =

      MIDI_INSTRUMENT SP modal_arg midi_map SP midi_bank SP midi_prog SP
      engine_name SP filename SP instrument_index SP volume_value

      / MIDI_INSTRUMENT SP modal_arg midi_map SP midi_bank SP midi_prog
      SP engine_name SP filename SP instrument_index SP volume_value SP
      instr_load_mode

      / MIDI_INSTRUMENT SP modal_arg midi_map SP midi_bank SP midi_prog
      SP engine_name SP filename SP instrument_index SP volume_value SP
      entry_name

      / MIDI_INSTRUMENT SP modal_arg midi_map SP midi_bank SP midi_prog
      SP engine_name SP filename SP instrument_index SP volume_value SP
      instr_load_mode SP entry_name

   unmap_instruction =

      MIDI_INSTRUMENT SP midi_map SP midi_bank SP midi_prog

   remove_instruction =



Schoenebeck                Expires May 5, 2010                [Page 121]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      CHANNEL SP sampler_channel

      / MIDI_INSTRUMENT_MAP SP midi_map

      / MIDI_INSTRUMENT_MAP SP ALL

      / DB_INSTRUMENT_DIRECTORY SP FORCE SP db_path

      / DB_INSTRUMENT_DIRECTORY SP db_path

      / DB_INSTRUMENT SP db_path

   get_instruction =

      AVAILABLE_ENGINES

      / AVAILABLE_MIDI_INPUT_DRIVERS

      / MIDI_INPUT_DRIVER SP INFO SP string

      / MIDI_INPUT_DRIVER_PARAMETER SP INFO SP string SP string

      / MIDI_INPUT_DRIVER_PARAMETER SP INFO SP string SP string SP
      key_val_list

      / AVAILABLE_AUDIO_OUTPUT_DRIVERS

      / AUDIO_OUTPUT_DRIVER SP INFO SP string

      / AUDIO_OUTPUT_DRIVER_PARAMETER SP INFO SP string SP string

      / AUDIO_OUTPUT_DRIVER_PARAMETER SP INFO SP string SP string SP
      key_val_list

      / AUDIO_OUTPUT_DEVICES

      / MIDI_INPUT_DEVICES

      / AUDIO_OUTPUT_DEVICE SP INFO SP number

      / MIDI_INPUT_DEVICE SP INFO SP number

      / MIDI_INPUT_PORT SP INFO SP number SP number

      / MIDI_INPUT_PORT_PARAMETER SP INFO SP number SP number SP string

      / AUDIO_OUTPUT_CHANNEL SP INFO SP number SP number




Schoenebeck                Expires May 5, 2010                [Page 122]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      / AUDIO_OUTPUT_CHANNEL_PARAMETER SP INFO SP number SP number SP
      string

      / CHANNELS

      / CHANNEL SP INFO SP sampler_channel

      / CHANNEL SP BUFFER_FILL SP buffer_size_type SP sampler_channel

      / CHANNEL SP STREAM_COUNT SP sampler_channel

      / CHANNEL SP VOICE_COUNT SP sampler_channel

      / ENGINE SP INFO SP engine_name

      / SERVER SP INFO

      / TOTAL_STREAM_COUNT

      / TOTAL_VOICE_COUNT

      / TOTAL_VOICE_COUNT_MAX

      / MIDI_INSTRUMENTS SP midi_map

      / MIDI_INSTRUMENTS SP ALL

      / MIDI_INSTRUMENT SP INFO SP midi_map SP midi_bank SP midi_prog

      / MIDI_INSTRUMENT_MAPS

      / MIDI_INSTRUMENT_MAP SP INFO SP midi_map

      / FX_SENDS SP sampler_channel

      / FX_SEND SP INFO SP sampler_channel SP fx_send_id

      / DB_INSTRUMENT_DIRECTORIES SP RECURSIVE SP db_path

      / DB_INSTRUMENT_DIRECTORIES SP db_path

      / DB_INSTRUMENT_DIRECTORY SP INFO SP db_path

      / DB_INSTRUMENTS SP RECURSIVE SP db_path

      / DB_INSTRUMENTS SP db_path





Schoenebeck                Expires May 5, 2010                [Page 123]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      / DB_INSTRUMENT SP INFO SP db_path

      / DB_INSTRUMENTS_JOB SP INFO SP number

      / VOLUME

      / VOICES

      / STREAMS

      / FILE SP INSTRUMENTS SP filename

      / FILE SP INSTRUMENT SP INFO SP filename SP instrument_index

   set_instruction =

      AUDIO_OUTPUT_DEVICE_PARAMETER SP number SP string '='
      param_val_list

      / AUDIO_OUTPUT_CHANNEL_PARAMETER SP number SP number SP string '='
      param_val_list

      / MIDI_INPUT_DEVICE_PARAMETER SP number SP string '='
      param_val_list

      / MIDI_INPUT_PORT_PARAMETER SP number SP number SP string '=' NONE

      / MIDI_INPUT_PORT_PARAMETER SP number SP number SP string '='
      param_val_list

      / CHANNEL SP set_chan_instruction

      / MIDI_INSTRUMENT_MAP SP NAME SP midi_map SP map_name

      / FX_SEND SP NAME SP sampler_channel SP fx_send_id SP fx_send_name

      / FX_SEND SP AUDIO_OUTPUT_CHANNEL SP sampler_channel SP fx_send_id
      SP audio_channel_index SP audio_channel_index

      / FX_SEND SP MIDI_CONTROLLER SP sampler_channel SP fx_send_id SP
      midi_ctrl

      / FX_SEND SP LEVEL SP sampler_channel SP fx_send_id SP
      volume_value

      / DB_INSTRUMENT_DIRECTORY SP NAME SP db_path SP stringval_escaped





Schoenebeck                Expires May 5, 2010                [Page 124]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      / DB_INSTRUMENT_DIRECTORY SP DESCRIPTION SP db_path SP
      stringval_escaped

      / DB_INSTRUMENT SP NAME SP db_path SP stringval_escaped

      / DB_INSTRUMENT SP DESCRIPTION SP db_path SP stringval_escaped

      / DB_INSTRUMENT SP FILE_PATH SP filename SP filename

      / ECHO SP boolean

      / VOLUME SP volume_value

      / VOICES SP number

      / STREAMS SP number

   create_instruction =

      AUDIO_OUTPUT_DEVICE SP string SP key_val_list

      / AUDIO_OUTPUT_DEVICE SP string

      / MIDI_INPUT_DEVICE SP string SP key_val_list

      / MIDI_INPUT_DEVICE SP string

      / FX_SEND SP sampler_channel SP midi_ctrl

      / FX_SEND SP sampler_channel SP midi_ctrl SP fx_send_name

   reset_instruction =

      CHANNEL SP sampler_channel

   clear_instruction =

      MIDI_INSTRUMENTS SP midi_map

      / MIDI_INSTRUMENTS SP ALL

   find_instruction =

      DB_INSTRUMENTS SP NON_RECURSIVE SP db_path SP query_val_list

      / DB_INSTRUMENTS SP db_path SP query_val_list





Schoenebeck                Expires May 5, 2010                [Page 125]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      / DB_INSTRUMENT_DIRECTORIES SP NON_RECURSIVE SP db_path SP
      query_val_list

      / DB_INSTRUMENT_DIRECTORIES SP db_path SP query_val_list

      / LOST SP DB_INSTRUMENT_FILES

   move_instruction =

      DB_INSTRUMENT_DIRECTORY SP db_path SP db_path

      / DB_INSTRUMENT SP db_path SP db_path

   copy_instruction =

      DB_INSTRUMENT_DIRECTORY SP db_path SP db_path

      / DB_INSTRUMENT SP db_path SP db_path

   destroy_instruction =

      AUDIO_OUTPUT_DEVICE SP number

      / MIDI_INPUT_DEVICE SP number

      / FX_SEND SP sampler_channel SP fx_send_id

   load_instruction =

      INSTRUMENT SP load_instr_args

      / ENGINE SP load_engine_args

   set_chan_instruction =

      AUDIO_OUTPUT_DEVICE SP sampler_channel SP device_index

      / AUDIO_OUTPUT_CHANNEL SP sampler_channel SP audio_channel_index
      SP audio_channel_index

      / AUDIO_OUTPUT_TYPE SP sampler_channel SP audio_output_type_name

      / MIDI_INPUT SP sampler_channel SP device_index SP
      midi_input_port_index SP midi_input_channel_index

      / MIDI_INPUT_DEVICE SP sampler_channel SP device_index





Schoenebeck                Expires May 5, 2010                [Page 126]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      / MIDI_INPUT_PORT SP sampler_channel SP midi_input_port_index

      / MIDI_INPUT_CHANNEL SP sampler_channel SP
      midi_input_channel_index

      / MIDI_INPUT_TYPE SP sampler_channel SP midi_input_type_name

      / VOLUME SP sampler_channel SP volume_value

      / MUTE SP sampler_channel SP boolean

      / SOLO SP sampler_channel SP boolean

      / MIDI_INSTRUMENT_MAP SP sampler_channel SP midi_map

      / MIDI_INSTRUMENT_MAP SP sampler_channel SP NONE

      / MIDI_INSTRUMENT_MAP SP sampler_channel SP DEFAULT

   edit_instruction =

      CHANNEL SP INSTRUMENT SP sampler_channel

   format_instruction =

      INSTRUMENTS_DB

   modal_arg =

      /* epsilon (empty argument) */

      / NON_MODAL SP

   key_val_list =

      string '=' param_val_list

      / key_val_list SP string '=' param_val_list

   buffer_size_type =

      BYTES

      / PERCENTAGE

   list_instruction =





Schoenebeck                Expires May 5, 2010                [Page 127]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      AUDIO_OUTPUT_DEVICES

      / MIDI_INPUT_DEVICES

      / CHANNELS

      / AVAILABLE_ENGINES

      / AVAILABLE_MIDI_INPUT_DRIVERS

      / AVAILABLE_AUDIO_OUTPUT_DRIVERS

      / MIDI_INSTRUMENTS SP midi_map

      / MIDI_INSTRUMENTS SP ALL

      / MIDI_INSTRUMENT_MAPS

      / FX_SENDS SP sampler_channel

      / DB_INSTRUMENT_DIRECTORIES SP RECURSIVE SP db_path

      / DB_INSTRUMENT_DIRECTORIES SP db_path

      / DB_INSTRUMENTS SP RECURSIVE SP db_path

      / DB_INSTRUMENTS SP db_path

      / FILE SP INSTRUMENTS SP filename

   send_instruction =

      CHANNEL SP MIDI_DATA SP string SP sampler_channel SP number SP
      number

   load_instr_args =

      filename SP instrument_index SP sampler_channel

      / NON_MODAL SP filename SP instrument_index SP sampler_channel

   load_engine_args =

      engine_name SP sampler_channel

   instr_load_mode =





Schoenebeck                Expires May 5, 2010                [Page 128]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      ON_DEMAND

      / ON_DEMAND_HOLD

      / PERSISTENT

   device_index =

      number

   audio_channel_index =

      number

   audio_output_type_name =

      string

   midi_input_port_index =

      number

   midi_input_channel_index =

      number

      / ALL

   midi_input_type_name =

      string

   midi_map =

      number

   midi_bank =

      number

   midi_prog =

      number

   midi_ctrl =

      number




Schoenebeck                Expires May 5, 2010                [Page 129]

Internet-Draft        LinuxSampler Control Protocol        November 2009


   volume_value =

      dotnum

      / number

   sampler_channel =

      number

   instrument_index =

      number

   fx_send_id =

      number

   engine_name =

      string

   filename =

      path

   db_path =

      path

   map_name =

      stringval_escaped

   entry_name =

      stringval_escaped

   fx_send_name =

      stringval_escaped

   param_val_list =

      param_val

      / param_val_list','param_val




Schoenebeck                Expires May 5, 2010                [Page 130]

Internet-Draft        LinuxSampler Control Protocol        November 2009


   param_val =

      string

      / stringval

      / number

      / dotnum

   query_val_list =

      string '=' query_val

      / query_val_list SP string '=' query_val

   query_val =

      text_escaped

      / stringval_escaped

   scan_mode =

      RECURSIVE

      / NON_RECURSIVE

      / FLAT

7.1.  Character Set and Escape Sequences

   Older versions of this protocol up to and including v1.1 only
   supported the standard ASCII character set (ASCII code 0 - 127)
   [RFC20], all younger versions of this protocol however support the
   Extended ASCII character set (ASCII code 0 - 255).  The same group of
   younger protocols also support escape sequences, but only for
   certain, explicitly declared parts of the protocol.  The supported
   escape sequences are defined as follows:












Schoenebeck                Expires May 5, 2010                [Page 131]

Internet-Draft        LinuxSampler Control Protocol        November 2009


   +------------------------+------------------------------------------+
   | ASCII Character        | Translated into (Name)                   |
   | Sequence               |                                          |
   +------------------------+------------------------------------------+
   | \n                     | new line                                 |
   |                        |                                          |
   | \r                     | carriage return                          |
   |                        |                                          |
   | \f                     | form feed                                |
   |                        |                                          |
   | \t                     | horizontal tab                           |
   |                        |                                          |
   | \v                     | vertical tab                             |
   |                        |                                          |
   | \'                     | apostrophe                               |
   |                        |                                          |
   | \"                     | quotation mark                           |
   |                        |                                          |
   | \\                     | backslash                                |
   |                        |                                          |
   | \OOO                   | three digit octal ASCII code of the      |
   |                        | character                                |
   |                        |                                          |
   | \xHH                   | two digit hex ASCII code of the          |
   |                        | character                                |
   +------------------------+------------------------------------------+

   Notice: due to the transition of certain parts of the protocol which
   now support escape sequences, a slight backward incompatibility to
   protocols version v1.1 and younger has been introduced.  The only
   difference is that in parts of the protocol where escape characters
   are now supported, a backslash characters MUST be escaped as well
   (that is as double backslash), whereas in the old versions a single
   backslash was sufficient.

   The following LSCP commands support escape sequences as part of their
   filename / path based arguments and / or may contain a filename /
   path with escape sequences in their response:

      "LOAD INSTRUMENT" (Section 6.4.1)

      "GET CHANNEL INFO" (Section 6.4.10)

      "MAP MIDI_INSTRUMENT" (Section 6.7.7)

      "GET MIDI_INSTRUMENT INFO" (Section 6.7.11)





Schoenebeck                Expires May 5, 2010                [Page 132]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      "ADD DB_INSTRUMENT_DIRECTORY" (Section 6.8.1)

      "ADD DB_INSTRUMENTS" (Section 6.8.11)

      "REMOVE DB_INSTRUMENT_DIRECTORY" (Section 6.8.2)

      "REMOVE DB_INSTRUMENT" (Section 6.8.12)

      "GET DB_INSTRUMENT_DIRECTORIES" (Section 6.8.3)

      "LIST DB_INSTRUMENT_DIRECTORIES" (Section 6.8.4)

      "GET DB_INSTRUMENT_DIRECTORY INFO" (Section 6.8.5)

      "GET DB_INSTRUMENTS" (Section 6.8.13)

      "LIST DB_INSTRUMENTS" (Section 6.8.14)

      "GET DB_INSTRUMENT INFO" (Section 6.8.15)

      "SET DB_INSTRUMENT_DIRECTORY NAME" (Section 6.8.6)

      "SET DB_INSTRUMENT_DIRECTORY DESCRIPTION" (Section 6.8.9)

      "SET DB_INSTRUMENT NAME" (Section 6.8.16)

      "SET DB_INSTRUMENT DESCRIPTION" (Section 6.8.19)

      "FIND DB_INSTRUMENTS" (Section 6.8.20)

      "FIND DB_INSTRUMENT_DIRECTORIES" (Section 6.8.10)

      "MOVE DB_INSTRUMENT" (Section 6.8.17)

      "MOVE DB_INSTRUMENT_DIRECTORY" (Section 6.8.7)

      "COPY DB_INSTRUMENT" (Section 6.8.18)

      "COPY DB_INSTRUMENT_DIRECTORY" (Section 6.8.8)

      "FIND LOST DB_INSTRUMENT_FILES" (Section 6.8.23)

      "SET DB_INSTRUMENT FILE_PATH" (Section 6.8.24)

      "GET FILE INSTRUMENTS" (Section 6.10.1)

      "LIST FILE INSTRUMENTS" (Section 6.10.2)




Schoenebeck                Expires May 5, 2010                [Page 133]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      "GET FILE INSTRUMENT INFO" (Section 6.10.3)

   Note that the forward slash character ('/') has a special meaning in
   filename / path based arguments: it acts as separator of the nodes in
   the path, thus if a directory- or filename includes a forward slash
   (not intended as path node separator), you MUST escape that slash
   either with the respective hex escape sequence ("\x2f") or with the
   respective octal escape sequence ("\057").

   Note for Windows: file path arguments in LSCP are expected to use
   forward slashes as directory node separator similar to Unix based
   operating systems.  In contrast to Unix however a Windows typical
   drive character is expected to be prefixed to the path.  That is an
   original Windows file path like "D:\Sounds\My.gig" would become in
   LSCP: "D:/Sounds/My.gig".

   The following LSCP commands even support escape sequences as part of
   at least one of their text-based arguments (i.e. entity name,
   description) and / or may contain escape sequences in at least one of
   their text-based fields in their response:

      "GET SERVER INFO" (Section 6.6.5)

      "GET ENGINE INFO" (Section 6.4.9)

      "GET CHANNEL INFO" (Section 6.4.10)

      "CREATE FX_SEND" (Section 6.4.25)

      "GET FX_SEND INFO" (Section 6.4.29)

      "SET FX_SEND NAME" (Section 6.4.30)

      "GET MIDI_INSTRUMENT INFO" (Section 6.7.11)

      "GET MIDI_INSTRUMENT_MAP INFO" (Section 6.7.5)

      "ADD MIDI_INSTRUMENT_MAP" (Section 6.7.1)

      "MAP MIDI_INSTRUMENT" (Section 6.7.7)

      "SET MIDI_INSTRUMENT_MAP NAME" (Section 6.7.6)

      "GET DB_INSTRUMENT_DIRECTORY INFO" (Section 6.8.5)

      "SET DB_INSTRUMENT_DIRECTORY NAME" (Section 6.8.6)





Schoenebeck                Expires May 5, 2010                [Page 134]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      "SET DB_INSTRUMENT_DIRECTORY DESCRIPTION" (Section 6.8.9)

      "FIND DB_INSTRUMENT_DIRECTORIES" (Section 6.8.10)

      "GET DB_INSTRUMENT INFO" (Section 6.8.15)

      "SET DB_INSTRUMENT NAME" (Section 6.8.16)

      "SET DB_INSTRUMENT DESCRIPTION" (Section 6.8.19)

      "FIND DB_INSTRUMENTS" (Section 6.8.20)

   Please note that these lists are manually maintained.  If you find a
   command that also supports escape sequences we forgot to mention
   here, please report it!




































Schoenebeck                Expires May 5, 2010                [Page 135]

Internet-Draft        LinuxSampler Control Protocol        November 2009


8.  Events

   This chapter will describe all currently defined events supported by
   LinuxSampler.

8.1.  Number of audio output devices changed

   Client may want to be notified when the total number of audio output
   devices on the back-end changes by issuing the following command:

      SUBSCRIBE AUDIO_OUTPUT_DEVICE_COUNT

   Server will start sending the following notification messages:

      "NOTIFY:AUDIO_OUTPUT_DEVICE_COUNT:<devices>"

   where <devices> will be replaced by the new number of audio output
   devices.

8.2.  Audio output device's settings changed

   Client may want to be notified when changes were made to audio output
   devices on the back-end by issuing the following command:

      SUBSCRIBE AUDIO_OUTPUT_DEVICE_INFO

   Server will start sending the following notification messages:

      "NOTIFY:AUDIO_OUTPUT_DEVICE_INFO:<device-id>"

   where <device-id> will be replaced by the numerical ID of the audio
   output device, which settings has been changed.  The front-end will
   have to send the respective command to actually get the audio output
   device info.  Because these messages will be triggered by LSCP
   commands issued by other clients rather than real time events
   happening on the server, it is believed that an empty notification
   message is sufficient here.

8.3.  Number of MIDI input devices changed

   Client may want to be notified when the total number of MIDI input
   devices on the back-end changes by issuing the following command:

      SUBSCRIBE MIDI_INPUT_DEVICE_COUNT

   Server will start sending the following notification messages:





Schoenebeck                Expires May 5, 2010                [Page 136]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      "NOTIFY:MIDI_INPUT_DEVICE_COUNT:<devices>"

   where <devices> will be replaced by the new number of MIDI input
   devices.

8.4.  MIDI input device's settings changed

   Client may want to be notified when changes were made to MIDI input
   devices on the back-end by issuing the following command:

      SUBSCRIBE MIDI_INPUT_DEVICE_INFO

   Server will start sending the following notification messages:

      "NOTIFY:MIDI_INPUT_DEVICE_INFO:<device-id>"

   where <device-id> will be replaced by the numerical ID of the MIDI
   input device, which settings has been changed.  The front-end will
   have to send the respective command to actually get the MIDI input
   device info.  Because these messages will be triggered by LSCP
   commands issued by other clients rather than real time events
   happening on the server, it is believed that an empty notification
   message is sufficient here.

8.5.  Number of sampler channels changed

   Client may want to be notified when the total number of channels on
   the back-end changes by issuing the following command:

      SUBSCRIBE CHANNEL_COUNT

   Server will start sending the following notification messages:

      "NOTIFY:CHANNEL_COUNT:<channels>"

   where <channels> will be replaced by the new number of sampler
   channels.

8.6.  MIDI data on a sampler channel arrived

   Client may want to be notified when MIDI data arrive on sampler
   channels on back-end side, by issuing the following command:

      SUBSCRIBE CHANNEL_MIDI

   Server will start sending one of the the following notification
   messages:




Schoenebeck                Expires May 5, 2010                [Page 137]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      "NOTIFY:CHANNEL_MIDI:<channel-id> NOTE_ON <note> <velocity>"

      "NOTIFY:CHANNEL_MIDI:<channel-id> NOTE_OFF <note> <velocity>"

   where <channel-id> will be replaced by the ID of the sampler channel
   where the MIDI data arrived. <note> and <velocity> are integer values
   in the range between 0 .. 127, reflecting the analog meaning of the
   MIDI specification.

   CAUTION: no guarantee whatsoever will be made that MIDI events are
   actually all delivered by this mechanism!  With other words: events
   could be lost at any time!  This restriction was made to keep the RT-
   safeness of the backend's MIDI and audio thread unaffected by this
   feature.

8.7.  MIDI data on a MIDI input device arrived

   Client may want to be notified when MIDI data arrive on MIDI input
   devices by issuing the following command:

      SUBSCRIBE DEVICE_MIDI

   Server will start sending one of the the following notification
   messages:

      "NOTIFY:DEVICE_MIDI:<device-id> <port-id> NOTE_ON <note>
      <velocity>"

      "NOTIFY:DEVICE_MIDI:<device-id> <port-id> NOTE_OFF <note>
      <velocity>"

   where <device-id> <port-id> will be replaced by the IDs of the
   respective MIDI input device and the device's MIDI port where the
   MIDI data arrived. <note> and <velocity> are integer values in the
   range between 0 .. 127, reflecting the analog meaning of the MIDI
   specification.

   CAUTION: no guarantee whatsoever will be made that MIDI events are
   actually all delivered by this mechanism!  With other words: events
   could be lost at any time!  This restriction was made to keep the RT-
   safeness of the backend's MIDI and audio thread unaffected by this
   feature.

8.8.  Number of active voices changed

   Client may want to be notified when the number of voices on the back-
   end changes by issuing the following command:




Schoenebeck                Expires May 5, 2010                [Page 138]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      SUBSCRIBE VOICE_COUNT

   Server will start sending the following notification messages:

      "NOTIFY:VOICE_COUNT:<sampler-channel> <voices>"

   where <sampler-channel> will be replaced by the sampler channel the
   voice count change occurred and <voices> by the new number of active
   voices on that channel.

8.9.  Number of active disk streams changed

   Client may want to be notified when the number of streams on the
   back-end changes by issuing the following command: SUBSCRIBE
   STREAM_COUNT

      SUBSCRIBE STREAM_COUNT

   Server will start sending the following notification messages:

      "NOTIFY:STREAM_COUNT:<sampler-channel> <streams>"

   where <sampler-channel> will be replaced by the sampler channel the
   stream count change occurred and <streams> by the new number of
   active disk streams on that channel.

8.10.  Disk stream buffer fill state changed

   Client may want to be notified when the buffer fill state of a disk
   stream on the back-end changes by issuing the following command:

      SUBSCRIBE BUFFER_FILL

   Server will start sending the following notification messages:

      "NOTIFY:BUFFER_FILL:<sampler-channel> <fill-data>"

   where <sampler-channel> will be replaced by the sampler channel the
   buffer fill state change occurred on and <fill-data> will be replaced
   by the buffer fill data for this channel as described in
   Section 6.4.13 as if the "GET CHANNEL BUFFER_FILL PERCENTAGE"
   (Section 6.4.13) command was issued on this channel.

8.11.  Channel information changed

   Client may want to be notified when changes were made to sampler
   channels on the back-end by issuing the following command:




Schoenebeck                Expires May 5, 2010                [Page 139]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      SUBSCRIBE CHANNEL_INFO

   Server will start sending the following notification messages:

      "NOTIFY:CHANNEL_INFO:<sampler-channel>"

   where <sampler-channel> will be replaced by the sampler channel the
   channel info change occurred.  The front-end will have to send the
   respective command to actually get the channel info.  Because these
   messages will be triggered by LSCP commands issued by other clients
   rather than real time events happening on the server, it is believed
   that an empty notification message is sufficient here.

8.12.  Number of effect sends changed

   Client may want to be notified when the number of effect sends on a
   particular sampler channel is changed by issuing the following
   command:

      SUBSCRIBE FX_SEND_COUNT

   Server will start sending the following notification messages:

      "NOTIFY:FX_SEND_COUNT:<channel-id> <fx-sends>"

   where <channel-id> will be replaced by the numerical ID of the
   sampler channel, on which the effect sends number is changed and <fx-
   sends> will be replaced by the new number of effect sends on that
   channel.

8.13.  Effect send information changed

   Client may want to be notified when changes were made to effect sends
   on a a particular sampler channel by issuing the following command:

      SUBSCRIBE FX_SEND_INFO

   Server will start sending the following notification messages:

      "NOTIFY:FX_SEND_INFO:<channel-id> <fx-send-id>"

   where <channel-id> will be replaced by the numerical ID of the
   sampler channel, on which an effect send entity is changed and <fx-
   send-id> will be replaced by the numerical ID of the changed effect
   send.






Schoenebeck                Expires May 5, 2010                [Page 140]

Internet-Draft        LinuxSampler Control Protocol        November 2009


8.14.  Total number of active voices changed

   Client may want to be notified when the total number of voices on the
   back-end changes by issuing the following command:

      SUBSCRIBE TOTAL_VOICE_COUNT

   Server will start sending the following notification messages:

      "NOTIFY:TOTAL_VOICE_COUNT:<voices>"

   where <voices> will be replaced by the new number of all currently
   active voices.

8.15.  Total number of active disk streams changed

   Client may want to be notified when the total number of disk streams
   on the back-end changes by issuing the following command:

      SUBSCRIBE TOTAL_STREAM_COUNT

   Server will start sending the following notification messages:

      "NOTIFY:TOTAL_STREAM_COUNT:<streams>"

   where <streams> will be replaced by the new number of all currently
   active disk streams.

8.16.  Number of MIDI instrument maps changed

   Client may want to be notified when the number of MIDI instrument
   maps on the back-end changes by issuing the following command:

      SUBSCRIBE MIDI_INSTRUMENT_MAP_COUNT

   Server will start sending the following notification messages:

      "NOTIFY:MIDI_INSTRUMENT_MAP_COUNT:<maps>"

   where <maps> will be replaced by the new number of MIDI instrument
   maps.

8.17.  MIDI instrument map information changed

   Client may want to be notified when changes were made to MIDI
   instrument maps on the back-end by issuing the following command:





Schoenebeck                Expires May 5, 2010                [Page 141]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      SUBSCRIBE MIDI_INSTRUMENT_MAP_INFO

   Server will start sending the following notification messages:

      "NOTIFY:MIDI_INSTRUMENT_MAP_INFO:<map-id>"

   where <map-id> will be replaced by the numerical ID of the MIDI
   instrument map, for which information changes occurred.  The front-
   end will have to send the respective command to actually get the MIDI
   instrument map info.  Because these messages will be triggered by
   LSCP commands issued by other clients rather than real time events
   happening on the server, it is believed that an empty notification
   message is sufficient here.

8.18.  Number of MIDI instruments changed

   Client may want to be notified when the number of MIDI instrument
   maps on the back-end changes by issuing the following command:

      SUBSCRIBE MIDI_INSTRUMENT_COUNT

   Server will start sending the following notification messages:

      "NOTIFY:MIDI_INSTRUMENT_COUNT:<map-id> <instruments>"

   where <map-id> is the numerical ID of the MIDI instrument map, in
   which the nuber of instruments has changed and <instruments> will be
   replaced by the new number of MIDI instruments in the specified map.

8.19.  MIDI instrument information changed

   Client may want to be notified when changes were made to MIDI
   instruments on the back-end by issuing the following command:

      SUBSCRIBE MIDI_INSTRUMENT_INFO

   Server will start sending the following notification messages:

      "NOTIFY:MIDI_INSTRUMENT_INFO:<map-id> <bank> <program>"

   where <map-id> will be replaced by the numerical ID of the MIDI
   instrument map, in which a MIDI instrument is changed. <bank> and
   <program> specifies the location of the changed MIDI instrument in
   the map.  The front-end will have to send the respective command to
   actually get the MIDI instrument info.  Because these messages will
   be triggered by LSCP commands issued by other clients rather than
   real time events happening on the server, it is believed that an
   empty notification message is sufficient here.



Schoenebeck                Expires May 5, 2010                [Page 142]

Internet-Draft        LinuxSampler Control Protocol        November 2009


8.20.  Global settings changed

   Client may want to be notified when changes to the global settings of
   the sampler were made by issuing the following command:

      SUBSCRIBE GLOBAL_INFO

   Server will start sending the following types of notification
   messages:

      "NOTIFY:GLOBAL_INFO:VOLUME <volume>" - Notifies that the golbal
      volume of the sampler is changed, where <volume> will be replaced
      by the optional dotted floating point value, reflecting the new
      global volume parameter.

      "NOTIFY:GLOBAL_INFO:VOICES <max-voices>" - Notifies that the
      golbal limit of the sampler for maximum voices is changed, where
      <max-voices> will be an integer value, reflecting the new global
      voice limit parameter.

      "NOTIFY:GLOBAL_INFO:STREAMS <max-streams>" - Notifies that the
      golbal limit of the sampler for maximum disk streams is changed,
      where <max-streams> will be an integer value, reflecting the new
      global disk streams limit parameter.

8.21.  Number of database instrument directories changed

   Client may want to be notified when the number of instrument
   directories in a particular directory in the instruments database is
   changed by issuing the following command:

      SUBSCRIBE DB_INSTRUMENT_DIRECTORY_COUNT

   Server will start sending the following notification messages:

      "NOTIFY:DB_INSTRUMENT_DIRECTORY_COUNT:<dir-path>"

   where <dir-path> will be replaced by the absolute path name of the
   directory in the instruments database, in which the number of
   directories is changed.

   Note that when a non-empty directory is removed, this event is not
   sent for the subdirectories in that directory.

8.22.  Database instrument directory information changed

   Client may want to be notified when changes were made to directories
   in the instruments database by issuing the following command:



Schoenebeck                Expires May 5, 2010                [Page 143]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      SUBSCRIBE DB_INSTRUMENT_DIRECTORY_INFO

   Server will start sending the following notification messages:

      "NOTIFY:DB_INSTRUMENT_DIRECTORY_INFO:<dir-path>"

   where <dir-path> will be replaced by the absolute path name of the
   directory, for which information changes occurred.  The front-end
   will have to send the respective command to actually get the updated
   directory info.  Because these messages will be triggered by LSCP
   commands issued by other clients rather than real time events
   happening on the server, it is believed that an empty notification
   message is sufficient here.

      "NOTIFY:DB_INSTRUMENT_DIRECTORY_INFO:NAME <old-dir-path> <new-
      name>"

   where <old-dir-path> is the old absolute path name of the directory
   (encapsulated into apostrophes), which name is changes and <new-name>
   is the new name of the directory, encapsulated into apostrophes.

8.23.  Number of database instruments changed

   Client may want to be notified when the number of instruments in a
   particular directory in the instruments database is changed by
   issuing the following command:

      SUBSCRIBE DB_INSTRUMENT_COUNT

   Server will start sending the following notification messages:

      "NOTIFY:DB_INSTRUMENT_COUNT:<dir-path>"

   where <dir-path> will be replaced by the absolute path name of the
   directory in the instruments database, in which the number of
   instruments is changed.

   Note that when a non-empty directory is removed, this event is not
   sent for the instruments in that directory.

8.24.  Database instrument information changed

   Client may want to be notified when changes were made to instruments
   in the instruments database by issuing the following command:

      SUBSCRIBE DB_INSTRUMENT_INFO

   Server will start sending the following notification messages:



Schoenebeck                Expires May 5, 2010                [Page 144]

Internet-Draft        LinuxSampler Control Protocol        November 2009


      "NOTIFY:DB_INSTRUMENT_INFO:<instr-path>"

   where <instr-path> will be replaced by the absolute path name of the
   instrument, which settings are changed.  The front-end will have to
   send the respective command to actually get the updated directory
   info.  Because these messages will be triggered by LSCP commands
   issued by other clients rather than real time events happening on the
   server, it is believed that an empty notification message is
   sufficient here.

      "NOTIFY:DB_INSTRUMENT_INFO:NAME <old-instr-path> <new-name>"

   where <old-instr-path> is the old absolute path name of the
   instrument (encapsulated into apostrophes), which name is changes and
   <new-name> is the new name of the instrument, encapsulated into
   apostrophes.

8.25.  Database job status information changed

   Client may want to be notified when the status of particular database
   instruments job is changed by issuing the following command:

      SUBSCRIBE DB_INSTRUMENTS_JOB_INFO

   Server will start sending the following notification messages:

      "NOTIFY:DB_INSTRUMENTS_JOB_INFO:<job-id>"

   where <job-id> will be replaced by the numerical ID of the job, which
   status is changed.  The front-end will have to send the respective
   command to actually get the status info.  Because these messages will
   be triggered by LSCP commands issued by other clients rather than
   real time events happening on the server, it is believed that an
   empty notification message is sufficient here.

8.26.  Miscellaneous and debugging events

   Client may want to be notified of miscellaneous and debugging events
   occurring at the server by issuing the following command:

      SUBSCRIBE MISCELLANEOUS

   Server will start sending the following notification messages:

      "NOTIFY:MISCELLANEOUS:<string>"

   where <string> will be replaced by whatever data server wants to send
   to the client.  Client MAY display this data to the user AS IS to



Schoenebeck                Expires May 5, 2010                [Page 145]

Internet-Draft        LinuxSampler Control Protocol        November 2009


   facilitate debugging.


















































Schoenebeck                Expires May 5, 2010                [Page 146]

Internet-Draft        LinuxSampler Control Protocol        November 2009


9.  Security Considerations

   As there is so far no method of authentication and authorization
   defined and so not required for a client applications to succeed to
   connect, running LinuxSampler might be a security risk for the host
   system the LinuxSampler instance is running on.













































Schoenebeck                Expires May 5, 2010                [Page 147]

Internet-Draft        LinuxSampler Control Protocol        November 2009


10.  Acknowledgments

   This document has benefited greatly from the comments of the
   following people, discussed on the LinuxSampler developer's mailing
   list:

      Rui Nuno Capela

      Vladimir Senkov

      Mark Knecht

      Grigor Iliev






































Schoenebeck                Expires May 5, 2010                [Page 148]

Internet-Draft        LinuxSampler Control Protocol        November 2009


11.  References

   [RFC20]    UCLA, "ASCII format for Network Interchange", RFC 20,
              1969.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", RFC 2119, 1997.

   [RFC2234]  Crocker, D. and P. Overell, "Augmented BNF for Syntax
              Specifications", RFC 2234, 1997.

   [RFC793]   Defense Advanced Research Projects Agency, "TRANSMISSION
              CONTROL PROTOCOL", RFC 793, 1981.






































Schoenebeck                Expires May 5, 2010                [Page 149]

Internet-Draft        LinuxSampler Control Protocol        November 2009


Author's Address

   C. Schoenebeck
   Interessengemeinschaft Software Engineering e. V.
   Max-Planck-Str. 39
   74081 Heilbronn
   Germany

   Email: schoenebeck at software minus engineering dot org










































Schoenebeck                Expires May 5, 2010                [Page 150]

Internet-Draft        LinuxSampler Control Protocol        November 2009


Full Copyright Statement

   Copyright (C) The IETF Trust (2009).

   This document is subject to the rights, licenses and restrictions
   contained in BCP 78, and except as set forth therein, the authors
   retain all their rights.

   This document and the information contained herein are provided on an
   "AS IS" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS
   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND
   THE INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS
   OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF
   THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED
   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.


Intellectual Property

   The IETF takes no position regarding the validity or scope of any
   Intellectual Property Rights or other rights that might be claimed to
   pertain to the implementation or use of the technology described in
   this document or the extent to which any license under such rights
   might or might not be available; nor does it represent that it has
   made any independent effort to identify any such rights.  Information
   on the procedures with respect to rights in RFC documents can be
   found in BCP 78 and BCP 79.

   Copies of IPR disclosures made to the IETF Secretariat and any
   assurances of licenses to be made available, or the result of an
   attempt made to obtain a general license or permission for the use of
   such proprietary rights by implementers or users of this
   specification can be obtained from the IETF on-line IPR repository at
   http://www.ietf.org/ipr.

   The IETF invites any interested party to bring to its attention any
   copyrights, patents or patent applications, or other proprietary
   rights that may cover technology that may be required to implement
   this standard.  Please address the information to the IETF at
   ietf-ipr@ietf.org.











Schoenebeck                Expires May 5, 2010                [Page 151]


