Content
=======
  libgig actually consists of three parts:

  - RIFF classes (RIFF.h, RIFF.cpp): Provides convenient methods to parse and
                                     access arbitrary RIFF files.
  - DLS classes (DLS.h, DLS.cpp):    They're using the RIFF classes to parse
                                     DLS (Downloadable Sounds) Level 1 and 2
                                     files and provide abstract access to the
                                     data.
  - gig classes (gig.h, gig.cpp):    These are based on the DLS classes and
                                     provide the neccessary extensions for
                                     the Gigasampler file format.

Requirements
============
  I simply used automake & co this time so you will need to have automake,
  autoconf and libtool installed. I used the following versions:

    automake  1.6.3
    autoconf  2.57

  If you want to compile the 'gigextract' application that comes with these
  sources then you will additionally need to have libaudiofile (>= 0.2.3)
  or libsndfile (>= 1.0.2) installed. Note: for Windows systems only
  libsndfile is available.

Non-POSIX systems
=================
  If you don't have a POSIX system, you have to set 'POSIX' to '0' in RIFF.h.
  Instead of using POSIX calls then standard C calls will be used for file
  access. This applies e.g. to Windows systems.

Compiling
=========

  You can either compile the sources and install the library directly on
  your system or you can create Redhat or Debian packages.

  a) Compiling and installing directly

  Use 'make -f Makefile.cvs && ./configure && make' to compile the library,
  all tools, demo applications, documentation and install them with
  'make install'. You can use 'make distclean && make -f Makefile.cvs clean'
  to clean up everything again.

  b) Creating Debian packages

  Use 'make -f Makefile.cvs && dpkg-buildpackage -rfakeroot -b' to compile
  and create the Debian packages. This will generate 3 Debian packages:

    libgig:      Contains the shared library files.
    libgig-dev:  Contains the header files and documentation for building
                 applications using libgig.
    gigtools:    Contains the tools and demo applications.

  You can use 'fakeroot debian/rules clean && make -f Makefile.cvs clean'
  to clean up everything again.

  c) Creating Redhat packages

  You need to have the rpmbuild tool installed and properly configured to
  create RPM packages. To create the RPM packages do the following:

    * Get .spec file generated by ./configure and edit it as appropriate.

    * Copy the source tarball to "/usr/src/<rpmdir>/SOURCES" directory,
      where <rpmdir> is dependent to the system you are using. For SuSE
      <rmpdir> will be "packages", for Mandrake <rpmdir> is "RPM" and for
      Redhat / Fedora <rpmdir> always equals "redhat".

    * Build the rpm(s) by invoking 'rpmbuild -bb <specfile>' from the
      command line.

  On success, the resulting rpm(s) can usually be found under the proper
  "/usr/src/<rpmdir>/RPMS/<arch>" directory.

Tools
=====

 Beside the actual library there are four applications:

     gigdump:     Demo app that prints out the content of a .gig file.
     gigextract:  Extracts samples from a .gig file.
     dlsdump:     Demo app that prints out the content of a DLS file.
     rifftree:    Tool that prints out the RIFF tree of an arbitrary RIFF
                  file.

API Documentation
=================

 If you have Doxygen installed you can generate the API documentation by
 just running 'doxygen' in the sources' top level directory. The API
 documentation will be generated in the 'html' subdirectory.

Patches
=======
  If you find bugs or have improvements, your patches are always welcome!
  Send them either directly to me or to the LinuxSampler developer's mailing
  list <linuxsampler-devel@lists.sourceforge.net>.

Credits
=======
  This library is based on the reverse engineering work of Paul Kellett and
  Ruben van Royen. Thanks for your great work!

 Christian Schoenebeck <cuse@users.sourceforge.net>
